
Tire_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08008e34  08008e34  00009e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000048  20000008  080090a0  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000050  080090e8  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000088  0800911d  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000009c  0800912e  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800912e  0000b40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800912e  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002736f  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000591a  00000000  00000000  00032e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000022f0  00000000  00000000  00038720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a84  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025fdb  00000000  00000000  0003c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000272b8  00000000  00000000  0006246f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ce965  00000000  00000000  00089727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0015808c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000090b4  00000000  00000000  001580d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000059  00000000  00000000  00161184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000009c 	.word	0x2000009c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008e1c 	.word	0x08008e1c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a0 	.word	0x200000a0
 8000178:	08008e1c 	.word	0x08008e1c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f007 f923 	bl	800741c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f006 fbb4 	bl	8006946 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000016 	.word	0x20000016
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	20000018 	.word	0x20000018
 80001f4:	2000001a 	.word	0x2000001a
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	2000001e 	.word	0x2000001e
 8000200:	08008e34 	.word	0x08008e34

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fe:	f023 0304 	bic.w	r3, r3, #4
 8000302:	6113      	str	r3, [r2, #16]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	22ff      	movs	r2, #255	@ 0xff
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	22ca      	movs	r2, #202	@ 0xca
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2253      	movs	r2, #83	@ 0x53
 8000340:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f023 0207 	bic.w	r2, r3, #7
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	431a      	orrs	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <MX_APPE_Config+0x18>)
 800037a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800037e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000380:	f000 f824 	bl	80003cc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000384:	f000 f829 	bl	80003da <Config_HSE>

  return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	58004000 	.word	0x58004000

08000390 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000394:	f000 f835 	bl	8000402 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000398:	f000 f84e 	bl	8000438 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800039c:	4903      	ldr	r1, [pc, #12]	@ (80003ac <MX_APPE_Init+0x1c>)
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fd90 	bl	8000ec4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80003a4:	f000 f858 	bl	8000458 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80003a8:	bf00      	nop
}
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000194 	.word	0x20000194

080003b0 <Init_Smps>:

void Init_Smps(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80003b4:	bf00      	nop
}
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <Init_Exti>:

void Init_Exti(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80003c2:	2050      	movs	r0, #80	@ 0x50
 80003c4:	f7ff ff34 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 80003c8:	bf00      	nop
}
 80003ca:	bd80      	pop	{r7, pc}

080003cc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003d0:	bf00      	nop
}
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b082      	sub	sp, #8
 80003de:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f007 f8a7 	bl	8007534 <OTP_Read>
 80003e6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d005      	beq.n	80003fa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	799b      	ldrb	r3, [r3, #6]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff30 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
}
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <System_Init>:

static void System_Init(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0
  Init_Smps();
 8000406:	f7ff ffd3 	bl	80003b0 <Init_Smps>

  Init_Exti();
 800040a:	f7ff ffd8 	bl	80003be <Init_Exti>

  Init_Rtc();
 800040e:	f000 f803 	bl	8000418 <Init_Rtc>

  return;
 8000412:	bf00      	nop
}
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800041c:	4805      	ldr	r0, [pc, #20]	@ (8000434 <Init_Rtc+0x1c>)
 800041e:	f7ff ff86 	bl	800032e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000422:	2100      	movs	r1, #0
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <Init_Rtc+0x1c>)
 8000426:	f7ff ff92 	bl	800034e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800042a:	4802      	ldr	r0, [pc, #8]	@ (8000434 <Init_Rtc+0x1c>)
 800042c:	f7ff ff72 	bl	8000314 <LL_RTC_EnableWriteProtection>

  return;
 8000430:	bf00      	nop
}
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40002800 	.word	0x40002800

08000438 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800043c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000440:	f7ff ff28 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000444:	f008 fa46 	bl	80088d4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000448:	2004      	movs	r0, #4
 800044a:	f7ff fedb 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800044e:	f002 fae7 	bl	8002a20 <HAL_PWREx_EnableSRAMRetention>

  return;
 8000452:	bf00      	nop
}
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800045e:	f006 fe27 	bl	80070b0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000462:	4a11      	ldr	r2, [pc, #68]	@ (80004a8 <appe_Tl_Init+0x50>)
 8000464:	2100      	movs	r1, #0
 8000466:	2004      	movs	r0, #4
 8000468:	f008 fb72 	bl	8008b50 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <appe_Tl_Init+0x54>)
 800046e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <appe_Tl_Init+0x58>)
 8000472:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480e      	ldr	r0, [pc, #56]	@ (80004b4 <appe_Tl_Init+0x5c>)
 800047a:	f006 fcdb 	bl	8006e34 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <appe_Tl_Init+0x60>)
 8000480:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <appe_Tl_Init+0x64>)
 8000484:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <appe_Tl_Init+0x68>)
 8000488:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800048a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800048e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4618      	mov	r0, r3
 8000496:	f006 ff4d 	bl	8007334 <TL_MM_Init>

  TL_Enable();
 800049a:	f006 fe03 	bl	80070a4 <TL_Enable>

  return;
 800049e:	bf00      	nop
}
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	08006e6d 	.word	0x08006e6d
 80004ac:	20030734 	.word	0x20030734
 80004b0:	080004c5 	.word	0x080004c5
 80004b4:	080004dd 	.word	0x080004dd
 80004b8:	2003094c 	.word	0x2003094c
 80004bc:	20030840 	.word	0x20030840
 80004c0:	200301f8 	.word	0x200301f8

080004c4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004ce:	bf00      	nop
}
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	330b      	adds	r3, #11
 80004ea:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004f6:	2b07      	cmp	r3, #7
 80004f8:	d81f      	bhi.n	800053a <APPE_SysUserEvtRx+0x5e>
 80004fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000500 <APPE_SysUserEvtRx+0x24>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000521 	.word	0x08000521
 8000504:	08000533 	.word	0x08000533
 8000508:	0800053b 	.word	0x0800053b
 800050c:	0800053b 	.word	0x0800053b
 8000510:	0800053b 	.word	0x0800053b
 8000514:	0800053b 	.word	0x0800053b
 8000518:	0800053b 	.word	0x0800053b
 800051c:	0800053b 	.word	0x0800053b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4618      	mov	r0, r3
 8000526:	f006 fa3b 	bl	80069a0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f81b 	bl	8000566 <APPE_SysEvtReadyProcessing>
    break;
 8000530:	e004      	b.n	800053c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f806 	bl	8000544 <APPE_SysEvtError>
    break;
 8000538:	e000      	b.n	800053c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800053a:	bf00      	nop
  }

  return;
 800053c:	bf00      	nop
}
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	330b      	adds	r3, #11
 8000552:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3302      	adds	r3, #2
 8000558:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800055a:	bf00      	nop
}
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b08a      	sub	sp, #40	@ 0x28
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	330b      	adds	r3, #11
 800058a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	3302      	adds	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d11d      	bne.n	80005d6 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800059a:	f7ff fdf7 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800059e:	230f      	movs	r3, #15
 80005a0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80005a2:	237f      	movs	r3, #127	@ 0x7f
 80005a4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80005a6:	f7ff fe97 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 80005aa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80005ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80005b2:	f7ff fe83 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 80005b6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80005b8:	6a3b      	ldr	r3, [r7, #32]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 f9d6 	bl	8006974 <SHCI_C2_Config>

    APP_BLE_Init();
 80005c8:	f007 f8be 	bl	8007748 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f008 f992 	bl	80088f8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005d4:	e007      	b.n	80005e6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d103      	bne.n	80005e6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
  return;
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
}
 80005e8:	3728      	adds	r7, #40	@ 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f6:	f001 fddb 	bl	80021b0 <HAL_GetTick>
 80005fa:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000606:	d00a      	beq.n	800061e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000608:	f001 fdea 	bl	80021e0 <HAL_GetTickFreq>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000616:	e002      	b.n	800061e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000618:	f7ff fe6c 	bl	80002f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800061c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800061e:	f001 fdc7 	bl	80021b0 <HAL_GetTick>
 8000622:	4602      	mov	r2, r0
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	d8f4      	bhi.n	8000618 <HAL_Delay+0x2a>
  }
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f008 f98a 	bl	8008958 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800064c:	bf00      	nop
}
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800065e:	2100      	movs	r1, #0
 8000660:	2004      	movs	r0, #4
 8000662:	f008 fa97 	bl	8008b94 <UTIL_SEQ_SetTask>
  return;
 8000666:	bf00      	nop
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000676:	2002      	movs	r0, #2
 8000678:	f008 faf8 	bl	8008c6c <UTIL_SEQ_SetEvt>
  return;
 800067c:	bf00      	nop
}
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800068c:	2002      	movs	r0, #2
 800068e:	f008 fb0d 	bl	8008cac <UTIL_SEQ_WaitEvt>
  return;
 8000692:	bf00      	nop
}
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <LL_EXTI_EnableIT_0_31>:
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80006a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80006aa:	4905      	ldr	r1, [pc, #20]	@ (80006c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	58000800 	.word	0x58000800

080006c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4904      	ldr	r1, [pc, #16]	@ (80006e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	600b      	str	r3, [r1, #0]

}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	58000800 	.word	0x58000800

080006e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <ReadRtcSsrValue+0x3c>)
 80006f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <ReadRtcSsrValue+0x3c>)
 80006f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006fe:	e005      	b.n	800070c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <ReadRtcSsrValue+0x3c>)
 8000706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000708:	b29b      	uxth	r3, r3
 800070a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d1f5      	bne.n	8000700 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000714:	683b      	ldr	r3, [r7, #0]
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40002800 	.word	0x40002800

08000728 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	491d      	ldr	r1, [pc, #116]	@ (80007b0 <LinkTimerAfter+0x88>)
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	3315      	adds	r3, #21
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2b06      	cmp	r3, #6
 8000750:	d009      	beq.n	8000766 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	4916      	ldr	r1, [pc, #88]	@ (80007b0 <LinkTimerAfter+0x88>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3314      	adds	r3, #20
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	4911      	ldr	r1, [pc, #68]	@ (80007b0 <LinkTimerAfter+0x88>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3315      	adds	r3, #21
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <LinkTimerAfter+0x88>)
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	3314      	adds	r3, #20
 800078a:	79ba      	ldrb	r2, [r7, #6]
 800078c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	4907      	ldr	r1, [pc, #28]	@ (80007b0 <LinkTimerAfter+0x88>)
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	440b      	add	r3, r1
 800079c:	3315      	adds	r3, #21
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	701a      	strb	r2, [r3, #0]

  return;
 80007a2:	bf00      	nop
}
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	200000b8 	.word	0x200000b8

080007b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <LinkTimerBefore+0xb8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d032      	beq.n	8000836 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	4927      	ldr	r1, [pc, #156]	@ (8000870 <LinkTimerBefore+0xbc>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3314      	adds	r3, #20
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	4922      	ldr	r1, [pc, #136]	@ (8000870 <LinkTimerBefore+0xbc>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	3315      	adds	r3, #21
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	491d      	ldr	r1, [pc, #116]	@ (8000870 <LinkTimerBefore+0xbc>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	3315      	adds	r3, #21
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	4918      	ldr	r1, [pc, #96]	@ (8000870 <LinkTimerBefore+0xbc>)
 8000810:	4613      	mov	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	440b      	add	r3, r1
 800081a:	3314      	adds	r3, #20
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	4913      	ldr	r1, [pc, #76]	@ (8000870 <LinkTimerBefore+0xbc>)
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	440b      	add	r3, r1
 800082e:	3314      	adds	r3, #20
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000834:	e014      	b.n	8000860 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LinkTimerBefore+0xbc>)
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	440b      	add	r3, r1
 8000844:	3315      	adds	r3, #21
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800084a:	79ba      	ldrb	r2, [r7, #6]
 800084c:	4908      	ldr	r1, [pc, #32]	@ (8000870 <LinkTimerBefore+0xbc>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	440b      	add	r3, r1
 8000858:	3314      	adds	r3, #20
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	701a      	strb	r2, [r3, #0]
  return;
 800085e:	bf00      	nop
}
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000148 	.word	0x20000148
 8000870:	200000b8 	.word	0x200000b8

08000874 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800087e:	4b4e      	ldr	r3, [pc, #312]	@ (80009b8 <linkTimer+0x144>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b06      	cmp	r3, #6
 8000886:	d118      	bne.n	80008ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000888:	4b4b      	ldr	r3, [pc, #300]	@ (80009b8 <linkTimer+0x144>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b4b      	ldr	r3, [pc, #300]	@ (80009bc <linkTimer+0x148>)
 8000890:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000892:	4a49      	ldr	r2, [pc, #292]	@ (80009b8 <linkTimer+0x144>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	4949      	ldr	r1, [pc, #292]	@ (80009c0 <linkTimer+0x14c>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3315      	adds	r3, #21
 80008a8:	2206      	movs	r2, #6
 80008aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008ac:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <linkTimer+0x150>)
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295
 80008b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	81fb      	strh	r3, [r7, #14]
 80008b8:	e078      	b.n	80009ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008ba:	f000 f909 	bl	8000ad0 <ReturnTimeElapsed>
 80008be:	4603      	mov	r3, r0
 80008c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	493e      	ldr	r1, [pc, #248]	@ (80009c0 <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	79fa      	ldrb	r2, [r7, #7]
 80008d8:	4419      	add	r1, r3
 80008da:	4839      	ldr	r0, [pc, #228]	@ (80009c0 <linkTimer+0x14c>)
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4403      	add	r3, r0
 80008e6:	3308      	adds	r3, #8
 80008e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	4934      	ldr	r1, [pc, #208]	@ (80009c0 <linkTimer+0x14c>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	3308      	adds	r3, #8
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <linkTimer+0x144>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	4a2e      	ldr	r2, [pc, #184]	@ (80009c0 <linkTimer+0x14c>)
 8000908:	460b      	mov	r3, r1
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	440b      	add	r3, r1
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	4413      	add	r3, r2
 8000912:	3308      	adds	r3, #8
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	429a      	cmp	r2, r3
 800091a:	d337      	bcc.n	800098c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <linkTimer+0x144>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000922:	7b7a      	ldrb	r2, [r7, #13]
 8000924:	4926      	ldr	r1, [pc, #152]	@ (80009c0 <linkTimer+0x14c>)
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	440b      	add	r3, r1
 8000930:	3315      	adds	r3, #21
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000936:	e013      	b.n	8000960 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000938:	7b7a      	ldrb	r2, [r7, #13]
 800093a:	4921      	ldr	r1, [pc, #132]	@ (80009c0 <linkTimer+0x14c>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800094c:	7b7a      	ldrb	r2, [r7, #13]
 800094e:	491c      	ldr	r1, [pc, #112]	@ (80009c0 <linkTimer+0x14c>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3315      	adds	r3, #21
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	2b06      	cmp	r3, #6
 8000964:	d00b      	beq.n	800097e <linkTimer+0x10a>
 8000966:	7b3a      	ldrb	r2, [r7, #12]
 8000968:	4915      	ldr	r1, [pc, #84]	@ (80009c0 <linkTimer+0x14c>)
 800096a:	4613      	mov	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4413      	add	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	440b      	add	r3, r1
 8000974:	3308      	adds	r3, #8
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	429a      	cmp	r2, r3
 800097c:	d2dc      	bcs.n	8000938 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800097e:	7b7a      	ldrb	r2, [r7, #13]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fecf 	bl	8000728 <LinkTimerAfter>
 800098a:	e00f      	b.n	80009ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <linkTimer+0x144>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff0c 	bl	80007b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <linkTimer+0x144>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <linkTimer+0x148>)
 80009a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80009a6:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <linkTimer+0x144>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80009ac:	89fb      	ldrh	r3, [r7, #14]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000148 	.word	0x20000148
 80009bc:	20000149 	.word	0x20000149
 80009c0:	200000b8 	.word	0x200000b8
 80009c4:	2000014c 	.word	0x2000014c

080009c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009d8:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <UnlinkTimer+0xf8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d111      	bne.n	8000a08 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009e4:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <UnlinkTimer+0xf8>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b36      	ldr	r3, [pc, #216]	@ (8000ac4 <UnlinkTimer+0xfc>)
 80009ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	4935      	ldr	r1, [pc, #212]	@ (8000ac8 <UnlinkTimer+0x100>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	3315      	adds	r3, #21
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <UnlinkTimer+0xf8>)
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e03e      	b.n	8000a86 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	492f      	ldr	r1, [pc, #188]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	3314      	adds	r3, #20
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	492a      	ldr	r1, [pc, #168]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3315      	adds	r3, #21
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a30:	79f9      	ldrb	r1, [r7, #7]
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	4824      	ldr	r0, [pc, #144]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a36:	460b      	mov	r3, r1
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	440b      	add	r3, r1
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4403      	add	r3, r0
 8000a40:	3315      	adds	r3, #21
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2d8      	uxtb	r0, r3
 8000a46:	4920      	ldr	r1, [pc, #128]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	3315      	adds	r3, #21
 8000a54:	4602      	mov	r2, r0
 8000a56:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d013      	beq.n	8000a86 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a5e:	79f9      	ldrb	r1, [r7, #7]
 8000a60:	7bba      	ldrb	r2, [r7, #14]
 8000a62:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a64:	460b      	mov	r3, r1
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	440b      	add	r3, r1
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3314      	adds	r3, #20
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2d8      	uxtb	r0, r3
 8000a74:	4914      	ldr	r1, [pc, #80]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	4602      	mov	r2, r0
 8000a84:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	490f      	ldr	r1, [pc, #60]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	330c      	adds	r3, #12
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <UnlinkTimer+0xf8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d107      	bne.n	8000ab4 <UnlinkTimer+0xec>
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <UnlinkTimer+0x104>)
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
}
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20000148 	.word	0x20000148
 8000ac4:	20000149 	.word	0x20000149
 8000ac8:	200000b8 	.word	0x200000b8
 8000acc:	2000014c 	.word	0x2000014c

08000ad0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ade:	d026      	beq.n	8000b2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ae0:	f7ff fe02 	bl	80006e8 <ReadRtcSsrValue>
 8000ae4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d805      	bhi.n	8000afc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e00a      	b.n	8000b12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <ReturnTimeElapsed+0x74>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <ReturnTimeElapsed+0x78>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <ReturnTimeElapsed+0x7c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	40d3      	lsrs	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	e001      	b.n	8000b32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	b29b      	uxth	r3, r3
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000014c 	.word	0x2000014c
 8000b44:	20000154 	.word	0x20000154
 8000b48:	20000152 	.word	0x20000152
 8000b4c:	20000151 	.word	0x20000151

08000b50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d108      	bne.n	8000b72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b60:	f7ff fdc2 	bl	80006e8 <ReadRtcSsrValue>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <RestartWakeupCounter+0x9c>)
 8000b68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f001 fcd1 	bl	8002512 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b70:	e039      	b.n	8000be6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d803      	bhi.n	8000b80 <RestartWakeupCounter+0x30>
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <RestartWakeupCounter+0xa0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d002      	beq.n	8000b86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b86:	bf00      	nop
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ba6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <RestartWakeupCounter+0xa8>)
 8000baa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f001 fcbc 	bl	800252e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <RestartWakeupCounter+0xac>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	041b      	lsls	r3, r3, #16
 8000bbe:	88fa      	ldrh	r2, [r7, #6]
 8000bc0:	490e      	ldr	r1, [pc, #56]	@ (8000bfc <RestartWakeupCounter+0xac>)
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bc6:	f7ff fd8f 	bl	80006e8 <ReadRtcSsrValue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <RestartWakeupCounter+0x9c>)
 8000bce:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bde:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000be0:	f3af 8000 	nop.w
  return ;
 8000be4:	bf00      	nop
}
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000014c 	.word	0x2000014c
 8000bf0:	20000151 	.word	0x20000151
 8000bf4:	20000194 	.word	0x20000194
 8000bf8:	58000800 	.word	0x58000800
 8000bfc:	40002800 	.word	0x40002800

08000c00 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c06:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <RescheduleTimerList+0x11c>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c12:	d107      	bne.n	8000c24 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000c14:	bf00      	nop
 8000c16:	4b42      	ldr	r3, [pc, #264]	@ (8000d20 <RescheduleTimerList+0x120>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f8      	bne.n	8000c16 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000c24:	4b3e      	ldr	r3, [pc, #248]	@ (8000d20 <RescheduleTimerList+0x120>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <RescheduleTimerList+0x120>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c32:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c34:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <RescheduleTimerList+0x124>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	493a      	ldr	r1, [pc, #232]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3308      	adds	r3, #8
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c4e:	f7ff ff3f 	bl	8000ad0 <ReturnTimeElapsed>
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d205      	bcs.n	8000c6a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <RescheduleTimerList+0x12c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e04d      	b.n	8000d06 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a30      	ldr	r2, [pc, #192]	@ (8000d30 <RescheduleTimerList+0x130>)
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	4413      	add	r3, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d906      	bls.n	8000c8a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <RescheduleTimerList+0x130>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <RescheduleTimerList+0x12c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e03d      	b.n	8000d06 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c94:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <RescheduleTimerList+0x12c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c9a:	e034      	b.n	8000d06 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	4922      	ldr	r1, [pc, #136]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	3308      	adds	r3, #8
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d20a      	bcs.n	8000cca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	491c      	ldr	r1, [pc, #112]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3308      	adds	r3, #8
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e013      	b.n	8000cf2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	4916      	ldr	r1, [pc, #88]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3308      	adds	r3, #8
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4403      	add	r3, r0
 8000cee:	3308      	adds	r3, #8
 8000cf0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3315      	adds	r3, #21
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d1c7      	bne.n	8000c9c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff1e 	bl	8000b50 <RestartWakeupCounter>

  return ;
 8000d14:	bf00      	nop
}
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40002800 	.word	0x40002800
 8000d20:	20000194 	.word	0x20000194
 8000d24:	20000148 	.word	0x20000148
 8000d28:	200000b8 	.word	0x200000b8
 8000d2c:	20000150 	.word	0x20000150
 8000d30:	20000156 	.word	0x20000156

08000d34 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8000d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8000d40:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d48:	4b59      	ldr	r3, [pc, #356]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	22ca      	movs	r2, #202	@ 0xca
 8000d4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d50:	4b57      	ldr	r3, [pc, #348]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2253      	movs	r2, #83	@ 0x53
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d58:	4b55      	ldr	r3, [pc, #340]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	4b54      	ldr	r3, [pc, #336]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d66:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d68:	4b52      	ldr	r3, [pc, #328]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d74:	4950      	ldr	r1, [pc, #320]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	330c      	adds	r3, #12
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d16e      	bne.n	8000e68 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d8e:	494a      	ldr	r1, [pc, #296]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000da2:	4945      	ldr	r1, [pc, #276]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3310      	adds	r3, #16
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000db4:	4b41      	ldr	r3, [pc, #260]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d04c      	beq.n	8000e58 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000dbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dc2:	493d      	ldr	r1, [pc, #244]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	330d      	adds	r3, #13
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d124      	bne.n	8000e22 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdf2 	bl	80009c8 <UnlinkTimer>
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	f383 8810 	msr	PRIMASK, r3
}
 8000dee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000df0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000df4:	4930      	ldr	r1, [pc, #192]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	3304      	adds	r3, #4
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fa32 	bl	8001274 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	22ca      	movs	r2, #202	@ 0xca
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e18:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2253      	movs	r2, #83	@ 0x53
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e20:	e012      	b.n	8000e48 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f383 8810 	msr	PRIMASK, r3
}
 8000e2c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f99a 	bl	800116c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	22ca      	movs	r2, #202	@ 0xca
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2253      	movs	r2, #83	@ 0x53
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	69b8      	ldr	r0, [r7, #24]
 8000e52:	f000 fa95 	bl	8001380 <HW_TS_RTC_Int_AppNot>
 8000e56:	e022      	b.n	8000e9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e58:	f7ff fed2 	bl	8000c00 <RescheduleTimerList>
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f383 8810 	msr	PRIMASK, r3
}
 8000e66:	e01a      	b.n	8000e9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e68:	bf00      	nop
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f8      	beq.n	8000e6a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f383 8810 	msr	PRIMASK, r3
}
 8000e9c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	22ff      	movs	r2, #255	@ 0xff
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000194 	.word	0x20000194
 8000eb4:	20000148 	.word	0x20000148
 8000eb8:	200000b8 	.word	0x200000b8
 8000ebc:	20000150 	.word	0x20000150
 8000ec0:	58000800 	.word	0x58000800

08000ec4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800104c <HW_TS_Init+0x188>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	22ca      	movs	r2, #202	@ 0xca
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800104c <HW_TS_Init+0x188>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2253      	movs	r2, #83	@ 0x53
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8001050 <HW_TS_Init+0x18c>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a5a      	ldr	r2, [pc, #360]	@ (8001050 <HW_TS_Init+0x18c>)
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000eec:	4b58      	ldr	r3, [pc, #352]	@ (8001050 <HW_TS_Init+0x18c>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f1c3 0304 	rsb	r3, r3, #4
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b55      	ldr	r3, [pc, #340]	@ (8001054 <HW_TS_Init+0x190>)
 8000f00:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <HW_TS_Init+0x18c>)
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000f0a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000f0e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	fa92 f2a2 	rbit	r2, r2
 8000f16:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d101      	bne.n	8000f26 <HW_TS_Init+0x62>
  {
    return 32U;
 8000f22:	2220      	movs	r2, #32
 8000f24:	e003      	b.n	8000f2e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	fab2 f282 	clz	r2, r2
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	40d3      	lsrs	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b48      	ldr	r3, [pc, #288]	@ (8001058 <HW_TS_Init+0x194>)
 8000f38:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f3a:	4b45      	ldr	r3, [pc, #276]	@ (8001050 <HW_TS_Init+0x18c>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b44      	ldr	r3, [pc, #272]	@ (800105c <HW_TS_Init+0x198>)
 8000f4c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f4e:	4b43      	ldr	r3, [pc, #268]	@ (800105c <HW_TS_Init+0x198>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a40      	ldr	r2, [pc, #256]	@ (8001058 <HW_TS_Init+0x194>)
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f60:	4a3c      	ldr	r2, [pc, #240]	@ (8001054 <HW_TS_Init+0x190>)
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	40d3      	lsrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d904      	bls.n	8000f7c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <HW_TS_Init+0x19c>)
 8000f74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f78:	801a      	strh	r2, [r3, #0]
 8000f7a:	e003      	b.n	8000f84 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <HW_TS_Init+0x19c>)
 8000f82:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f84:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f88:	f7ff fb9c 	bl	80006c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f90:	f7ff fb84 	bl	800069c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d13d      	bne.n	8001016 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <HW_TS_Init+0x1a0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fa0:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <HW_TS_Init+0x1a4>)
 8000fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	77fb      	strb	r3, [r7, #31]
 8000fac:	e00c      	b.n	8000fc8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fae:	7ffa      	ldrb	r2, [r7, #31]
 8000fb0:	492e      	ldr	r1, [pc, #184]	@ (800106c <HW_TS_Init+0x1a8>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	77fb      	strb	r3, [r7, #31]
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d9ef      	bls.n	8000fae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <HW_TS_Init+0x1ac>)
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <HW_TS_Init+0x188>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HW_TS_Init+0x188>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fe2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HW_TS_Init+0x188>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HW_TS_Init+0x188>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ff4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <HW_TS_Init+0x1b0>)
 8000ff8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ffc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ffe:	2003      	movs	r0, #3
 8001000:	f001 fa95 	bl	800252e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HW_TS_Init+0x188>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HW_TS_Init+0x188>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	e009      	b.n	800102a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HW_TS_Init+0x188>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001024:	2003      	movs	r0, #3
 8001026:	f001 fa74 	bl	8002512 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HW_TS_Init+0x188>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	22ff      	movs	r2, #255	@ 0xff
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001032:	2200      	movs	r2, #0
 8001034:	2103      	movs	r1, #3
 8001036:	2003      	movs	r0, #3
 8001038:	f001 fa29 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800103c:	2003      	movs	r0, #3
 800103e:	f001 fa40 	bl	80024c2 <HAL_NVIC_EnableIRQ>

  return;
 8001042:	bf00      	nop
}
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000194 	.word	0x20000194
 8001050:	40002800 	.word	0x40002800
 8001054:	20000151 	.word	0x20000151
 8001058:	20000152 	.word	0x20000152
 800105c:	20000154 	.word	0x20000154
 8001060:	20000156 	.word	0x20000156
 8001064:	20000150 	.word	0x20000150
 8001068:	2000014c 	.word	0x2000014c
 800106c:	200000b8 	.word	0x200000b8
 8001070:	20000148 	.word	0x20000148
 8001074:	58000800 	.word	0x58000800

08001078 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	@ 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108e:	f3ef 8310 	mrs	r3, PRIMASK
 8001092:	61fb      	str	r3, [r7, #28]
  return(result);
 8001094:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800109c:	e004      	b.n	80010a8 <HW_TS_Create+0x30>
  {
    loop++;
 800109e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d80c      	bhi.n	80010ca <HW_TS_Create+0x52>
 80010b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010b4:	492c      	ldr	r1, [pc, #176]	@ (8001168 <HW_TS_Create+0xf0>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	330c      	adds	r3, #12
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e9      	bne.n	800109e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d038      	beq.n	8001144 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010d6:	4924      	ldr	r1, [pc, #144]	@ (8001168 <HW_TS_Create+0xf0>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	330c      	adds	r3, #12
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f383 8810 	msr	PRIMASK, r3
}
 80010f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010f8:	491b      	ldr	r1, [pc, #108]	@ (8001168 <HW_TS_Create+0xf0>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	3310      	adds	r3, #16
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800110a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800110e:	4916      	ldr	r1, [pc, #88]	@ (8001168 <HW_TS_Create+0xf0>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	330d      	adds	r3, #13
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001120:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001124:	4910      	ldr	r1, [pc, #64]	@ (8001168 <HW_TS_Create+0xf0>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800113a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001142:	e008      	b.n	8001156 <HW_TS_Create+0xde>
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f383 8810 	msr	PRIMASK, r3
}
 800114e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800115a:	4618      	mov	r0, r3
 800115c:	372c      	adds	r7, #44	@ 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200000b8 	.word	0x200000b8

0800116c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001176:	f3ef 8310 	mrs	r3, PRIMASK
 800117a:	60fb      	str	r3, [r7, #12]
  return(result);
 800117c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800117e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001184:	2003      	movs	r0, #3
 8001186:	f001 f9aa 	bl	80024de <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800118a:	4b34      	ldr	r3, [pc, #208]	@ (800125c <HW_TS_Stop+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	22ca      	movs	r2, #202	@ 0xca
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <HW_TS_Stop+0xf0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2253      	movs	r2, #83	@ 0x53
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4930      	ldr	r1, [pc, #192]	@ (8001260 <HW_TS_Stop+0xf4>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	330c      	adds	r3, #12
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d142      	bne.n	8001238 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc06 	bl	80009c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HW_TS_Stop+0xf8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011c2:	7cfb      	ldrb	r3, [r7, #19]
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d12f      	bne.n	8001228 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <HW_TS_Stop+0xfc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d4:	d107      	bne.n	80011e6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80011d6:	bf00      	nop
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HW_TS_Stop+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f8      	bne.n	80011d8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HW_TS_Stop+0xf0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <HW_TS_Stop+0xf0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011f4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011f6:	bf00      	nop
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <HW_TS_Stop+0xf0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f8      	beq.n	80011f8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HW_TS_Stop+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HW_TS_Stop+0xf0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001216:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HW_TS_Stop+0x100>)
 800121a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800121e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001220:	2003      	movs	r0, #3
 8001222:	f001 f984 	bl	800252e <HAL_NVIC_ClearPendingIRQ>
 8001226:	e007      	b.n	8001238 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HW_TS_Stop+0x104>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	7cfa      	ldrb	r2, [r7, #19]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001234:	f7ff fce4 	bl	8000c00 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HW_TS_Stop+0xf0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	22ff      	movs	r2, #255	@ 0xff
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001240:	2003      	movs	r0, #3
 8001242:	f001 f93e 	bl	80024c2 <HAL_NVIC_EnableIRQ>
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f383 8810 	msr	PRIMASK, r3
}
 8001250:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001252:	bf00      	nop
}
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000194 	.word	0x20000194
 8001260:	200000b8 	.word	0x200000b8
 8001264:	20000148 	.word	0x20000148
 8001268:	40002800 	.word	0x40002800
 800126c:	58000800 	.word	0x58000800
 8001270:	20000149 	.word	0x20000149

08001274 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	493b      	ldr	r1, [pc, #236]	@ (8001370 <HW_TS_Start+0xfc>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	330c      	adds	r3, #12
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d103      	bne.n	80012a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff66 	bl	800116c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012a0:	f3ef 8310 	mrs	r3, PRIMASK
 80012a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80012a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012aa:	b672      	cpsid	i
}
 80012ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ae:	2003      	movs	r0, #3
 80012b0:	f001 f915 	bl	80024de <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HW_TS_Start+0x100>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	22ca      	movs	r2, #202	@ 0xca
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80012bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <HW_TS_Start+0x100>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2253      	movs	r2, #83	@ 0x53
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	492a      	ldr	r1, [pc, #168]	@ (8001370 <HW_TS_Start+0xfc>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	330c      	adds	r3, #12
 80012d4:	2202      	movs	r2, #2
 80012d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	4925      	ldr	r1, [pc, #148]	@ (8001370 <HW_TS_Start+0xfc>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3308      	adds	r3, #8
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	4920      	ldr	r1, [pc, #128]	@ (8001370 <HW_TS_Start+0xfc>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	3304      	adds	r3, #4
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fab6 	bl	8000874 <linkTimer>
 8001308:	4603      	mov	r3, r0
 800130a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <HW_TS_Start+0x104>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HW_TS_Start+0x108>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	7c7a      	ldrb	r2, [r7, #17]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800131e:	f7ff fc6f 	bl	8000c00 <RescheduleTimerList>
 8001322:	e013      	b.n	800134c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4912      	ldr	r1, [pc, #72]	@ (8001370 <HW_TS_Start+0xfc>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3308      	adds	r3, #8
 8001334:	6819      	ldr	r1, [r3, #0]
 8001336:	8a7b      	ldrh	r3, [r7, #18]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	1ac9      	subs	r1, r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <HW_TS_Start+0xfc>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4403      	add	r3, r0
 8001348:	3308      	adds	r3, #8
 800134a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HW_TS_Start+0x100>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	22ff      	movs	r2, #255	@ 0xff
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001354:	2003      	movs	r0, #3
 8001356:	f001 f8b4 	bl	80024c2 <HAL_NVIC_EnableIRQ>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f383 8810 	msr	PRIMASK, r3
}
 8001364:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001366:	bf00      	nop
}
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000b8 	.word	0x200000b8
 8001374:	20000194 	.word	0x20000194
 8001378:	20000148 	.word	0x20000148
 800137c:	20000149 	.word	0x20000149

08001380 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	460b      	mov	r3, r1
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4798      	blx	r3

  return;
 8001392:	bf00      	nop
}
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <LL_PWR_EnableBootC2>:
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <LL_PWR_EnableBootC2+0x1c>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <LL_PWR_EnableBootC2+0x1c>)
 80013a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	58000400 	.word	0x58000400

080013bc <LL_C2_EXTI_EnableIT_32_63>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80013c6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80013ca:	4905      	ldr	r1, [pc, #20]	@ (80013e0 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	f8c1 30d0 	str.w	r3, [r1, #208]	@ 0xd0
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	58000800 	.word	0x58000800

080013e4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80013ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80013f2:	4905      	ldr	r1, [pc, #20]	@ (8001408 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58000800 	.word	0x58000800

0800140c <LL_RCC_LSE_SetDriveCapability>:
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141c:	f023 0218 	bic.w	r2, r3, #24
 8001420:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4313      	orrs	r3, r2
 8001428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001444:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001446:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4313      	orrs	r3, r2
 800144e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001454:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145c:	68fb      	ldr	r3, [r7, #12]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001476:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800147a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800148a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001494:	68fb      	ldr	r3, [r7, #12]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f000 fe14 	bl	80020d4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80014ac:	f7fe ff62 	bl	8000374 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 fb12 	bl	8001ad8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014b4:	f000 fb5c 	bl	8001b70 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80014b8:	f000 fb7a 	bl	8001bb0 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80014bc:	4bb6      	ldr	r3, [pc, #728]	@ (8001798 <main+0x2f4>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d013      	beq.n	80014f2 <main+0x4e>
   {
     __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);    // clear Standby flag
 80014ca:	4bb3      	ldr	r3, [pc, #716]	@ (8001798 <main+0x2f4>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
     // 1) Turn on the IPCC clock for the mailbox interface
     LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80014d2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80014d6:	f7ff ffc8 	bl	800146a <LL_C2_AHB3_GRP1_EnableClock>

     // 2) Unmask the wake-event line for CPU2 (IPCC_RX)
     LL_C2_EXTI_EnableEvent_32_63(LL_EXTI_LINE_41);
 80014da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014de:	f7ff ff81 	bl	80013e4 <LL_C2_EXTI_EnableEvent_32_63>
     LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_41);
 80014e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014e6:	f7ff ff69 	bl	80013bc <LL_C2_EXTI_EnableIT_32_63>

     // 3) Fire the event so CM0+ actually wakes from its STOP
     __SEV();
 80014ea:	bf40      	sev
     __WFE();
 80014ec:	bf20      	wfe

     // 4) Finally allow CPU2 to boot
     LL_PWR_EnableBootC2();
 80014ee:	f7ff ff55 	bl	800139c <LL_PWR_EnableBootC2>
     // optionally skip some one-time inits here
   }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 fbe7 	bl	8001cc4 <MX_GPIO_Init>
  MX_RTC_Init();
 80014f6:	f000 fb77 	bl	8001be8 <MX_RTC_Init>
  MX_SPI1_Init();
 80014fa:	f000 fba5 	bl	8001c48 <MX_SPI1_Init>
  MX_RF_Init();
 80014fe:	f000 fb6b 	bl	8001bd8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001502:	2064      	movs	r0, #100	@ 0x64
 8001504:	f7ff f873 	bl	80005ee <HAL_Delay>
	TX_BUFFER[0] = reset_cmd;
 8001508:	4ba4      	ldr	r3, [pc, #656]	@ (800179c <main+0x2f8>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4ba4      	ldr	r3, [pc, #656]	@ (80017a0 <main+0x2fc>)
 800150e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2110      	movs	r1, #16
 8001514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001518:	f001 f980 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 1000);
 800151c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001520:	2201      	movs	r2, #1
 8001522:	499f      	ldr	r1, [pc, #636]	@ (80017a0 <main+0x2fc>)
 8001524:	489f      	ldr	r0, [pc, #636]	@ (80017a4 <main+0x300>)
 8001526:	f003 f847 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2110      	movs	r1, #16
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f001 f973 	bl	800281c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001536:	2064      	movs	r0, #100	@ 0x64
 8001538:	f7ff f859 	bl	80005ee <HAL_Delay>

	TX_BUFFER[0] = read_c1_cmd;
 800153c:	4b9a      	ldr	r3, [pc, #616]	@ (80017a8 <main+0x304>)
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	4b97      	ldr	r3, [pc, #604]	@ (80017a0 <main+0x2fc>)
 8001542:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2110      	movs	r1, #16
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f001 f966 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001550:	2364      	movs	r3, #100	@ 0x64
 8001552:	2201      	movs	r2, #1
 8001554:	4992      	ldr	r1, [pc, #584]	@ (80017a0 <main+0x2fc>)
 8001556:	4893      	ldr	r0, [pc, #588]	@ (80017a4 <main+0x300>)
 8001558:	f003 f82e 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 800155c:	2364      	movs	r3, #100	@ 0x64
 800155e:	2202      	movs	r2, #2
 8001560:	4992      	ldr	r1, [pc, #584]	@ (80017ac <main+0x308>)
 8001562:	4890      	ldr	r0, [pc, #576]	@ (80017a4 <main+0x300>)
 8001564:	f003 f99e 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2110      	movs	r1, #16
 800156c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001570:	f001 f954 	bl	800281c <HAL_GPIO_WritePin>
	C1 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001574:	4b8d      	ldr	r3, [pc, #564]	@ (80017ac <main+0x308>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b8b      	ldr	r3, [pc, #556]	@ (80017ac <main+0x308>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21b      	sxth	r3, r3
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b89      	ldr	r3, [pc, #548]	@ (80017b0 <main+0x30c>)
 800158c:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c2_cmd;
 800158e:	4b89      	ldr	r3, [pc, #548]	@ (80017b4 <main+0x310>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	4b83      	ldr	r3, [pc, #524]	@ (80017a0 <main+0x2fc>)
 8001594:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2110      	movs	r1, #16
 800159a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159e:	f001 f93d 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80015a2:	2364      	movs	r3, #100	@ 0x64
 80015a4:	2201      	movs	r2, #1
 80015a6:	497e      	ldr	r1, [pc, #504]	@ (80017a0 <main+0x2fc>)
 80015a8:	487e      	ldr	r0, [pc, #504]	@ (80017a4 <main+0x300>)
 80015aa:	f003 f805 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80015ae:	2364      	movs	r3, #100	@ 0x64
 80015b0:	2202      	movs	r2, #2
 80015b2:	497e      	ldr	r1, [pc, #504]	@ (80017ac <main+0x308>)
 80015b4:	487b      	ldr	r0, [pc, #492]	@ (80017a4 <main+0x300>)
 80015b6:	f003 f975 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c2:	f001 f92b 	bl	800281c <HAL_GPIO_WritePin>
	C2 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80015c6:	4b79      	ldr	r3, [pc, #484]	@ (80017ac <main+0x308>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b76      	ldr	r3, [pc, #472]	@ (80017ac <main+0x308>)
 80015d2:	785b      	ldrb	r3, [r3, #1]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b76      	ldr	r3, [pc, #472]	@ (80017b8 <main+0x314>)
 80015de:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c3_cmd;
 80015e0:	4b76      	ldr	r3, [pc, #472]	@ (80017bc <main+0x318>)
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	4b6e      	ldr	r3, [pc, #440]	@ (80017a0 <main+0x2fc>)
 80015e6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f001 f914 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80015f4:	2364      	movs	r3, #100	@ 0x64
 80015f6:	2201      	movs	r2, #1
 80015f8:	4969      	ldr	r1, [pc, #420]	@ (80017a0 <main+0x2fc>)
 80015fa:	486a      	ldr	r0, [pc, #424]	@ (80017a4 <main+0x300>)
 80015fc:	f002 ffdc 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001600:	2364      	movs	r3, #100	@ 0x64
 8001602:	2202      	movs	r2, #2
 8001604:	4969      	ldr	r1, [pc, #420]	@ (80017ac <main+0x308>)
 8001606:	4867      	ldr	r0, [pc, #412]	@ (80017a4 <main+0x300>)
 8001608:	f003 f94c 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f001 f902 	bl	800281c <HAL_GPIO_WritePin>
	C3 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001618:	4b64      	ldr	r3, [pc, #400]	@ (80017ac <main+0x308>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	4b62      	ldr	r3, [pc, #392]	@ (80017ac <main+0x308>)
 8001624:	785b      	ldrb	r3, [r3, #1]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b64      	ldr	r3, [pc, #400]	@ (80017c0 <main+0x31c>)
 8001630:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c4_cmd;
 8001632:	4b64      	ldr	r3, [pc, #400]	@ (80017c4 <main+0x320>)
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	4b5a      	ldr	r3, [pc, #360]	@ (80017a0 <main+0x2fc>)
 8001638:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2110      	movs	r1, #16
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f001 f8eb 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001646:	2364      	movs	r3, #100	@ 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	4955      	ldr	r1, [pc, #340]	@ (80017a0 <main+0x2fc>)
 800164c:	4855      	ldr	r0, [pc, #340]	@ (80017a4 <main+0x300>)
 800164e:	f002 ffb3 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001652:	2364      	movs	r3, #100	@ 0x64
 8001654:	2202      	movs	r2, #2
 8001656:	4955      	ldr	r1, [pc, #340]	@ (80017ac <main+0x308>)
 8001658:	4852      	ldr	r0, [pc, #328]	@ (80017a4 <main+0x300>)
 800165a:	f003 f923 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001666:	f001 f8d9 	bl	800281c <HAL_GPIO_WritePin>
	C4 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <main+0x308>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b21b      	sxth	r3, r3
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <main+0x308>)
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21b      	sxth	r3, r3
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b51      	ldr	r3, [pc, #324]	@ (80017c8 <main+0x324>)
 8001682:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c5_cmd;
 8001684:	4b51      	ldr	r3, [pc, #324]	@ (80017cc <main+0x328>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b45      	ldr	r3, [pc, #276]	@ (80017a0 <main+0x2fc>)
 800168a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2110      	movs	r1, #16
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f001 f8c2 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001698:	2364      	movs	r3, #100	@ 0x64
 800169a:	2201      	movs	r2, #1
 800169c:	4940      	ldr	r1, [pc, #256]	@ (80017a0 <main+0x2fc>)
 800169e:	4841      	ldr	r0, [pc, #260]	@ (80017a4 <main+0x300>)
 80016a0:	f002 ff8a 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80016a4:	2364      	movs	r3, #100	@ 0x64
 80016a6:	2202      	movs	r2, #2
 80016a8:	4940      	ldr	r1, [pc, #256]	@ (80017ac <main+0x308>)
 80016aa:	483e      	ldr	r0, [pc, #248]	@ (80017a4 <main+0x300>)
 80016ac:	f003 f8fa 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2110      	movs	r1, #16
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b8:	f001 f8b0 	bl	800281c <HAL_GPIO_WritePin>
	C5 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80016bc:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <main+0x308>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <main+0x308>)
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <main+0x32c>)
 80016d4:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c6_cmd;
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <main+0x330>)
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <main+0x2fc>)
 80016dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2110      	movs	r1, #16
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e6:	f001 f899 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80016ea:	2364      	movs	r3, #100	@ 0x64
 80016ec:	2201      	movs	r2, #1
 80016ee:	492c      	ldr	r1, [pc, #176]	@ (80017a0 <main+0x2fc>)
 80016f0:	482c      	ldr	r0, [pc, #176]	@ (80017a4 <main+0x300>)
 80016f2:	f002 ff61 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80016f6:	2364      	movs	r3, #100	@ 0x64
 80016f8:	2202      	movs	r2, #2
 80016fa:	492c      	ldr	r1, [pc, #176]	@ (80017ac <main+0x308>)
 80016fc:	4829      	ldr	r0, [pc, #164]	@ (80017a4 <main+0x300>)
 80016fe:	f003 f8d1 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2110      	movs	r1, #16
 8001706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170a:	f001 f887 	bl	800281c <HAL_GPIO_WritePin>
	C6 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800170e:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <main+0x308>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b21b      	sxth	r3, r3
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <main+0x308>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21b      	sxth	r3, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <main+0x334>)
 8001726:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c7_cmd;
 8001728:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <main+0x338>)
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <main+0x2fc>)
 800172e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2110      	movs	r1, #16
 8001734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001738:	f001 f870 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800173c:	2364      	movs	r3, #100	@ 0x64
 800173e:	2201      	movs	r2, #1
 8001740:	4917      	ldr	r1, [pc, #92]	@ (80017a0 <main+0x2fc>)
 8001742:	4818      	ldr	r0, [pc, #96]	@ (80017a4 <main+0x300>)
 8001744:	f002 ff38 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001748:	2364      	movs	r3, #100	@ 0x64
 800174a:	2202      	movs	r2, #2
 800174c:	4917      	ldr	r1, [pc, #92]	@ (80017ac <main+0x308>)
 800174e:	4815      	ldr	r0, [pc, #84]	@ (80017a4 <main+0x300>)
 8001750:	f003 f8a8 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2110      	movs	r1, #16
 8001758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800175c:	f001 f85e 	bl	800281c <HAL_GPIO_WritePin>
	C7 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <main+0x308>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b21b      	sxth	r3, r3
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <main+0x308>)
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <main+0x33c>)
 8001778:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c8_cmd;
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <main+0x340>)
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <main+0x2fc>)
 8001780:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2110      	movs	r1, #16
 8001786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178a:	f001 f847 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800178e:	2364      	movs	r3, #100	@ 0x64
 8001790:	2201      	movs	r2, #1
 8001792:	4903      	ldr	r1, [pc, #12]	@ (80017a0 <main+0x2fc>)
 8001794:	e028      	b.n	80017e8 <main+0x344>
 8001796:	bf00      	nop
 8001798:	58000400 	.word	0x58000400
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000248 	.word	0x20000248
 80017a4:	200001b8 	.word	0x200001b8
 80017a8:	20000009 	.word	0x20000009
 80017ac:	2000024c 	.word	0x2000024c
 80017b0:	2000021c 	.word	0x2000021c
 80017b4:	2000000a 	.word	0x2000000a
 80017b8:	2000021e 	.word	0x2000021e
 80017bc:	2000000b 	.word	0x2000000b
 80017c0:	20000220 	.word	0x20000220
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000222 	.word	0x20000222
 80017cc:	2000000d 	.word	0x2000000d
 80017d0:	20000224 	.word	0x20000224
 80017d4:	2000000e 	.word	0x2000000e
 80017d8:	20000226 	.word	0x20000226
 80017dc:	2000000f 	.word	0x2000000f
 80017e0:	20000228 	.word	0x20000228
 80017e4:	20000010 	.word	0x20000010
 80017e8:	48a1      	ldr	r0, [pc, #644]	@ (8001a70 <main+0x5cc>)
 80017ea:	f002 fee5 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80017ee:	2364      	movs	r3, #100	@ 0x64
 80017f0:	2202      	movs	r2, #2
 80017f2:	49a0      	ldr	r1, [pc, #640]	@ (8001a74 <main+0x5d0>)
 80017f4:	489e      	ldr	r0, [pc, #632]	@ (8001a70 <main+0x5cc>)
 80017f6:	f003 f855 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2110      	movs	r1, #16
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f001 f80b 	bl	800281c <HAL_GPIO_WritePin>
	C8 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001806:	4b9b      	ldr	r3, [pc, #620]	@ (8001a74 <main+0x5d0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b21b      	sxth	r3, r3
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b21a      	sxth	r2, r3
 8001810:	4b98      	ldr	r3, [pc, #608]	@ (8001a74 <main+0x5d0>)
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21b      	sxth	r3, r3
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b96      	ldr	r3, [pc, #600]	@ (8001a78 <main+0x5d4>)
 800181e:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c9_cmd;
 8001820:	4b96      	ldr	r3, [pc, #600]	@ (8001a7c <main+0x5d8>)
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b96      	ldr	r3, [pc, #600]	@ (8001a80 <main+0x5dc>)
 8001826:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2110      	movs	r1, #16
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f000 fff4 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001834:	2364      	movs	r3, #100	@ 0x64
 8001836:	2201      	movs	r2, #1
 8001838:	4991      	ldr	r1, [pc, #580]	@ (8001a80 <main+0x5dc>)
 800183a:	488d      	ldr	r0, [pc, #564]	@ (8001a70 <main+0x5cc>)
 800183c:	f002 febc 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	2202      	movs	r2, #2
 8001844:	498b      	ldr	r1, [pc, #556]	@ (8001a74 <main+0x5d0>)
 8001846:	488a      	ldr	r0, [pc, #552]	@ (8001a70 <main+0x5cc>)
 8001848:	f003 f82c 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2110      	movs	r1, #16
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f000 ffe2 	bl	800281c <HAL_GPIO_WritePin>
	C9 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001858:	4b86      	ldr	r3, [pc, #536]	@ (8001a74 <main+0x5d0>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b21b      	sxth	r3, r3
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b84      	ldr	r3, [pc, #528]	@ (8001a74 <main+0x5d0>)
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <main+0x5e0>)
 8001870:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c10_cmd;
 8001872:	4b85      	ldr	r3, [pc, #532]	@ (8001a88 <main+0x5e4>)
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <main+0x5dc>)
 8001878:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2110      	movs	r1, #16
 800187e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001882:	f000 ffcb 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001886:	2364      	movs	r3, #100	@ 0x64
 8001888:	2201      	movs	r2, #1
 800188a:	497d      	ldr	r1, [pc, #500]	@ (8001a80 <main+0x5dc>)
 800188c:	4878      	ldr	r0, [pc, #480]	@ (8001a70 <main+0x5cc>)
 800188e:	f002 fe93 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001892:	2364      	movs	r3, #100	@ 0x64
 8001894:	2202      	movs	r2, #2
 8001896:	4977      	ldr	r1, [pc, #476]	@ (8001a74 <main+0x5d0>)
 8001898:	4875      	ldr	r0, [pc, #468]	@ (8001a70 <main+0x5cc>)
 800189a:	f003 f803 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2110      	movs	r1, #16
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a6:	f000 ffb9 	bl	800281c <HAL_GPIO_WritePin>
	C10 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80018aa:	4b72      	ldr	r3, [pc, #456]	@ (8001a74 <main+0x5d0>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <main+0x5d0>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b21b      	sxth	r3, r3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <main+0x5e8>)
 80018c2:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = start_conversion_cmd;
 80018c4:	4b72      	ldr	r3, [pc, #456]	@ (8001a90 <main+0x5ec>)
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001a80 <main+0x5dc>)
 80018ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2110      	movs	r1, #16
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d4:	f000 ffa2 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80018d8:	2364      	movs	r3, #100	@ 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	4968      	ldr	r1, [pc, #416]	@ (8001a80 <main+0x5dc>)
 80018de:	4864      	ldr	r0, [pc, #400]	@ (8001a70 <main+0x5cc>)
 80018e0:	f002 fe6a 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2110      	movs	r1, #16
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f000 ff96 	bl	800281c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80018f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018f4:	f7fe fe7b 	bl	80005ee <HAL_Delay>

	TX_BUFFER[0] = read_adc_cmd;
 80018f8:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <main+0x5f0>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	4b60      	ldr	r3, [pc, #384]	@ (8001a80 <main+0x5dc>)
 80018fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2110      	movs	r1, #16
 8001904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001908:	f000 ff88 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800190c:	2364      	movs	r3, #100	@ 0x64
 800190e:	2201      	movs	r2, #1
 8001910:	495b      	ldr	r1, [pc, #364]	@ (8001a80 <main+0x5dc>)
 8001912:	4857      	ldr	r0, [pc, #348]	@ (8001a70 <main+0x5cc>)
 8001914:	f002 fe50 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, 100);
 8001918:	2364      	movs	r3, #100	@ 0x64
 800191a:	2206      	movs	r2, #6
 800191c:	4955      	ldr	r1, [pc, #340]	@ (8001a74 <main+0x5d0>)
 800191e:	4854      	ldr	r0, [pc, #336]	@ (8001a70 <main+0x5cc>)
 8001920:	f002 ffc0 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2110      	movs	r1, #16
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f000 ff76 	bl	800281c <HAL_GPIO_WritePin>
	raw_temp = (RX_BUFFER[0] << 16) | (RX_BUFFER[1] << 8) | (RX_BUFFER[2]);
 8001930:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <main+0x5d0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	4b4f      	ldr	r3, [pc, #316]	@ (8001a74 <main+0x5d0>)
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	4313      	orrs	r3, r2
 800193e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a74 <main+0x5d0>)
 8001940:	7892      	ldrb	r2, [r2, #2]
 8001942:	4313      	orrs	r3, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4b54      	ldr	r3, [pc, #336]	@ (8001a98 <main+0x5f4>)
 8001948:	601a      	str	r2, [r3, #0]
	raw_pressure = (RX_BUFFER[3] << 16) | (RX_BUFFER[4] << 8) | (RX_BUFFER[5]);
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <main+0x5d0>)
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	4b48      	ldr	r3, [pc, #288]	@ (8001a74 <main+0x5d0>)
 8001952:	791b      	ldrb	r3, [r3, #4]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	4313      	orrs	r3, r2
 8001958:	4a46      	ldr	r2, [pc, #280]	@ (8001a74 <main+0x5d0>)
 800195a:	7952      	ldrb	r2, [r2, #5]
 800195c:	4313      	orrs	r3, r2
 800195e:	461a      	mov	r2, r3
 8001960:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <main+0x5f8>)
 8001962:	601a      	str	r2, [r3, #0]
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 8001964:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa0 <main+0x5fc>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001970:	4b49      	ldr	r3, [pc, #292]	@ (8001a98 <main+0x5f4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001aa4 <main+0x600>
 8001984:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / (float) 34359738368)
 8001988:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <main+0x604>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001994:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <main+0x5f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a4:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 8001aac <main+0x608>
 80019a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019ac:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / (float) 64));
 80019b0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab0 <main+0x60c>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019bc:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8001ab4 <main+0x610>
 80019c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 80019c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <main+0x614>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	offset = (float) C6 + (float) C7 * temperature / (float) 512;
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <main+0x618>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019da:	4b39      	ldr	r3, [pc, #228]	@ (8001ac0 <main+0x61c>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019e6:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <main+0x614>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019f0:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8001ac4 <main+0x620>
 80019f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <main+0x624>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + (float) C9 * temperature / (float) 512;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <main+0x5d4>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <main+0x5e0>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a1a:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <main+0x614>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a24:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 8001ac4 <main+0x620>
 8001a28:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <main+0x628>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
	pressure = (float) raw_pressure * sensitivity / (float) 4194304 - offset;
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <main+0x5f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <main+0x628>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001ad0 <main+0x62c>
 8001a50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <main+0x624>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <main+0x630>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001a64:	f7fe fc94 	bl	8000390 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001a68:	f7fe fde6 	bl	8000638 <MX_APPE_Process>
 8001a6c:	e7fc      	b.n	8001a68 <main+0x5c4>
 8001a6e:	bf00      	nop
 8001a70:	200001b8 	.word	0x200001b8
 8001a74:	2000024c 	.word	0x2000024c
 8001a78:	2000022a 	.word	0x2000022a
 8001a7c:	20000011 	.word	0x20000011
 8001a80:	20000248 	.word	0x20000248
 8001a84:	2000022c 	.word	0x2000022c
 8001a88:	20000012 	.word	0x20000012
 8001a8c:	2000022e 	.word	0x2000022e
 8001a90:	20000013 	.word	0x20000013
 8001a94:	20000014 	.word	0x20000014
 8001a98:	20000234 	.word	0x20000234
 8001a9c:	20000230 	.word	0x20000230
 8001aa0:	2000021c 	.word	0x2000021c
 8001aa4:	4e000000 	.word	0x4e000000
 8001aa8:	20000220 	.word	0x20000220
 8001aac:	51000000 	.word	0x51000000
 8001ab0:	2000021e 	.word	0x2000021e
 8001ab4:	42800000 	.word	0x42800000
 8001ab8:	20000238 	.word	0x20000238
 8001abc:	20000226 	.word	0x20000226
 8001ac0:	20000228 	.word	0x20000228
 8001ac4:	44000000 	.word	0x44000000
 8001ac8:	2000023c 	.word	0x2000023c
 8001acc:	20000240 	.word	0x20000240
 8001ad0:	4a800000 	.word	0x4a800000
 8001ad4:	20000244 	.word	0x20000244

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b098      	sub	sp, #96	@ 0x60
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	2244      	movs	r2, #68	@ 0x44
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f007 f95e 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001afe:	f000 ff4f 	bl	80029a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001b02:	2010      	movs	r0, #16
 8001b04:	f7ff fc82 	bl	800140c <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b08:	2307      	movs	r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1c:	2340      	movs	r3, #64	@ 0x40
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 faa9 	bl	8003080 <HAL_RCC_OscConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001b34:	f000 f8eb 	bl	8001d0e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b38:	236f      	movs	r3, #111	@ 0x6f
 8001b3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fdc7 	bl	80036ec <HAL_RCC_ClockConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b64:	f000 f8d3 	bl	8001d0e <Error_Handler>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3760      	adds	r7, #96	@ 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	@ 0x30
 8001b74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2230      	movs	r2, #48	@ 0x30
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f007 f913 	bl	8008da8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001b82:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b86:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001b88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b92:	2310      	movs	r3, #16
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f93d 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001ba4:	f000 f8b3 	bl	8001d0e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	@ 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_IPCC_Init+0x20>)
 8001bb6:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <MX_IPCC_Init+0x24>)
 8001bb8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_IPCC_Init+0x20>)
 8001bbc:	f000 fe6a 	bl	8002894 <HAL_IPCC_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001bc6:	f000 f8a2 	bl	8001d0e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000158 	.word	0x20000158
 8001bd4:	58000c00 	.word	0x58000c00

08001bd8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <MX_RTC_Init+0x5c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001c00:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001c04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c18:	4809      	ldr	r0, [pc, #36]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001c1a:	f002 f9f3 	bl	8004004 <HAL_RTC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001c24:	f000 f873 	bl	8001d0e <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <MX_RTC_Init+0x58>)
 8001c2e:	f002 faf5 	bl	800421c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001c38:	f000 f869 	bl	8001d0e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000194 	.word	0x20000194
 8001c44:	40002800 	.word	0x40002800

08001c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <MX_SPI1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_SPI1_Init+0x74>)
 8001ca8:	f002 fbe3 	bl	8004472 <HAL_SPI_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 f82c 	bl	8001d0e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001b8 	.word	0x200001b8
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff fbad 	bl	8001438 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce6:	f000 fd99 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cea:	2310      	movs	r3, #16
 8001cec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d02:	f000 fc23 	bl	800254c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d12:	b672      	cpsid	i
}
 8001d14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <Error_Handler+0x8>

08001d1a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_AHB2_GRP1_EnableClock>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d60:	68fb      	ldr	r3, [r7, #12]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_AHB3_GRP1_EnableClock>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_APB1_GRP1_EnableClock>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_APB2_GRP1_EnableClock>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001de0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001e08:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e0c:	f7ff ffaf 	bl	8001d6e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	202e      	movs	r0, #46	@ 0x2e
 8001e16:	f000 fb3a 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e1a:	202e      	movs	r0, #46	@ 0x2e
 8001e1c:	f000 fb51 	bl	80024c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_IPCC_MspInit+0x44>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d113      	bne.n	8001e5e <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e36:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001e3a:	f7ff ff98 	bl	8001d6e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	202c      	movs	r0, #44	@ 0x2c
 8001e44:	f000 fb23 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e48:	202c      	movs	r0, #44	@ 0x2c
 8001e4a:	f000 fb3a 	bl	80024c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	202d      	movs	r0, #45	@ 0x2d
 8001e54:	f000 fb1b 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e58:	202d      	movs	r0, #45	@ 0x2d
 8001e5a:	f000 fb32 	bl	80024c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	58000c00 	.word	0x58000c00

08001e6c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	@ 0x38
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	2230      	movs	r2, #48	@ 0x30
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f006 ff93 	bl	8008da8 <memset>
  if(hrtc->Instance==RTC)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <HAL_RTC_MspInit+0x64>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 ffbb 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ea8:	f7ff ff31 	bl	8001d0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eac:	f7ff ff35 	bl	8001d1a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001eb0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001eb4:	f7ff ff74 	bl	8001da0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 fae6 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f000 fafd 	bl	80024c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ec8:	bf00      	nop
 8001eca:	3738      	adds	r7, #56	@ 0x38
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40002800 	.word	0x40002800

08001ed4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_SPI_MspInit+0x5c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d117      	bne.n	8001f26 <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001efa:	f7ff ff6a 	bl	8001dd2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff ff1c 	bl	8001d3c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 8001f04:	23e0      	movs	r3, #224	@ 0xe0
 8001f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f14:	2305      	movs	r3, #5
 8001f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f22:	f000 fb13 	bl	800254c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40013000 	.word	0x40013000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <NMI_Handler+0x4>

08001f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8a:	f000 f8fd 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001f96:	f7fe fecd 	bl	8000d34 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001fa2:	f006 fadd 	bl	8008560 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001fae:	f006 fb0d 	bl	80085cc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001fba:	f000 fc47 	bl	800284c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <SystemInit+0x90>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	4a21      	ldr	r2, [pc, #132]	@ (8002054 <SystemInit+0x90>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fec:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001ff0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <SystemInit+0x94>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200e:	f023 0305 	bic.w	r3, r3, #5
 8002012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800201e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202e:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <SystemInit+0x98>)
 8002030:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800203c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002040:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	faf6fefb 	.word	0xfaf6fefb
 800205c:	22041000 	.word	0x22041000

08002060 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002060:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002062:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002064:	3304      	adds	r3, #4

08002066 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002066:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002068:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800206a:	d3f9      	bcc.n	8002060 <CopyDataInit>
  bx lr
 800206c:	4770      	bx	lr

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800206e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002070:	3004      	adds	r0, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002072:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>
  bx lr
 8002076:	4770      	bx	lr

08002078 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800207a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800207c:	f7ff ffa2 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <LoopForever+0x6>)
 8002082:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <LoopForever+0xa>)
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LoopForever+0xe>)
 8002086:	2300      	movs	r3, #0
 8002088:	f7ff ffed 	bl	8002066 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800208c:	480b      	ldr	r0, [pc, #44]	@ (80020bc <LoopForever+0x12>)
 800208e:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <LoopForever+0x16>)
 8002090:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <LoopForever+0x1a>)
 8002092:	2300      	movs	r3, #0
 8002094:	f7ff ffe7 	bl	8002066 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002098:	480b      	ldr	r0, [pc, #44]	@ (80020c8 <LoopForever+0x1e>)
 800209a:	490c      	ldr	r1, [pc, #48]	@ (80020cc <LoopForever+0x22>)
 800209c:	2300      	movs	r3, #0
 800209e:	f7ff ffe8 	bl	8002072 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020a2:	f006 fe89 	bl	8008db8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020a6:	f7ff f9fd 	bl	80014a4 <main>

080020aa <LoopForever>:

LoopForever:
  b LoopForever
 80020aa:	e7fe      	b.n	80020aa <LoopForever>
  ldr   r0, =_estack
 80020ac:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000050 	.word	0x20000050
 80020b8:	080090a0 	.word	0x080090a0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020bc:	200301e4 	.word	0x200301e4
 80020c0:	20030a67 	.word	0x20030a67
 80020c4:	0800912e 	.word	0x0800912e
  INIT_BSS _sbss, _ebss
 80020c8:	2000009c 	.word	0x2000009c
 80020cc:	2000040c 	.word	0x2000040c

080020d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC1_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_Init+0x3c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002110 <HAL_Init+0x3c>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ea:	2003      	movs	r0, #3
 80020ec:	f000 f9c4 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f0:	200f      	movs	r0, #15
 80020f2:	f000 f80f 	bl	8002114 <HAL_InitTick>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	e001      	b.n	8002106 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002102:	f7ff fe7f 	bl	8001e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002106:	79fb      	ldrb	r3, [r7, #7]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	58004000 	.word	0x58004000

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <HAL_InitTick+0x6c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d024      	beq.n	8002172 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002128:	f001 fc8c 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <HAL_InitTick+0x6c>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002138:	fbb3 f3f1 	udiv	r3, r3, r1
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f9da 	bl	80024fa <HAL_SYSTICK_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	d809      	bhi.n	8002166 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002152:	2200      	movs	r2, #0
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	f04f 30ff 	mov.w	r0, #4294967295
 800215a:	f000 f998 	bl	800248e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_InitTick+0x70>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e007      	b.n	8002176 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e004      	b.n	8002176 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000028 	.word	0x20000028
 8002184:	20000024 	.word	0x20000024

08002188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000028 	.word	0x20000028
 80021ac:	20000254 	.word	0x20000254

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000254 	.word	0x20000254

080021c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_GetTickPrio+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000024 	.word	0x20000024

080021e0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_GetTickFreq+0x14>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000028 	.word	0x20000028

080021f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_SuspendTick+0x1c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_SuspendTick+0x1c>)
 8002202:	f023 0302 	bic.w	r3, r3, #2
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	@ (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db12      	blt.n	80022f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	490a      	ldr	r1, [pc, #40]	@ (80022fc <__NVIC_DisableIRQ+0x44>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	3320      	adds	r3, #32
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80022e4:	f3bf 8f4f 	dsb	sy
}
 80022e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022ea:	f3bf 8f6f 	isb	sy
}
 80022ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0c      	blt.n	800232c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	@ (8002338 <__NVIC_SetPendingIRQ+0x38>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	3340      	adds	r3, #64	@ 0x40
 8002328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0c      	blt.n	8002368 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	@ (8002374 <__NVIC_ClearPendingIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	3360      	adds	r3, #96	@ 0x60
 8002364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	@ (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	@ 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fec9 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff fee0 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff90 	bl	80023cc <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5f 	bl	8002378 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fed3 	bl	800227c <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fee3 	bl	80022b8 <__NVIC_DisableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff96 	bl	8002434 <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff feed 	bl	8002300 <__NVIC_SetPendingIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fefd 	bl	800233c <__NVIC_ClearPendingIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e146      	b.n	80027ea <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8138 	beq.w	80027e4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d005      	beq.n	800258c <HAL_GPIO_Init+0x40>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d130      	bne.n	80025ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c2:	2201      	movs	r2, #1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0201 	and.w	r2, r3, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d017      	beq.n	800262a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d123      	bne.n	800267e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8092 	beq.w	80027e4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	4a51      	ldr	r2, [pc, #324]	@ (8002808 <HAL_GPIO_Init+0x2bc>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026ea:	d013      	beq.n	8002714 <HAL_GPIO_Init+0x1c8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a47      	ldr	r2, [pc, #284]	@ (800280c <HAL_GPIO_Init+0x2c0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00d      	beq.n	8002710 <HAL_GPIO_Init+0x1c4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a46      	ldr	r2, [pc, #280]	@ (8002810 <HAL_GPIO_Init+0x2c4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <HAL_GPIO_Init+0x1c0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a45      	ldr	r2, [pc, #276]	@ (8002814 <HAL_GPIO_Init+0x2c8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_GPIO_Init+0x1bc>
 8002704:	2304      	movs	r3, #4
 8002706:	e006      	b.n	8002716 <HAL_GPIO_Init+0x1ca>
 8002708:	2307      	movs	r3, #7
 800270a:	e004      	b.n	8002716 <HAL_GPIO_Init+0x1ca>
 800270c:	2302      	movs	r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x1ca>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_GPIO_Init+0x1ca>
 8002714:	2300      	movs	r3, #0
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	f002 0203 	and.w	r2, r2, #3
 800271c:	0092      	lsls	r2, r2, #2
 800271e:	4093      	lsls	r3, r2
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002726:	4938      	ldr	r1, [pc, #224]	@ (8002808 <HAL_GPIO_Init+0x2bc>)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002734:	4b38      	ldr	r3, [pc, #224]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002758:	4a2f      	ldr	r2, [pc, #188]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800275e:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002782:	4a25      	ldr	r2, [pc, #148]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002788:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 800278a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <HAL_GPIO_Init+0x2cc>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f aeb1 	bne.w	800255c <HAL_GPIO_Init+0x10>
  }
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40010000 	.word	0x40010000
 800280c:	48000400 	.word	0x48000400
 8002810:	48000800 	.word	0x48000800
 8002814:	48001000 	.word	0x48001000
 8002818:	58000800 	.word	0x58000800

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002838:	e002      	b.n	8002840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_HSEM_IRQHandler+0x30>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <HAL_HSEM_IRQHandler+0x30>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	43db      	mvns	r3, r3
 8002860:	4906      	ldr	r1, [pc, #24]	@ (800287c <HAL_HSEM_IRQHandler+0x30>)
 8002862:	4013      	ands	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002866:	4a05      	ldr	r2, [pc, #20]	@ (800287c <HAL_HSEM_IRQHandler+0x30>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f807 	bl	8002880 <HAL_HSEM_FreeCallback>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	58001500 	.word	0x58001500

08002880 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01e      	beq.n	80028e4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80028a6:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <HAL_IPCC_Init+0x60>)
 80028a8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fab4 	bl	8001e24 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80028bc:	68b8      	ldr	r0, [r7, #8]
 80028be:	f000 f85b 	bl	8002978 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f82c 	bl	800292c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80028e2:	e001      	b.n	80028e8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	58000c00 	.word	0x58000c00

080028f8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e00f      	b.n	800295a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <IPCC_SetDefaultCallbacks+0x44>)
 8002944:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3306      	adds	r3, #6
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	4a08      	ldr	r2, [pc, #32]	@ (8002974 <IPCC_SetDefaultCallbacks+0x48>)
 8002952:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d9ec      	bls.n	800293a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	080028f9 	.word	0x080028f9
 8002974:	08002913 	.word	0x08002913

08002978 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800298c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	223f      	movs	r2, #63	@ 0x3f
 8002992:	609a      	str	r2, [r3, #8]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	58000400 	.word	0x58000400

080029c0 <HAL_PWR_EnterSTANDBYMode>:
  * @note  According to system power policy, system entering in Standby mode
  *        is depending on other CPU power mode.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_PWR_EnterSTANDBYMode+0x38>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 0307 	bic.w	r3, r3, #7
 80029cc:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <HAL_PWR_EnterSTANDBYMode+0x38>)
 80029ce:	f043 0303 	orr.w	r3, r3, #3
 80029d2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80029e0:	bf30      	wfi

  /* Following code is executed after wake up if system did not go to STANDBY
     mode according to system power policy */

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <HAL_PWR_EnterSTANDBYMode+0x3c>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	6113      	str	r3, [r2, #16]
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	58000400 	.word	0x58000400
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <LL_PWR_EnableSRAM2Retention>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002a04:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a0e:	6093      	str	r3, [r2, #8]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	58000400 	.word	0x58000400

08002a20 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002a24:	f7ff ffec 	bl	8002a00 <LL_PWR_EnableSRAM2Retention>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a3e:	d101      	bne.n	8002a44 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_HSE_Enable>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_HSE_Disable>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_RCC_HSE_IsReady>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a9e:	d101      	bne.n	8002aa4 <LL_RCC_HSE_IsReady+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_RCC_HSE_IsReady+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_RCC_HSI_Enable>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_HSI_Disable>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae0:	6013      	str	r3, [r2, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_HSI_IsReady>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afe:	d101      	bne.n	8002b04 <LL_RCC_HSI_IsReady+0x18>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <LL_RCC_HSI_IsReady+0x1a>
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_LSE_Enable>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_RCC_LSE_Disable>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_LSE_EnableBypass>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_LSE_DisableBypass>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_LSE_IsReady>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d101      	bne.n	8002bda <LL_RCC_LSE_IsReady+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_RCC_LSE_IsReady+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_LSI1_Enable>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_LSI1_Disable>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_LSI1_IsReady>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d101      	bne.n	8002c42 <LL_RCC_LSI1_IsReady+0x18>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_RCC_LSI1_IsReady+0x1a>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_LSI2_Enable>:
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_LSI2_Disable>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_LSI2_IsReady>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d101      	bne.n	8002caa <LL_RCC_LSI2_IsReady+0x18>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_RCC_LSI2_IsReady+0x1a>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_LSI2_SetTrimming>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_MSI_Enable>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_MSI_Disable>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_MSI_IsReady>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d101      	bne.n	8002d36 <LL_RCC_MSI_IsReady+0x16>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_RCC_MSI_IsReady+0x18>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_MSI_SetRange>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_MSI_GetRange>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d7a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d80:	d901      	bls.n	8002d86 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002d82:	23b0      	movs	r3, #176	@ 0xb0
 8002d84:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetSysClkSource>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 0203 	bic.w	r2, r3, #3
 8002dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_GetSysClkSource>:
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_SetAHBPrescaler>:
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_SetAHB4Prescaler>:
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_SetAPB1Prescaler>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_SetAPB2Prescaler>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_RCC_GetAHBPrescaler>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_RCC_GetAHB4Prescaler>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	6013      	str	r3, [r2, #0]
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f52:	d101      	bne.n	8002f58 <LL_RCC_PLL_IsReady+0x18>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_RCC_PLL_IsReady+0x1a>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd8:	d101      	bne.n	8002fde <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ffe:	d101      	bne.n	8003004 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003018:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003024:	d101      	bne.n	800302a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003048:	d101      	bne.n	800304e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003068:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800306c:	d101      	bne.n	8003072 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b08d      	sub	sp, #52	@ 0x34
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e324      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 808d 	beq.w	80031ba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a0:	f7ff fea1 	bl	8002de6 <LL_RCC_GetSysClkSource>
 80030a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a6:	f7ff ff82 	bl	8002fae <LL_RCC_PLL_GetMainSource>
 80030aa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x3e>
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d147      	bne.n	8003148 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d144      	bne.n	8003148 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e308      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80030ce:	f7ff fe4c 	bl	8002d6a <LL_RCC_MSI_GetRange>
 80030d2:	4603      	mov	r3, r0
 80030d4:	429c      	cmp	r4, r3
 80030d6:	d914      	bls.n	8003102 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fcc5 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e2f7      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fe26 	bl	8002d42 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe4a 	bl	8002d94 <LL_RCC_MSI_SetCalibTrimming>
 8003100:	e013      	b.n	800312a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe1b 	bl	8002d42 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fe3f 	bl	8002d94 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fca6 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e2d8      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800312a:	f000 fc8b 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 800312e:	4603      	mov	r3, r0
 8003130:	4aa4      	ldr	r2, [pc, #656]	@ (80033c4 <HAL_RCC_OscConfig+0x344>)
 8003132:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003134:	4ba4      	ldr	r3, [pc, #656]	@ (80033c8 <HAL_RCC_OscConfig+0x348>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ffeb 	bl	8002114 <HAL_InitTick>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d039      	beq.n	80031b8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e2c9      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01e      	beq.n	800318e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003150:	f7ff fdc8 	bl	8002ce4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003154:	f7ff f82c 	bl	80021b0 <HAL_GetTick>
 8003158:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800315c:	f7ff f828 	bl	80021b0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e2b6      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800316e:	f7ff fdd7 	bl	8002d20 <LL_RCC_MSI_IsReady>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f1      	beq.n	800315c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fde0 	bl	8002d42 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe04 	bl	8002d94 <LL_RCC_MSI_SetCalibTrimming>
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800318e:	f7ff fdb8 	bl	8002d02 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003192:	f7ff f80d 	bl	80021b0 <HAL_GetTick>
 8003196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319a:	f7ff f809 	bl	80021b0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e297      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031ac:	f7ff fdb8 	bl	8002d20 <LL_RCC_MSI_IsReady>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f1      	bne.n	800319a <HAL_RCC_OscConfig+0x11a>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d047      	beq.n	8003256 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c6:	f7ff fe0e 	bl	8002de6 <LL_RCC_GetSysClkSource>
 80031ca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031cc:	f7ff feef 	bl	8002fae <LL_RCC_PLL_GetMainSource>
 80031d0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_OscConfig+0x164>
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d134      	bne.n	8003256 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e275      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0x180>
 80031fa:	f7ff fc29 	bl	8002a50 <LL_RCC_HSE_Enable>
 80031fe:	e001      	b.n	8003204 <HAL_RCC_OscConfig+0x184>
 8003200:	f7ff fc35 	bl	8002a6e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe ffd0 	bl	80021b0 <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe ffcc 	bl	80021b0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e25a      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003226:	f7ff fc31 	bl	8002a8c <LL_RCC_HSE_IsReady>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f1      	beq.n	8003214 <HAL_RCC_OscConfig+0x194>
 8003230:	e011      	b.n	8003256 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe ffbd 	bl	80021b0 <HAL_GetTick>
 8003236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323a:	f7fe ffb9 	bl	80021b0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	@ 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e247      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 800324c:	f7ff fc1e 	bl	8002a8c <LL_RCC_HSE_IsReady>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f1      	bne.n	800323a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d04c      	beq.n	80032fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	f7ff fdc0 	bl	8002de6 <LL_RCC_GetSysClkSource>
 8003266:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003268:	f7ff fea1 	bl	8002fae <LL_RCC_PLL_GetMainSource>
 800326c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d005      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d10e      	bne.n	8003298 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d10b      	bne.n	8003298 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e227      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fc3d 	bl	8002b10 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003296:	e031      	b.n	80032fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	f7ff fc06 	bl	8002ab0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe ff84 	bl	80021b0 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fe ff80 	bl	80021b0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e20e      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032be:	f7ff fc15 	bl	8002aec <LL_RCC_HSI_IsReady>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f1      	beq.n	80032ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fc1f 	bl	8002b10 <LL_RCC_HSI_SetCalibTrimming>
 80032d2:	e013      	b.n	80032fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d4:	f7ff fbfb 	bl	8002ace <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe ff6a 	bl	80021b0 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fe ff66 	bl	80021b0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e1f4      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f2:	f7ff fbfb 	bl	8002aec <LL_RCC_HSI_IsReady>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f1      	bne.n	80032e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a3 	beq.w	800345c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d076      	beq.n	800340c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d046      	beq.n	80033b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800332a:	f7ff fc7e 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d113      	bne.n	800335c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003334:	f7ff fc57 	bl	8002be6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003338:	f7fe ff3a 	bl	80021b0 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003340:	f7fe ff36 	bl	80021b0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1c4      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003352:	f7ff fc6a 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f1      	beq.n	8003340 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800335c:	f7ff fc77 	bl	8002c4e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe ff26 	bl	80021b0 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003368:	f7fe ff22 	bl	80021b0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b03      	cmp	r3, #3
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1b0      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800337a:	f7ff fc8a 	bl	8002c92 <LL_RCC_LSI2_IsReady>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f1      	beq.n	8003368 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fc94 	bl	8002cb6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800338e:	f7ff fc3b 	bl	8002c08 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe ff0d 	bl	80021b0 <HAL_GetTick>
 8003396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800339a:	f7fe ff09 	bl	80021b0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e197      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033ac:	f7ff fc3d 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f1      	bne.n	800339a <HAL_RCC_OscConfig+0x31a>
 80033b6:	e051      	b.n	800345c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033b8:	f7ff fc15 	bl	8002be6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fef8 	bl	80021b0 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033c2:	e00c      	b.n	80033de <HAL_RCC_OscConfig+0x35e>
 80033c4:	20000020 	.word	0x20000020
 80033c8:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033cc:	f7fe fef0 	bl	80021b0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e17e      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033de:	f7ff fc24 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f1      	beq.n	80033cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033e8:	f7ff fc42 	bl	8002c70 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033ee:	f7fe fedf 	bl	80021b0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e16d      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003400:	f7ff fc47 	bl	8002c92 <LL_RCC_LSI2_IsReady>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f1      	bne.n	80033ee <HAL_RCC_OscConfig+0x36e>
 800340a:	e027      	b.n	800345c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800340c:	f7ff fc30 	bl	8002c70 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe fece 	bl	80021b0 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003418:	f7fe feca 	bl	80021b0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e158      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800342a:	f7ff fc32 	bl	8002c92 <LL_RCC_LSI2_IsReady>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f1      	bne.n	8003418 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003434:	f7ff fbe8 	bl	8002c08 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fe feba 	bl	80021b0 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003440:	f7fe feb6 	bl	80021b0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e144      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003452:	f7ff fbea 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f1      	bne.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05b      	beq.n	8003520 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	4b9e      	ldr	r3, [pc, #632]	@ (80036e4 <HAL_RCC_OscConfig+0x664>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d114      	bne.n	800349e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003474:	f7ff fa94 	bl	80029a0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003478:	f7fe fe9a 	bl	80021b0 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe fe96 	bl	80021b0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e124      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003492:	4b94      	ldr	r3, [pc, #592]	@ (80036e4 <HAL_RCC_OscConfig+0x664>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_RCC_OscConfig+0x42c>
 80034a6:	f7ff fb48 	bl	8002b3a <LL_RCC_LSE_Enable>
 80034aa:	e00c      	b.n	80034c6 <HAL_RCC_OscConfig+0x446>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d104      	bne.n	80034be <HAL_RCC_OscConfig+0x43e>
 80034b4:	f7ff fb63 	bl	8002b7e <LL_RCC_LSE_EnableBypass>
 80034b8:	f7ff fb3f 	bl	8002b3a <LL_RCC_LSE_Enable>
 80034bc:	e003      	b.n	80034c6 <HAL_RCC_OscConfig+0x446>
 80034be:	f7ff fb4d 	bl	8002b5c <LL_RCC_LSE_Disable>
 80034c2:	f7ff fb6d 	bl	8002ba0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d014      	beq.n	80034f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fe6f 	bl	80021b0 <HAL_GetTick>
 80034d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fe6b 	bl	80021b0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0f7      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034ec:	f7ff fb69 	bl	8002bc2 <LL_RCC_LSE_IsReady>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCC_OscConfig+0x456>
 80034f6:	e013      	b.n	8003520 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe fe5a 	bl	80021b0 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe fe56 	bl	80021b0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0e2      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003516:	f7ff fb54 	bl	8002bc2 <LL_RCC_LSE_IsReady>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ef      	bne.n	8003500 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80d8 	beq.w	80036da <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352a:	f7ff fc5c 	bl	8002de6 <LL_RCC_GetSysClkSource>
 800352e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	2b02      	cmp	r3, #2
 800353e:	f040 80a6 	bne.w	800368e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d123      	bne.n	8003598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d114      	bne.n	8003598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d10d      	bne.n	8003598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d106      	bne.n	8003598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d054      	beq.n	8003642 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d04f      	beq.n	800363e <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800359e:	f7ff fcc0 	bl	8002f22 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a2:	f7fe fe05 	bl	80021b0 <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe fe01 	bl	80021b0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e08f      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ef      	bne.n	80035aa <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	4b45      	ldr	r3, [pc, #276]	@ (80036e8 <HAL_RCC_OscConfig+0x668>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035e2:	0212      	lsls	r2, r2, #8
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035f6:	430a      	orrs	r2, r1
 80035f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003600:	f7ff fc80 	bl	8002f04 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003614:	f7fe fdcc 	bl	80021b0 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe fdc8 	bl	80021b0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e056      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ef      	beq.n	800361c <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800363c:	e04d      	b.n	80036da <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e04c      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d144      	bne.n	80036da <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003650:	f7ff fc58 	bl	8002f04 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003662:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003664:	f7fe fda4 	bl	80021b0 <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe fda0 	bl	80021b0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e02e      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ef      	beq.n	800366c <HAL_RCC_OscConfig+0x5ec>
 800368c:	e025      	b.n	80036da <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003694:	f7ff fc45 	bl	8002f22 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fd8a 	bl	80021b0 <HAL_GetTick>
 800369c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fd86 	bl	80021b0 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e014      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ef      	bne.n	80036a0 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e001      	b.n	80036da <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3734      	adds	r7, #52	@ 0x34
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	58000400 	.word	0x58000400
 80036e8:	11c1808c 	.word	0x11c1808c

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e12d      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b98      	ldr	r3, [pc, #608]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d91b      	bls.n	8003746 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b95      	ldr	r3, [pc, #596]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4993      	ldr	r1, [pc, #588]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371e:	f7fe fd47 	bl	80021b0 <HAL_GetTick>
 8003722:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003724:	e008      	b.n	8003738 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003726:	f7fe fd43 	bl	80021b0 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e111      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003738:	4b8a      	ldr	r3, [pc, #552]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d1ef      	bne.n	8003726 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fb51 	bl	8002dfe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800375c:	f7fe fd28 	bl	80021b0 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003764:	f7fe fd24 	bl	80021b0 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0f2      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003776:	f7ff fc26 	bl	8002fc6 <LL_RCC_IsActiveFlag_HPRE>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f1      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fb48 	bl	8002e26 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003796:	f7fe fd0b 	bl	80021b0 <HAL_GetTick>
 800379a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800379e:	f7fe fd07 	bl	80021b0 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0d5      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037b0:	f7ff fc1b 	bl	8002fea <LL_RCC_IsActiveFlag_C2HPRE>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f1      	beq.n	800379e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fb41 	bl	8002e52 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037d0:	f7fe fcee 	bl	80021b0 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037d8:	f7fe fcea 	bl	80021b0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0b8      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037ea:	f7ff fc11 	bl	8003010 <LL_RCC_IsActiveFlag_SHDHPRE>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f1      	beq.n	80037d8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d016      	beq.n	800382e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fb3b 	bl	8002e80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800380a:	f7fe fcd1 	bl	80021b0 <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003812:	f7fe fccd 	bl	80021b0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e09b      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003824:	f7ff fc07 	bl	8003036 <LL_RCC_IsActiveFlag_PPRE1>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f1      	beq.n	8003812 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fb31 	bl	8002ea8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003846:	f7fe fcb3 	bl	80021b0 <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800384e:	f7fe fcaf 	bl	80021b0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e07d      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003860:	f7ff fbfb 	bl	800305a <LL_RCC_IsActiveFlag_PPRE2>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f1      	beq.n	800384e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d043      	beq.n	80038fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d106      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800387e:	f7ff f905 	bl	8002a8c <LL_RCC_HSE_IsReady>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11e      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e067      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003894:	f7ff fb54 	bl	8002f40 <LL_RCC_PLL_IsReady>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d113      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e05c      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038aa:	f7ff fa39 	bl	8002d20 <LL_RCC_MSI_IsReady>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e051      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038b8:	f7ff f918 	bl	8002aec <LL_RCC_HSI_IsReady>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e04a      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fa77 	bl	8002dbe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fe fc6e 	bl	80021b0 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fe fc6a 	bl	80021b0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e036      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	f7ff fa7a 	bl	8002de6 <LL_RCC_GetSysClkSource>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d1ec      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fe:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d21b      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390c:	4b15      	ldr	r3, [pc, #84]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 0207 	bic.w	r2, r3, #7
 8003914:	4913      	ldr	r1, [pc, #76]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fe fc48 	bl	80021b0 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	e008      	b.n	8003936 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003924:	f7fe fc44 	bl	80021b0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e012      	b.n	800395c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_RCC_ClockConfig+0x278>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d1ef      	bne.n	8003924 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003944:	f000 f87e 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003948:	4603      	mov	r3, r0
 800394a:	4a07      	ldr	r2, [pc, #28]	@ (8003968 <HAL_RCC_ClockConfig+0x27c>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800394e:	f7fe fc3b 	bl	80021c8 <HAL_GetTickPrio>
 8003952:	4603      	mov	r3, r0
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fbdd 	bl	8002114 <HAL_InitTick>
 800395a:	4603      	mov	r3, r0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	58004000 	.word	0x58004000
 8003968:	20000020 	.word	0x20000020

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	f7ff fa38 	bl	8002de6 <LL_RCC_GetSysClkSource>
 8003976:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800397e:	f7ff f9f4 	bl	8002d6a <LL_RCC_MSI_GetRange>
 8003982:	4603      	mov	r3, r0
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	4a2b      	ldr	r2, [pc, #172]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xcc>)
 800398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e04b      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800399a:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e045      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d10a      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039a6:	f7ff f841 	bl	8002a2c <LL_RCC_HSE_IsEnabledDiv2>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80039b0:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	e03a      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e037      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80039bc:	f7ff faf7 	bl	8002fae <LL_RCC_PLL_GetMainSource>
 80039c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d003      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x64>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x6a>
 80039ce:	e00d      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80039d0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039d2:	60bb      	str	r3, [r7, #8]
        break;
 80039d4:	e015      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039d6:	f7ff f829 	bl	8002a2c <LL_RCC_HSE_IsEnabledDiv2>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80039e0:	4b16      	ldr	r3, [pc, #88]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80039e4:	e00d      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039e8:	60bb      	str	r3, [r7, #8]
        break;
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039ec:	f7ff f9bd 	bl	8002d6a <LL_RCC_MSI_GetRange>
 80039f0:	4603      	mov	r3, r0
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	60bb      	str	r3, [r7, #8]
        break;
 8003a00:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003a02:	f7ff faaf 	bl	8002f64 <LL_RCC_PLL_GetN>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	fb03 f402 	mul.w	r4, r3, r2
 8003a0e:	f7ff fac2 	bl	8002f96 <LL_RCC_PLL_GetDivider>
 8003a12:	4603      	mov	r3, r0
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	3301      	adds	r3, #1
 8003a18:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a1c:	f7ff faaf 	bl	8002f7e <LL_RCC_PLL_GetR>
 8003a20:	4603      	mov	r3, r0
 8003a22:	0f5b      	lsrs	r3, r3, #29
 8003a24:	3301      	adds	r3, #1
 8003a26:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a2a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08009028 	.word	0x08009028
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	01e84800 	.word	0x01e84800

08003a44 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b598      	push	{r3, r4, r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a48:	f7ff ff90 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	f7ff fa3f 	bl	8002ed0 <LL_RCC_GetAHBPrescaler>
 8003a52:	4603      	mov	r3, r0
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd98      	pop	{r3, r4, r7, pc}
 8003a68:	08008fe8 	.word	0x08008fe8

08003a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a78:	d903      	bls.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003a7a:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e007      	b.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	4a10      	ldr	r2, [pc, #64]	@ (8003acc <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003a92:	f7ff fa29 	bl	8002ee8 <LL_RCC_GetAHB4Prescaler>
 8003a96:	4603      	mov	r3, r0
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	0c9b      	lsrs	r3, r3, #18
 8003ab6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f80c 	bl	8003ad8 <RCC_SetFlashLatency>
 8003ac0:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	08009028 	.word	0x08009028
 8003ad0:	08008fe8 	.word	0x08008fe8
 8003ad4:	431bde83 	.word	0x431bde83

08003ad8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b08f      	sub	sp, #60	@ 0x3c
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <RCC_SetFlashLatency+0x9c>)
 8003ae4:	f107 041c 	add.w	r4, r7, #28
 8003ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003aee:	4b22      	ldr	r3, [pc, #136]	@ (8003b78 <RCC_SetFlashLatency+0xa0>)
 8003af0:	f107 040c 	add.w	r4, r7, #12
 8003af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003afa:	2300      	movs	r3, #0
 8003afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b02:	e013      	b.n	8003b2c <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3338      	adds	r3, #56	@ 0x38
 8003b0a:	443b      	add	r3, r7
 8003b0c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d807      	bhi.n	8003b26 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3338      	adds	r3, #56	@ 0x38
 8003b1c:	443b      	add	r3, r7
 8003b1e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003b24:	e005      	b.n	8003b32 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	3301      	adds	r3, #1
 8003b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d9e8      	bls.n	8003b04 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003b32:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <RCC_SetFlashLatency+0xa4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 0207 	bic.w	r2, r3, #7
 8003b3a:	4910      	ldr	r1, [pc, #64]	@ (8003b7c <RCC_SetFlashLatency+0xa4>)
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b42:	f7fe fb35 	bl	80021b0 <HAL_GetTick>
 8003b46:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b48:	e008      	b.n	8003b5c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b4a:	f7fe fb31 	bl	80021b0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e007      	b.n	8003b6c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b5c:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <RCC_SetFlashLatency+0xa4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d1ef      	bne.n	8003b4a <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	373c      	adds	r7, #60	@ 0x3c
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd90      	pop	{r4, r7, pc}
 8003b74:	08008e50 	.word	0x08008e50
 8003b78:	08008e60 	.word	0x08008e60
 8003b7c:	58004000 	.word	0x58004000

08003b80 <LL_RCC_LSE_IsEnabled>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <LL_RCC_LSE_IsEnabled+0x18>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <LL_RCC_LSE_IsEnabled+0x1a>
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_LSE_IsReady>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d101      	bne.n	8003bbc <LL_RCC_LSE_IsReady+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_RCC_LSE_IsReady+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_SetRFWKPClockSource>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_RCC_SetSMPSClockSource>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_RCC_SetSMPSPrescaler>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_RCC_SetUSARTClockSource>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f023 0203 	bic.w	r2, r3, #3
 8003c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_SetLPUARTClockSource>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_SetI2CClockSource>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_SetLPTIMClockSource>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	43db      	mvns	r3, r3
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_SetRNGClockSource>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_RCC_SetCLK48ClockSource>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <LL_RCC_SetADCClockSource>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_RCC_SetRTCClockSource>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_GetRTCClockSource>:
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_RCC_ForceBackupDomainReset>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e20:	2300      	movs	r3, #0
 8003e22:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e24:	2300      	movs	r3, #0
 8003e26:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d046      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e34:	f7ff ffc1 	bl	8003dba <LL_RCC_GetRTCClockSource>
 8003e38:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d03c      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e44:	f7fe fdac 	bl	80029a0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff9b 	bl	8003d8e <LL_RCC_SetRTCClockSource>
 8003e58:	e02e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e64:	f7ff ffb6 	bl	8003dd4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e68:	f7ff ffc5 	bl	8003df6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003e84:	f7ff fe7c 	bl	8003b80 <LL_RCC_LSE_IsEnabled>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d114      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8e:	f7fe f98f 	bl	80021b0 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e94:	e00b      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fe f98b 	bl	80021b0 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d902      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	77fb      	strb	r3, [r7, #31]
              break;
 8003eac:	e004      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003eae:	f7ff fe79 	bl	8003ba4 <LL_RCC_LSE_IsReady>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	77bb      	strb	r3, [r7, #30]
 8003ebc:	e001      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff feb6 	bl	8003c44 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fec1 	bl	8003c70 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fee9 	bl	8003cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fede 	bl	8003cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff feb6 	bl	8003c9c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02b      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f44:	d008      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f4e:	d003      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fed4 	bl	8003d0a <LL_RCC_SetRNGClockSource>
 8003f62:	e00a      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f7ff fecb 	bl	8003d0a <LL_RCC_SetRNGClockSource>
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff fede 	bl	8003d36 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003f82:	d107      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fedc 	bl	8003d62 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc2:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fdf7 	bl	8003bc8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fe16 	bl	8003c1c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fdfd 	bl	8003bf4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003ffa:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e077      	b.n	800410a <HAL_RTC_Init+0x106>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd ff1c 	bl	8001e6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b10      	cmp	r3, #16
 8004048:	d055      	beq.n	80040f6 <HAL_RTC_Init+0xf2>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	22ca      	movs	r2, #202	@ 0xca
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2253      	movs	r2, #83	@ 0x53
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f880 	bl	8004160 <RTC_EnterInitMode>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d12c      	bne.n	80040c4 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68d2      	ldr	r2, [r2, #12]
 80040a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6919      	ldr	r1, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	041a      	lsls	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f888 	bl	80041d0 <RTC_ExitInitMode>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d110      	bne.n	80040ec <HAL_RTC_Init+0xe8>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_REMAP_POS1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0202 	bic.w	r2, r2, #2
 80040d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	22ff      	movs	r2, #255	@ 0xff
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80040f4:	e001      	b.n	80040fa <HAL_RTC_Init+0xf6>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <HAL_RTC_Init+0x104>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <HAL_RTC_WaitForSynchro+0x48>)
 8004126:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004128:	f7fe f842 	bl	80021b0 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800412e:	e009      	b.n	8004144 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004130:	f7fe f83e 	bl	80021b0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800413e:	d901      	bls.n	8004144 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e007      	b.n	8004154 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ee      	beq.n	8004130 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	00015f5f 	.word	0x00015f5f

08004160 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d123      	bne.n	80041c6 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800418c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800418e:	f7fe f80f 	bl	80021b0 <HAL_GetTick>
 8004192:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004194:	e00d      	b.n	80041b2 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004196:	f7fe f80b 	bl	80021b0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041a4:	d905      	bls.n	80041b2 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <RTC_EnterInitMode+0x66>
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d1e7      	bne.n	8004196 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041ea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ff8a 	bl	8004114 <HAL_RTC_WaitForSynchro>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2204      	movs	r2, #4
 800420a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004228:	4b5f      	ldr	r3, [pc, #380]	@ (80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5f      	ldr	r2, [pc, #380]	@ (80043ac <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0adb      	lsrs	r3, r3, #11
 8004234:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8004248:	2302      	movs	r3, #2
 800424a:	e0a7      	b.n	800439c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	22ca      	movs	r2, #202	@ 0xca
 8004262:	625a      	str	r2, [r3, #36]	@ 0x24
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2253      	movs	r2, #83	@ 0x53
 800426a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01a      	beq.n	80042b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	3b01      	subs	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10d      	bne.n	80042a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	22ff      	movs	r2, #255	@ 0xff
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2203      	movs	r2, #3
 8004292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e07c      	b.n	800439c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e4      	bne.n	800427a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80042d0:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80042d2:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a35      	ldr	r2, [pc, #212]	@ (80043ac <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	0adb      	lsrs	r3, r3, #11
 80042de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10d      	bne.n	8004310 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	22ff      	movs	r2, #255	@ 0xff
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2203      	movs	r2, #3
 8004300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e045      	b.n	800439c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0e4      	beq.n	80042e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0207 	bic.w	r2, r2, #7
 800432c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004346:	4b1a      	ldr	r3, [pc, #104]	@ (80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434c:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800434e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004352:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004356:	4b16      	ldr	r3, [pc, #88]	@ (80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a15      	ldr	r2, [pc, #84]	@ (80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800435c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004370:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004380:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	22ff      	movs	r2, #255	@ 0xff
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000020 	.word	0x20000020
 80043ac:	10624dd3 	.word	0x10624dd3
 80043b0:	58000800 	.word	0x58000800

080043b4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e04d      	b.n	800446a <HAL_RTCEx_DeactivateWakeUpTimer+0xb6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	22ca      	movs	r2, #202	@ 0xca
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2253      	movs	r2, #83	@ 0x53
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800440c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800440e:	f7fd fecf 	bl	80021b0 <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004414:	e015      	b.n	8004442 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004416:	f7fd fecb 	bl	80021b0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004424:	d90d      	bls.n	8004442 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	22ff      	movs	r2, #255	@ 0xff
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2203      	movs	r2, #3
 8004432:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e013      	b.n	800446a <HAL_RTCEx_DeactivateWakeUpTimer+0xb6>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0e2      	beq.n	8004416 <HAL_RTCEx_DeactivateWakeUpTimer+0x62>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	22ff      	movs	r2, #255	@ 0xff
 8004456:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e095      	b.n	80045b0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004494:	d009      	beq.n	80044aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	61da      	str	r2, [r3, #28]
 800449c:	e005      	b.n	80044aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fd fd05 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ea:	d902      	bls.n	80044f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e002      	b.n	80044f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004500:	d007      	beq.n	8004512 <HAL_SPI_Init+0xa0>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800450a:	d002      	beq.n	8004512 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004554:	ea42 0103 	orr.w	r1, r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0204 	and.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800458e:	ea42 0103 	orr.w	r1, r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c8:	f7fd fdf2 	bl	80021b0 <HAL_GetTick>
 80045cc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
 80045e0:	e15c      	b.n	800489c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Transmit+0x36>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e154      	b.n	800489c <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_SPI_Transmit+0x48>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e14d      	b.n	800489c <HAL_SPI_Transmit+0x2e4>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2203      	movs	r2, #3
 800460c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004652:	d10f      	bne.n	8004674 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004662:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004672:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d007      	beq.n	8004692 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800469a:	d952      	bls.n	8004742 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Transmit+0xf2>
 80046a4:	8b7b      	ldrh	r3, [r7, #26]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d145      	bne.n	8004736 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	881a      	ldrh	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046ce:	e032      	b.n	8004736 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d112      	bne.n	8004704 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	881a      	ldrh	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004702:	e018      	b.n	8004736 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004704:	f7fd fd54 	bl	80021b0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d803      	bhi.n	800471c <HAL_SPI_Transmit+0x164>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d102      	bne.n	8004722 <HAL_SPI_Transmit+0x16a>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0b2      	b.n	800489c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1c7      	bne.n	80046d0 <HAL_SPI_Transmit+0x118>
 8004740:	e083      	b.n	800484a <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Transmit+0x198>
 800474a:	8b7b      	ldrh	r3, [r7, #26]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d177      	bne.n	8004840 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b01      	cmp	r3, #1
 8004758:	d912      	bls.n	8004780 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	881a      	ldrh	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	1c9a      	adds	r2, r3, #2
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b02      	subs	r3, #2
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800477e:	e05f      	b.n	8004840 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	7812      	ldrb	r2, [r2, #0]
 800478c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047a6:	e04b      	b.n	8004840 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d12b      	bne.n	800480e <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d912      	bls.n	80047e6 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	881a      	ldrh	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b02      	subs	r3, #2
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047e4:	e02c      	b.n	8004840 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800480c:	e018      	b.n	8004840 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480e:	f7fd fccf 	bl	80021b0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d803      	bhi.n	8004826 <HAL_SPI_Transmit+0x26e>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d102      	bne.n	800482c <HAL_SPI_Transmit+0x274>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e02d      	b.n	800489c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ae      	bne.n	80047a8 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fcf6 	bl	8005240 <SPI_EndRxTxTransaction>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800489a:	2300      	movs	r3, #0
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d001      	beq.n	80048c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
 80048c2:	e123      	b.n	8004b0c <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Receive+0x2c>
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e11b      	b.n	8004b0c <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048dc:	d112      	bne.n	8004904 <HAL_SPI_Receive+0x60>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10e      	bne.n	8004904 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2204      	movs	r2, #4
 80048ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f90a 	bl	8004b14 <HAL_SPI_TransmitReceive>
 8004900:	4603      	mov	r3, r0
 8004902:	e103      	b.n	8004b0c <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004904:	f7fd fc54 	bl	80021b0 <HAL_GetTick>
 8004908:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_SPI_Receive+0x74>
 8004914:	2302      	movs	r3, #2
 8004916:	e0f9      	b.n	8004b0c <HAL_SPI_Receive+0x268>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2204      	movs	r2, #4
 8004924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800496a:	d908      	bls.n	800497e <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	e007      	b.n	800498e <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004996:	d10f      	bne.n	80049b8 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d007      	beq.n	80049d6 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049de:	d875      	bhi.n	8004acc <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049e0:	e037      	b.n	8004a52 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d117      	bne.n	8004a20 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f103 020c 	add.w	r2, r3, #12
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004a1e:	e018      	b.n	8004a52 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a20:	f7fd fbc6 	bl	80021b0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d803      	bhi.n	8004a38 <HAL_SPI_Receive+0x194>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Receive+0x19a>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e05c      	b.n	8004b0c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1c1      	bne.n	80049e2 <HAL_SPI_Receive+0x13e>
 8004a5e:	e03b      	b.n	8004ad8 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d115      	bne.n	8004a9a <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004a98:	e018      	b.n	8004acc <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9a:	f7fd fb89 	bl	80021b0 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d803      	bhi.n	8004ab2 <HAL_SPI_Receive+0x20e>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d102      	bne.n	8004ab8 <HAL_SPI_Receive+0x214>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e01f      	b.n	8004b0c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1c3      	bne.n	8004a60 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fb57 	bl	8005190 <SPI_EndRxTransaction>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	@ 0x28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b22:	2301      	movs	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b26:	f7fd fb43 	bl	80021b0 <HAL_GetTick>
 8004b2a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b32:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004b3e:	887b      	ldrh	r3, [r7, #2]
 8004b40:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d00c      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x4e>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b4e:	d106      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x4a>
 8004b58:	7ffb      	ldrb	r3, [r7, #31]
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d001      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e1f3      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x60>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x60>
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e1e8      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x72>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e1e1      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d003      	beq.n	8004ba2 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2205      	movs	r2, #5
 8004b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	887a      	ldrh	r2, [r7, #2]
 8004bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	887a      	ldrh	r2, [r7, #2]
 8004bba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	887a      	ldrh	r2, [r7, #2]
 8004bce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be4:	d802      	bhi.n	8004bec <HAL_SPI_TransmitReceive+0xd8>
 8004be6:	8abb      	ldrh	r3, [r7, #20]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d908      	bls.n	8004bfe <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	e007      	b.n	8004c0e <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d007      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c34:	f240 8083 	bls.w	8004d3e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x132>
 8004c40:	8afb      	ldrh	r3, [r7, #22]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d16f      	bne.n	8004d26 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6a:	e05c      	b.n	8004d26 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d11b      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x19e>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d016      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x19e>
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d113      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d11c      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x1e6>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cfa:	f7fd fa59 	bl	80021b0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d80d      	bhi.n	8004d26 <HAL_SPI_TransmitReceive+0x212>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d009      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e111      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d19d      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x158>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d197      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x158>
 8004d3c:	e0e5      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0x23a>
 8004d46:	8afb      	ldrh	r3, [r7, #22]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	f040 80d1 	bne.w	8004ef0 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d912      	bls.n	8004d7e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b02      	subs	r3, #2
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d7c:	e0b8      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da4:	e0a4      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d134      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x30a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d02f      	beq.n	8004e1e <HAL_SPI_TransmitReceive+0x30a>
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d12c      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d912      	bls.n	8004df4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b02      	subs	r3, #2
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004df2:	e012      	b.n	8004e1a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d148      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x3aa>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d042      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d923      	bls.n	8004e8c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b02      	subs	r3, #2
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d81f      	bhi.n	8004eba <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	e016      	b.n	8004eba <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f103 020c 	add.w	r2, r3, #12
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ebe:	f7fd f977 	bl	80021b0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d803      	bhi.n	8004ed6 <HAL_SPI_TransmitReceive+0x3c2>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d102      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x3c8>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e02c      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f47f af55 	bne.w	8004da6 <HAL_SPI_TransmitReceive+0x292>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f af4e 	bne.w	8004da6 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f996 	bl	8005240 <SPI_EndRxTxTransaction>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e00e      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3728      	adds	r7, #40	@ 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f64:	f7fd f924 	bl	80021b0 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f74:	f7fd f91c 	bl	80021b0 <HAL_GetTick>
 8004f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7a:	4b39      	ldr	r3, [pc, #228]	@ (8005060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	015b      	lsls	r3, r3, #5
 8004f80:	0d1b      	lsrs	r3, r3, #20
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8a:	e054      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d050      	beq.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f94:	f7fd f90c 	bl	80021b0 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d902      	bls.n	8004faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13d      	bne.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc2:	d111      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fcc:	d004      	beq.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd6:	d107      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff0:	d10f      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e017      	b.n	8005056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3b01      	subs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	bf0c      	ite	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	2300      	movne	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	429a      	cmp	r2, r3
 8005052:	d19b      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000020 	.word	0x20000020

08005064 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005076:	f7fd f89b 	bl	80021b0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	4413      	add	r3, r2
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005086:	f7fd f893 	bl	80021b0 <HAL_GetTick>
 800508a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005094:	4b3d      	ldr	r3, [pc, #244]	@ (800518c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	00da      	lsls	r2, r3, #3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	0d1b      	lsrs	r3, r3, #20
 80050a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050ac:	e060      	b.n	8005170 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80050b4:	d107      	bne.n	80050c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d050      	beq.n	8005170 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050ce:	f7fd f86f 	bl	80021b0 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050da:	429a      	cmp	r2, r3
 80050dc:	d902      	bls.n	80050e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d13d      	bne.n	8005160 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050fc:	d111      	bne.n	8005122 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005106:	d004      	beq.n	8005112 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005110:	d107      	bne.n	8005122 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005120:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800512a:	d10f      	bne.n	800514c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800514a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e010      	b.n	8005182 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	3b01      	subs	r3, #1
 800516e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d196      	bne.n	80050ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3728      	adds	r7, #40	@ 0x28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000020 	.word	0x20000020

08005190 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051a4:	d111      	bne.n	80051ca <SPI_EndRxTransaction+0x3a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ae:	d004      	beq.n	80051ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b8:	d107      	bne.n	80051ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2180      	movs	r1, #128	@ 0x80
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff febd 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e023      	b.n	8005238 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f8:	d11d      	bne.n	8005236 <SPI_EndRxTransaction+0xa6>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005202:	d004      	beq.n	800520e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520c:	d113      	bne.n	8005236 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff ff22 	bl	8005064 <SPI_WaitFifoStateUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e000      	b.n	8005238 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2200      	movs	r2, #0
 8005254:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff ff03 	bl	8005064 <SPI_WaitFifoStateUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e027      	b.n	80052c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	2180      	movs	r1, #128	@ 0x80
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff fe68 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e014      	b.n	80052c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fedc 	bl	8005064 <SPI_WaitFifoStateUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e000      	b.n	80052c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	2218      	movs	r2, #24
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 f9ec 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80052e4:	233f      	movs	r3, #63	@ 0x3f
 80052e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80052e8:	2381      	movs	r3, #129	@ 0x81
 80052ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052f4:	f107 0308 	add.w	r3, r7, #8
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fc68 	bl	8006bd0 <hci_send_req>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	da01      	bge.n	800530a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005306:	23ff      	movs	r3, #255	@ 0xff
 8005308:	e000      	b.n	800530c <aci_gap_set_non_discoverable+0x40>
  return status;
 800530a:	79fb      	ldrb	r3, [r7, #7]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005314:	b5b0      	push	{r4, r5, r7, lr}
 8005316:	b0ce      	sub	sp, #312	@ 0x138
 8005318:	af00      	add	r7, sp, #0
 800531a:	4605      	mov	r5, r0
 800531c:	460c      	mov	r4, r1
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005326:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800532a:	462a      	mov	r2, r5
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005332:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005336:	4622      	mov	r2, r4
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800533e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8005342:	4602      	mov	r2, r0
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800534a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800534e:	460a      	mov	r2, r1
 8005350:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005352:	f107 0310 	add.w	r3, r7, #16
 8005356:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800535a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800535e:	3308      	adds	r3, #8
 8005360:	f107 0210 	add.w	r2, r7, #16
 8005364:	4413      	add	r3, r2
 8005366:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800536a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800536e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005372:	4413      	add	r3, r2
 8005374:	3309      	adds	r3, #9
 8005376:	f107 0210 	add.w	r2, r7, #16
 800537a:	4413      	add	r3, r2
 800537c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005380:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005384:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005396:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800539a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80053a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053a6:	3301      	adds	r3, #1
 80053a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80053ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053b4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80053b8:	8812      	ldrh	r2, [r2, #0]
 80053ba:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80053be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053c2:	3302      	adds	r3, #2
 80053c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80053c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053d0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80053da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053de:	3302      	adds	r3, #2
 80053e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80053e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053ec:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80053f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053f8:	3301      	adds	r3, #1
 80053fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80053fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005402:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005406:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005408:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800540c:	3301      	adds	r3, #1
 800540e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005416:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800541a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800541c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005420:	3301      	adds	r3, #1
 8005422:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800542a:	3308      	adds	r3, #8
 800542c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005430:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f931 	bl	800669c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800543a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800543e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005442:	4413      	add	r3, r2
 8005444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005448:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800544c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005450:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005452:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005456:	3301      	adds	r3, #1
 8005458:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800545c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005460:	3301      	adds	r3, #1
 8005462:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005466:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800546a:	4618      	mov	r0, r3
 800546c:	f001 f916 	bl	800669c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005470:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005474:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005478:	4413      	add	r3, r2
 800547a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005482:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005486:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005488:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800548c:	3302      	adds	r3, #2
 800548e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005492:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005496:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800549a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800549c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054a0:	3302      	adds	r3, #2
 80054a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80054a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054aa:	2218      	movs	r2, #24
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 f904 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80054b4:	233f      	movs	r3, #63	@ 0x3f
 80054b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80054ba:	2383      	movs	r3, #131	@ 0x83
 80054bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80054c0:	f107 0310 	add.w	r3, r7, #16
 80054c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80054c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80054d0:	f107 030f 	add.w	r3, r7, #15
 80054d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80054d8:	2301      	movs	r3, #1
 80054da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80054de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fb73 	bl	8006bd0 <hci_send_req>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	da01      	bge.n	80054f4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80054f0:	23ff      	movs	r3, #255	@ 0xff
 80054f2:	e004      	b.n	80054fe <aci_gap_set_discoverable+0x1ea>
  return status;
 80054f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80054f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80054fc:	781b      	ldrb	r3, [r3, #0]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005504:	46bd      	mov	sp, r7
 8005506:	bdb0      	pop	{r4, r5, r7, pc}

08005508 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b0cc      	sub	sp, #304	@ 0x130
 800550c:	af00      	add	r7, sp, #0
 800550e:	4602      	mov	r2, r0
 8005510:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005514:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005518:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800551a:	f107 0310 	add.w	r3, r7, #16
 800551e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005526:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005534:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005538:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800553c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005544:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005548:	3301      	adds	r3, #1
 800554a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800554e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005552:	2218      	movs	r2, #24
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f001 f8b0 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 800555c:	233f      	movs	r3, #63	@ 0x3f
 800555e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005562:	2385      	movs	r3, #133	@ 0x85
 8005564:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005568:	f107 0310 	add.w	r3, r7, #16
 800556c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005570:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005574:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005578:	f107 030f 	add.w	r3, r7, #15
 800557c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005580:	2301      	movs	r3, #1
 8005582:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fb1f 	bl	8006bd0 <hci_send_req>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	da01      	bge.n	800559c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005598:	23ff      	movs	r3, #255	@ 0xff
 800559a:	e004      	b.n	80055a6 <aci_gap_set_io_capability+0x9e>
  return status;
 800559c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055a4:	781b      	ldrb	r3, [r3, #0]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80055b0:	b5b0      	push	{r4, r5, r7, lr}
 80055b2:	b0cc      	sub	sp, #304	@ 0x130
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4605      	mov	r5, r0
 80055b8:	460c      	mov	r4, r1
 80055ba:	4610      	mov	r0, r2
 80055bc:	4619      	mov	r1, r3
 80055be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80055c6:	462a      	mov	r2, r5
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80055d2:	4622      	mov	r2, r4
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055da:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80055de:	4602      	mov	r2, r0
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80055ea:	460a      	mov	r2, r1
 80055ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80055f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005608:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800560c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005610:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800561c:	3301      	adds	r3, #1
 800561e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005626:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800562a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005636:	3301      	adds	r3, #1
 8005638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800563c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005640:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005644:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800564c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005650:	3301      	adds	r3, #1
 8005652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800565a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800565e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005662:	7812      	ldrb	r2, [r2, #0]
 8005664:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005666:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800566a:	3301      	adds	r3, #1
 800566c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005670:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005674:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005678:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800567a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800567e:	3301      	adds	r3, #1
 8005680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005688:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800568c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800568e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005692:	3301      	adds	r3, #1
 8005694:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800569c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80056a0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80056a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056a6:	3301      	adds	r3, #1
 80056a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80056ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80056b4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80056b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056bc:	3304      	adds	r3, #4
 80056be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80056c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056c6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80056ca:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80056cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056d0:	3301      	adds	r3, #1
 80056d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056da:	2218      	movs	r2, #24
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 ffec 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80056e4:	233f      	movs	r3, #63	@ 0x3f
 80056e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80056ea:	2386      	movs	r3, #134	@ 0x86
 80056ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80056f0:	f107 0310 	add.w	r3, r7, #16
 80056f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80056f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005700:	f107 030f 	add.w	r3, r7, #15
 8005704:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005708:	2301      	movs	r3, #1
 800570a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800570e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f001 fa5b 	bl	8006bd0 <hci_send_req>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	da01      	bge.n	8005724 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005720:	23ff      	movs	r3, #255	@ 0xff
 8005722:	e004      	b.n	800572e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005724:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005728:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800572c:	781b      	ldrb	r3, [r3, #0]
}
 800572e:	4618      	mov	r0, r3
 8005730:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005734:	46bd      	mov	sp, r7
 8005736:	bdb0      	pop	{r4, r5, r7, pc}

08005738 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b0cc      	sub	sp, #304	@ 0x130
 800573c:	af00      	add	r7, sp, #0
 800573e:	4602      	mov	r2, r0
 8005740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005744:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005748:	6019      	str	r1, [r3, #0]
 800574a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800574e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005752:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800575c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005760:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800576e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005772:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005776:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800577a:	8812      	ldrh	r2, [r2, #0]
 800577c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800577e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005782:	3302      	adds	r3, #2
 8005784:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800578c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005790:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800579a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800579e:	3304      	adds	r3, #4
 80057a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057a8:	2218      	movs	r2, #24
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 ff85 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80057b2:	233f      	movs	r3, #63	@ 0x3f
 80057b4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80057b8:	2388      	movs	r3, #136	@ 0x88
 80057ba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057be:	f107 0310 	add.w	r3, r7, #16
 80057c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80057ce:	f107 030f 	add.w	r3, r7, #15
 80057d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 f9f4 	bl	8006bd0 <hci_send_req>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da01      	bge.n	80057f2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80057ee:	23ff      	movs	r3, #255	@ 0xff
 80057f0:	e004      	b.n	80057fc <aci_gap_pass_key_resp+0xc4>
  return status;
 80057f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057fa:	781b      	ldrb	r3, [r3, #0]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005806:	b590      	push	{r4, r7, lr}
 8005808:	b0cd      	sub	sp, #308	@ 0x134
 800580a:	af00      	add	r7, sp, #0
 800580c:	4604      	mov	r4, r0
 800580e:	4608      	mov	r0, r1
 8005810:	4611      	mov	r1, r2
 8005812:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005816:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005820:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005824:	4622      	mov	r2, r4
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800582c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005830:	4602      	mov	r2, r0
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005838:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800583c:	460a      	mov	r2, r1
 800583e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005840:	f107 0310 	add.w	r3, r7, #16
 8005844:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	2207      	movs	r2, #7
 800584e:	2100      	movs	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f000 ff33 	bl	80066bc <Osal_MemSet>
  int index_input = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005860:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005864:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800586c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005870:	3301      	adds	r3, #1
 8005872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800587a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800587e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005882:	7812      	ldrb	r2, [r2, #0]
 8005884:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800588a:	3301      	adds	r3, #1
 800588c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005890:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005894:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005898:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80058a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058a4:	3301      	adds	r3, #1
 80058a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058ae:	2218      	movs	r2, #24
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 ff02 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80058b8:	233f      	movs	r3, #63	@ 0x3f
 80058ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80058be:	238a      	movs	r3, #138	@ 0x8a
 80058c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80058c4:	f107 0310 	add.w	r3, r7, #16
 80058c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80058cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80058dc:	2307      	movs	r3, #7
 80058de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f971 	bl	8006bd0 <hci_send_req>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da01      	bge.n	80058f8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80058f4:	23ff      	movs	r3, #255	@ 0xff
 80058f6:	e02e      	b.n	8005956 <aci_gap_init+0x150>
  if ( resp.Status )
 80058f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <aci_gap_init+0x10c>
    return resp.Status;
 8005906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800590a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	e021      	b.n	8005956 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005916:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800591a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800591e:	b29a      	uxth	r2, r3
 8005920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005924:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800592c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005930:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005934:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800593e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005940:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005944:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005948:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800594c:	b29a      	uxth	r2, r3
 800594e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005952:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800595c:	46bd      	mov	sp, r7
 800595e:	bd90      	pop	{r4, r7, pc}

08005960 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b0cc      	sub	sp, #304	@ 0x130
 8005964:	af00      	add	r7, sp, #0
 8005966:	4602      	mov	r2, r0
 8005968:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005970:	6019      	str	r1, [r3, #0]
 8005972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005976:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800597a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005984:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005988:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800599a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800599e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059aa:	3301      	adds	r3, #1
 80059ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059b4:	1c58      	adds	r0, r3, #1
 80059b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059ba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	f000 fe67 	bl	800669c <Osal_MemCpy>
  index_input += AdvDataLen;
 80059ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80059dc:	4413      	add	r3, r2
 80059de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80059e6:	2218      	movs	r2, #24
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fe66 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80059f0:	233f      	movs	r3, #63	@ 0x3f
 80059f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80059f6:	238e      	movs	r3, #142	@ 0x8e
 80059f8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80059fc:	f107 0310 	add.w	r3, r7, #16
 8005a00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a0c:	f107 030f 	add.w	r3, r7, #15
 8005a10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f8d5 	bl	8006bd0 <hci_send_req>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da01      	bge.n	8005a30 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005a2c:	23ff      	movs	r3, #255	@ 0xff
 8005a2e:	e004      	b.n	8005a3a <aci_gap_update_adv_data+0xda>
  return status;
 8005a30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a34:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a38:	781b      	ldrb	r3, [r3, #0]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	2218      	movs	r2, #24
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fe30 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a5c:	233f      	movs	r3, #63	@ 0x3f
 8005a5e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005a60:	2392      	movs	r3, #146	@ 0x92
 8005a62:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a6c:	f107 0308 	add.w	r3, r7, #8
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f8ac 	bl	8006bd0 <hci_send_req>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da01      	bge.n	8005a82 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005a7e:	23ff      	movs	r3, #255	@ 0xff
 8005a80:	e000      	b.n	8005a84 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8005a82:	79fb      	ldrb	r3, [r7, #7]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <aci_gap_terminate>:

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b0cc      	sub	sp, #304	@ 0x130
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4602      	mov	r2, r0
 8005a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005aa2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 8005aaa:	f107 0310 	add.w	r3, r7, #16
 8005aae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ab2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ab6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005aba:	2200      	movs	r2, #0
 8005abc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ac8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005acc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005ad0:	8812      	ldrh	r2, [r2, #0]
 8005ad2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ad8:	3302      	adds	r3, #2
 8005ada:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 8005ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ae2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ae6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005af2:	3301      	adds	r3, #1
 8005af4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005af8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005afc:	2218      	movs	r2, #24
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fddb 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b06:	233f      	movs	r3, #63	@ 0x3f
 8005b08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 8005b0c:	2393      	movs	r3, #147	@ 0x93
 8005b0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8005b12:	230f      	movs	r3, #15
 8005b14:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8005b18:	f107 0310 	add.w	r3, r7, #16
 8005b1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b28:	f107 030f 	add.w	r3, r7, #15
 8005b2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 f847 	bl	8006bd0 <hci_send_req>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da01      	bge.n	8005b4c <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8005b48:	23ff      	movs	r3, #255	@ 0xff
 8005b4a:	e004      	b.n	8005b56 <aci_gap_terminate+0xca>
  return status;
 8005b4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b54:	781b      	ldrb	r3, [r3, #0]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b0cc      	sub	sp, #304	@ 0x130
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4602      	mov	r2, r0
 8005b68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b6c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b76:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005b86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ba0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005ba4:	8812      	ldrh	r2, [r2, #0]
 8005ba6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bac:	3302      	adds	r3, #2
 8005bae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bba:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bd0:	2218      	movs	r2, #24
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fd71 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bda:	233f      	movs	r3, #63	@ 0x3f
 8005bdc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8005be0:	23a5      	movs	r3, #165	@ 0xa5
 8005be2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005bf6:	f107 030f 	add.w	r3, r7, #15
 8005bfa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ffe0 	bl	8006bd0 <hci_send_req>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da01      	bge.n	8005c1a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005c16:	23ff      	movs	r3, #255	@ 0xff
 8005c18:	e004      	b.n	8005c24 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005c1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c1e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c22:	781b      	ldrb	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b088      	sub	sp, #32
 8005c32:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c38:	f107 0308 	add.w	r3, r7, #8
 8005c3c:	2218      	movs	r2, #24
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fd3b 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c46:	233f      	movs	r3, #63	@ 0x3f
 8005c48:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005c4a:	f240 1301 	movw	r3, #257	@ 0x101
 8005c4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c50:	1dfb      	adds	r3, r7, #7
 8005c52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005c54:	2301      	movs	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 ffb6 	bl	8006bd0 <hci_send_req>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da01      	bge.n	8005c6e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005c6a:	23ff      	movs	r3, #255	@ 0xff
 8005c6c:	e000      	b.n	8005c70 <aci_gatt_init+0x42>
  return status;
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b0cf      	sub	sp, #316	@ 0x13c
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4604      	mov	r4, r0
 8005c80:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005c84:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005c88:	6001      	str	r1, [r0, #0]
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c92:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c96:	4622      	mov	r2, r4
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c9e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005caa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005cae:	460a      	mov	r2, r1
 8005cb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005cba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005cbe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d00a      	beq.n	8005cde <aci_gatt_add_service+0x66>
 8005cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ccc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d101      	bne.n	8005cda <aci_gatt_add_service+0x62>
 8005cd6:	2311      	movs	r3, #17
 8005cd8:	e002      	b.n	8005ce0 <aci_gatt_add_service+0x68>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <aci_gatt_add_service+0x68>
 8005cde:	2303      	movs	r3, #3
 8005ce0:	f107 0210 	add.w	r2, r7, #16
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	2203      	movs	r2, #3
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fce2 	bl	80066bc <Osal_MemSet>
  int index_input = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005cfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d02:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005d06:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005d0a:	7812      	ldrb	r2, [r2, #0]
 8005d0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d12:	3301      	adds	r3, #1
 8005d14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005d18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d1c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d002      	beq.n	8005d2c <aci_gatt_add_service+0xb4>
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d004      	beq.n	8005d34 <aci_gatt_add_service+0xbc>
 8005d2a:	e007      	b.n	8005d3c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005d32:	e005      	b.n	8005d40 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005d3a:	e001      	b.n	8005d40 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005d3c:	2397      	movs	r3, #151	@ 0x97
 8005d3e:	e06c      	b.n	8005e1a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005d40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d44:	1c58      	adds	r0, r3, #1
 8005d46:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	f000 fca2 	bl	800669c <Osal_MemCpy>
    index_input += size;
 8005d58:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005d5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005d60:	4413      	add	r3, r2
 8005d62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d6a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005d6e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005d72:	7812      	ldrb	r2, [r2, #0]
 8005d74:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d84:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005d88:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d94:	3301      	adds	r3, #1
 8005d96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d9e:	2218      	movs	r2, #24
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc8a 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005da8:	233f      	movs	r3, #63	@ 0x3f
 8005daa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005dae:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005db2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005dc6:	f107 030c 	add.w	r3, r7, #12
 8005dca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005dce:	2303      	movs	r3, #3
 8005dd0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fef8 	bl	8006bd0 <hci_send_req>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da01      	bge.n	8005dea <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005de6:	23ff      	movs	r3, #255	@ 0xff
 8005de8:	e017      	b.n	8005e1a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005dea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005dfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	e00a      	b.n	8005e1a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005e04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005e16:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd90      	pop	{r4, r7, pc}

08005e24 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b0d1      	sub	sp, #324	@ 0x144
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005e32:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005e36:	600a      	str	r2, [r1, #0]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e3e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005e42:	4622      	mov	r2, r4
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e4a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005e4e:	4602      	mov	r2, r0
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e56:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005e5e:	f107 0318 	add.w	r3, r7, #24
 8005e62:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005e66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e6a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d00a      	beq.n	8005e8a <aci_gatt_add_char+0x66>
 8005e74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e78:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d101      	bne.n	8005e86 <aci_gatt_add_char+0x62>
 8005e82:	2313      	movs	r3, #19
 8005e84:	e002      	b.n	8005e8c <aci_gatt_add_char+0x68>
 8005e86:	2303      	movs	r3, #3
 8005e88:	e000      	b.n	8005e8c <aci_gatt_add_char+0x68>
 8005e8a:	2305      	movs	r3, #5
 8005e8c:	f107 0218 	add.w	r2, r7, #24
 8005e90:	4413      	add	r3, r2
 8005e92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fc0c 	bl	80066bc <Osal_MemSet>
  int index_input = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8005eaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005eae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005eb2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005eb6:	8812      	ldrh	r2, [r2, #0]
 8005eb8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005eba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005ec4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ec8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005ecc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005ed0:	7812      	ldrb	r2, [r2, #0]
 8005ed2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005ed4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ed8:	3301      	adds	r3, #1
 8005eda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005ede:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ee2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d002      	beq.n	8005ef2 <aci_gatt_add_char+0xce>
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d004      	beq.n	8005efa <aci_gatt_add_char+0xd6>
 8005ef0:	e007      	b.n	8005f02 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005ef8:	e005      	b.n	8005f06 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005efa:	2310      	movs	r3, #16
 8005efc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005f00:	e001      	b.n	8005f06 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005f02:	2397      	movs	r3, #151	@ 0x97
 8005f04:	e091      	b.n	800602a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005f06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005f0a:	1cd8      	adds	r0, r3, #3
 8005f0c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005f10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f18:	6819      	ldr	r1, [r3, #0]
 8005f1a:	f000 fbbf 	bl	800669c <Osal_MemCpy>
    index_input += size;
 8005f1e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005f22:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005f26:	4413      	add	r3, r2
 8005f28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f30:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005f34:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005f38:	8812      	ldrh	r2, [r2, #0]
 8005f3a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005f3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f40:	3302      	adds	r3, #2
 8005f42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f4a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005f4e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005f50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f54:	3301      	adds	r3, #1
 8005f56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005f5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f5e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005f62:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005f64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f72:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005f76:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005f78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f86:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8005f8a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005f8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f90:	3301      	adds	r3, #1
 8005f92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f9a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8005f9e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005fa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005faa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005fae:	2218      	movs	r2, #24
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb82 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fb8:	233f      	movs	r3, #63	@ 0x3f
 8005fba:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8005fbe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005fc2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005fc6:	f107 0318 	add.w	r3, r7, #24
 8005fca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005fce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fd2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005fde:	2303      	movs	r3, #3
 8005fe0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fe4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fdf0 	bl	8006bd0 <hci_send_req>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da01      	bge.n	8005ffa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005ff6:	23ff      	movs	r3, #255	@ 0xff
 8005ff8:	e017      	b.n	800602a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005ffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ffe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006008:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800600c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	e00a      	b.n	800602a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006014:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006018:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800601c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006026:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006030:	46bd      	mov	sp, r7
 8006032:	bd90      	pop	{r4, r7, pc}

08006034 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006034:	b5b0      	push	{r4, r5, r7, lr}
 8006036:	b0cc      	sub	sp, #304	@ 0x130
 8006038:	af00      	add	r7, sp, #0
 800603a:	4605      	mov	r5, r0
 800603c:	460c      	mov	r4, r1
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006046:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800604a:	462a      	mov	r2, r5
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006052:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006056:	4622      	mov	r2, r4
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800605e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006062:	4602      	mov	r2, r0
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800606a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800606e:	460a      	mov	r2, r1
 8006070:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006072:	f107 0310 	add.w	r3, r7, #16
 8006076:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800607a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800607e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800608c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006090:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006094:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006098:	8812      	ldrh	r2, [r2, #0]
 800609a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800609c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060a0:	3302      	adds	r3, #2
 80060a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80060a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80060b2:	8812      	ldrh	r2, [r2, #0]
 80060b4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80060b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060ba:	3302      	adds	r3, #2
 80060bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80060c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060c8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80060d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060d4:	3301      	adds	r3, #1
 80060d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80060da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060e2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80060e6:	7812      	ldrb	r2, [r2, #0]
 80060e8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80060ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060ee:	3301      	adds	r3, #1
 80060f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80060f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060f8:	1d98      	adds	r0, r3, #6
 80060fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060fe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800610a:	f000 fac7 	bl	800669c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800610e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006112:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800611c:	4413      	add	r3, r2
 800611e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006122:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006126:	2218      	movs	r2, #24
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fac6 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006130:	233f      	movs	r3, #63	@ 0x3f
 8006132:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006136:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800613a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800613e:	f107 0310 	add.w	r3, r7, #16
 8006142:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006146:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800614a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800614e:	f107 030f 	add.w	r3, r7, #15
 8006152:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800615c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fd34 	bl	8006bd0 <hci_send_req>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	da01      	bge.n	8006172 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800616e:	23ff      	movs	r3, #255	@ 0xff
 8006170:	e004      	b.n	800617c <aci_gatt_update_char_value+0x148>
  return status;
 8006172:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006176:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800617a:	781b      	ldrb	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006182:	46bd      	mov	sp, r7
 8006184:	bdb0      	pop	{r4, r5, r7, pc}

08006186 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b0cc      	sub	sp, #304	@ 0x130
 800618a:	af00      	add	r7, sp, #0
 800618c:	4602      	mov	r2, r0
 800618e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006192:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006196:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80061a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061a8:	2200      	movs	r2, #0
 80061aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80061be:	8812      	ldrh	r2, [r2, #0]
 80061c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80061c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061c6:	3302      	adds	r3, #2
 80061c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061d0:	2218      	movs	r2, #24
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fa71 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 80061da:	233f      	movs	r3, #63	@ 0x3f
 80061dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80061e0:	f240 1325 	movw	r3, #293	@ 0x125
 80061e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80061f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80061f8:	f107 030f 	add.w	r3, r7, #15
 80061fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006200:	2301      	movs	r3, #1
 8006202:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006206:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fcdf 	bl	8006bd0 <hci_send_req>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	da01      	bge.n	800621c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006218:	23ff      	movs	r3, #255	@ 0xff
 800621a:	e004      	b.n	8006226 <aci_gatt_confirm_indication+0xa0>
  return status;
 800621c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006220:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006224:	781b      	ldrb	r3, [r3, #0]
}
 8006226:	4618      	mov	r0, r3
 8006228:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b0cc      	sub	sp, #304	@ 0x130
 8006234:	af00      	add	r7, sp, #0
 8006236:	4602      	mov	r2, r0
 8006238:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800623c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006240:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8006242:	f107 0310 	add.w	r3, r7, #16
 8006246:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800624a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800624e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800625c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006260:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006264:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800626c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006270:	3302      	adds	r3, #2
 8006272:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800627a:	2218      	movs	r2, #24
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fa1c 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006284:	233f      	movs	r3, #63	@ 0x3f
 8006286:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800628a:	f240 1327 	movw	r3, #295	@ 0x127
 800628e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800629a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800629e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80062a2:	f107 030f 	add.w	r3, r7, #15
 80062a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fc8a 	bl	8006bd0 <hci_send_req>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	da01      	bge.n	80062c6 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80062c2:	23ff      	movs	r3, #255	@ 0xff
 80062c4:	e004      	b.n	80062d0 <aci_gatt_allow_read+0xa0>
  return status;
 80062c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062ce:	781b      	ldrb	r3, [r3, #0]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b0cc      	sub	sp, #304	@ 0x130
 80062de:	af00      	add	r7, sp, #0
 80062e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80062f2:	4602      	mov	r2, r0
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80062fe:	460a      	mov	r2, r1
 8006300:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006302:	f107 0310 	add.w	r3, r7, #16
 8006306:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800630a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800630e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800631c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006320:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006324:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006328:	7812      	ldrb	r2, [r2, #0]
 800632a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800632c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006330:	3301      	adds	r3, #1
 8006332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8006336:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800633a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800633e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006346:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800634a:	3301      	adds	r3, #1
 800634c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006354:	1c98      	adds	r0, r3, #2
 8006356:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800635a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	f000 f997 	bl	800669c <Osal_MemCpy>
  index_input += Length;
 800636e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006372:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800637c:	4413      	add	r3, r2
 800637e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006386:	2218      	movs	r2, #24
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f996 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006390:	233f      	movs	r3, #63	@ 0x3f
 8006392:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006396:	230c      	movs	r3, #12
 8006398:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800639c:	f107 0310 	add.w	r3, r7, #16
 80063a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80063a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80063ac:	f107 030f 	add.w	r3, r7, #15
 80063b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fc05 	bl	8006bd0 <hci_send_req>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	da01      	bge.n	80063d0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80063cc:	23ff      	movs	r3, #255	@ 0xff
 80063ce:	e004      	b.n	80063da <aci_hal_write_config_data+0x100>
  return status;
 80063d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063d8:	781b      	ldrb	r3, [r3, #0]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b0cc      	sub	sp, #304	@ 0x130
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4602      	mov	r2, r0
 80063ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80063fe:	460a      	mov	r2, r1
 8006400:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006402:	f107 0310 	add.w	r3, r7, #16
 8006406:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800640a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800640e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006420:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006424:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006428:	7812      	ldrb	r2, [r2, #0]
 800642a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800642c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006430:	3301      	adds	r3, #1
 8006432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8006436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800643a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800643e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006446:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800644a:	3301      	adds	r3, #1
 800644c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006450:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006454:	2218      	movs	r2, #24
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f92f 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 800645e:	233f      	movs	r3, #63	@ 0x3f
 8006460:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8006464:	230f      	movs	r3, #15
 8006466:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800646a:	f107 0310 	add.w	r3, r7, #16
 800646e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006476:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800647a:	f107 030f 	add.w	r3, r7, #15
 800647e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb9e 	bl	8006bd0 <hci_send_req>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	da01      	bge.n	800649e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800649a:	23ff      	movs	r3, #255	@ 0xff
 800649c:	e004      	b.n	80064a8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800649e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064a6:	781b      	ldrb	r3, [r3, #0]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b0cc      	sub	sp, #304	@ 0x130
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	4602      	mov	r2, r0
 80064ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80064c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80064c4:	f107 0310 	add.w	r3, r7, #16
 80064c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80064cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80064de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064e6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80064ea:	8812      	ldrh	r2, [r2, #0]
 80064ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064f2:	3302      	adds	r3, #2
 80064f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064fc:	2218      	movs	r2, #24
 80064fe:	2100      	movs	r1, #0
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f8db 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006506:	233f      	movs	r3, #63	@ 0x3f
 8006508:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800650c:	2318      	movs	r3, #24
 800650e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006512:	f107 0310 	add.w	r3, r7, #16
 8006516:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800651a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800651e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006522:	f107 030f 	add.w	r3, r7, #15
 8006526:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800652a:	2301      	movs	r3, #1
 800652c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006530:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fb4a 	bl	8006bd0 <hci_send_req>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	da01      	bge.n	8006546 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006542:	23ff      	movs	r3, #255	@ 0xff
 8006544:	e004      	b.n	8006550 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800654a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800654e:	781b      	ldrb	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b088      	sub	sp, #32
 800655e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006564:	f107 0308 	add.w	r3, r7, #8
 8006568:	2218      	movs	r2, #24
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f8a5 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x03;
 8006572:	2303      	movs	r3, #3
 8006574:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006576:	2303      	movs	r3, #3
 8006578:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800657a:	1dfb      	adds	r3, r7, #7
 800657c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800657e:	2301      	movs	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fb21 	bl	8006bd0 <hci_send_req>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	da01      	bge.n	8006598 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006594:	23ff      	movs	r3, #255	@ 0xff
 8006596:	e000      	b.n	800659a <hci_reset+0x40>
  return status;
 8006598:	79fb      	ldrb	r3, [r7, #7]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80065a2:	b590      	push	{r4, r7, lr}
 80065a4:	b0cd      	sub	sp, #308	@ 0x134
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	4604      	mov	r4, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	4611      	mov	r1, r2
 80065ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065b2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80065b6:	4622      	mov	r2, r4
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80065c2:	4602      	mov	r2, r0
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ca:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80065ce:	460a      	mov	r2, r1
 80065d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80065d2:	f107 0310 	add.w	r3, r7, #16
 80065d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80065da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006600:	3301      	adds	r3, #1
 8006602:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006606:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800660a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800660e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006616:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800661a:	3301      	adds	r3, #1
 800661c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006620:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006624:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006628:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006630:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800663a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800663e:	2218      	movs	r2, #24
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f000 f83a 	bl	80066bc <Osal_MemSet>
  rq.ogf = 0x08;
 8006648:	2308      	movs	r3, #8
 800664a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800664e:	2331      	movs	r3, #49	@ 0x31
 8006650:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006654:	f107 0310 	add.w	r3, r7, #16
 8006658:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800665c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006660:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006664:	f107 030f 	add.w	r3, r7, #15
 8006668:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800666c:	2301      	movs	r3, #1
 800666e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f000 faa9 	bl	8006bd0 <hci_send_req>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	da01      	bge.n	8006688 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006684:	23ff      	movs	r3, #255	@ 0xff
 8006686:	e004      	b.n	8006692 <hci_le_set_default_phy+0xf0>
  return status;
 8006688:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800668c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006690:	781b      	ldrb	r3, [r3, #0]
}
 8006692:	4618      	mov	r0, r3
 8006694:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006698:	46bd      	mov	sp, r7
 800669a:	bd90      	pop	{r4, r7, pc}

0800669c <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f002 fba7 	bl	8008e00 <memcpy>
 80066b2:	4603      	mov	r3, r0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f002 fb6b 	bl	8008da8 <memset>
 80066d2:	4603      	mov	r3, r0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  return;
 80066e0:	bf00      	nop
}
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80066ea:	b480      	push	{r7}
 80066ec:	af00      	add	r7, sp, #0
  return;
 80066ee:	bf00      	nop
}
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return;
 80066fc:	bf00      	nop
}
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  return;
 800670a:	bf00      	nop
}
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return;
 8006718:	bf00      	nop
}
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006722:	b480      	push	{r7}
 8006724:	af00      	add	r7, sp, #0
  return;
 8006726:	bf00      	nop
}
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  return;
 8006734:	bf00      	nop
}
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800673e:	b480      	push	{r7}
 8006740:	af00      	add	r7, sp, #0
  return;
 8006742:	bf00      	nop
}
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  return;
 8006750:	bf00      	nop
}
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800675a:	b480      	push	{r7}
 800675c:	af00      	add	r7, sp, #0
  return;
 800675e:	bf00      	nop
}
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  return;
 800676c:	bf00      	nop
}
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006776:	b480      	push	{r7}
 8006778:	af00      	add	r7, sp, #0
  return;
 800677a:	bf00      	nop
}
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  return;
 8006788:	bf00      	nop
}
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006792:	b480      	push	{r7}
 8006794:	af00      	add	r7, sp, #0
  return;
 8006796:	bf00      	nop
}
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return;
 80067a4:	bf00      	nop
}
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80067ae:	b480      	push	{r7}
 80067b0:	af00      	add	r7, sp, #0
  return;
 80067b2:	bf00      	nop
}
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  return;
 80067c0:	bf00      	nop
}
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80067d0:	4b04      	ldr	r3, [pc, #16]	@ (80067e4 <SVCCTL_Init+0x18>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80067d6:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <SVCCTL_Init+0x1c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80067dc:	f000 f806 	bl	80067ec <SVCCTL_SvcInit>

  return;
 80067e0:	bf00      	nop
}
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000050 	.word	0x20000050
 80067e8:	20000070 	.word	0x20000070

080067ec <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  BAS_Init();
 80067f0:	f7ff ff74 	bl	80066dc <BAS_Init>

  BLS_Init();
 80067f4:	f7ff ff79 	bl	80066ea <BLS_Init>

  CRS_STM_Init();
 80067f8:	f7ff ff7e 	bl	80066f8 <CRS_STM_Init>

  DIS_Init();
 80067fc:	f7ff ff83 	bl	8006706 <DIS_Init>

  EDS_STM_Init();
 8006800:	f7ff ff88 	bl	8006714 <EDS_STM_Init>

  HIDS_Init();
 8006804:	f7ff ff8d 	bl	8006722 <HIDS_Init>

  HRS_Init();
 8006808:	f7ff ff92 	bl	8006730 <HRS_Init>

  HTS_Init();
 800680c:	f7ff ff97 	bl	800673e <HTS_Init>

  IAS_Init();
 8006810:	f7ff ff9c 	bl	800674c <IAS_Init>

  LLS_Init();
 8006814:	f7ff ffa1 	bl	800675a <LLS_Init>

  TPS_Init();
 8006818:	f7ff ffa6 	bl	8006768 <TPS_Init>

  MOTENV_STM_Init();
 800681c:	f7ff ffab 	bl	8006776 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006820:	f7ff ffb0 	bl	8006784 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006824:	f7ff ffb5 	bl	8006792 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006828:	f7ff ffba 	bl	80067a0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800682c:	f7ff ffc6 	bl	80067bc <BVOPUS_STM_Init>

  MESH_Init();
 8006830:	f7ff ffbd 	bl	80067ae <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006834:	f001 fcee 	bl	8008214 <SVCCTL_InitCustomSvc>
  
  return;
 8006838:	bf00      	nop
}
 800683a:	bd80      	pop	{r7, pc}

0800683c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006844:	4b09      	ldr	r3, [pc, #36]	@ (800686c <SVCCTL_RegisterSvcHandler+0x30>)
 8006846:	7f1b      	ldrb	r3, [r3, #28]
 8006848:	4619      	mov	r1, r3
 800684a:	4a08      	ldr	r2, [pc, #32]	@ (800686c <SVCCTL_RegisterSvcHandler+0x30>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006852:	4b06      	ldr	r3, [pc, #24]	@ (800686c <SVCCTL_RegisterSvcHandler+0x30>)
 8006854:	7f1b      	ldrb	r3, [r3, #28]
 8006856:	3301      	adds	r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <SVCCTL_RegisterSvcHandler+0x30>)
 800685c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800685e:	bf00      	nop
}
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000050 	.word	0x20000050

08006870 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3301      	adds	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2bff      	cmp	r3, #255	@ 0xff
 8006888:	d125      	bne.n	80068d6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3302      	adds	r3, #2
 800688e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800689a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800689e:	d118      	bne.n	80068d2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	757b      	strb	r3, [r7, #21]
 80068a4:	e00d      	b.n	80068c2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80068a6:	7d7b      	ldrb	r3, [r7, #21]
 80068a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006914 <SVCCTL_UserEvtRx+0xa4>)
 80068aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d108      	bne.n	80068ce <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80068bc:	7d7b      	ldrb	r3, [r7, #21]
 80068be:	3301      	adds	r3, #1
 80068c0:	757b      	strb	r3, [r7, #21]
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <SVCCTL_UserEvtRx+0xa4>)
 80068c4:	7f1b      	ldrb	r3, [r3, #28]
 80068c6:	7d7a      	ldrb	r2, [r7, #21]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d3ec      	bcc.n	80068a6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80068cc:	e002      	b.n	80068d4 <SVCCTL_UserEvtRx+0x64>
              break;
 80068ce:	bf00      	nop
          break;
 80068d0:	e000      	b.n	80068d4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80068d2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80068d4:	e000      	b.n	80068d8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80068d6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d00f      	beq.n	80068fe <SVCCTL_UserEvtRx+0x8e>
 80068de:	2b02      	cmp	r3, #2
 80068e0:	dc10      	bgt.n	8006904 <SVCCTL_UserEvtRx+0x94>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <SVCCTL_UserEvtRx+0x7c>
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d006      	beq.n	80068f8 <SVCCTL_UserEvtRx+0x88>
 80068ea:	e00b      	b.n	8006904 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 ff85 	bl	80077fc <SVCCTL_App_Notification>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75bb      	strb	r3, [r7, #22]
      break;
 80068f6:	e008      	b.n	800690a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80068f8:	2301      	movs	r3, #1
 80068fa:	75bb      	strb	r3, [r7, #22]
      break;
 80068fc:	e005      	b.n	800690a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80068fe:	2300      	movs	r3, #0
 8006900:	75bb      	strb	r3, [r7, #22]
      break;
 8006902:	e002      	b.n	800690a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006904:	2301      	movs	r3, #1
 8006906:	75bb      	strb	r3, [r7, #22]
      break;
 8006908:	bf00      	nop
  }

  return (return_status);
 800690a:	7dbb      	ldrb	r3, [r7, #22]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000050 	.word	0x20000050

08006918 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	212e      	movs	r1, #46	@ 0x2e
 8006930:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006934:	f000 fae8 	bl	8006f08 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	330b      	adds	r3, #11
 800693c:	78db      	ldrb	r3, [r3, #3]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b088      	sub	sp, #32
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	210f      	movs	r1, #15
 800695e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006962:	f000 fad1 	bl	8006f08 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	330b      	adds	r3, #11
 800696a:	78db      	ldrb	r3, [r3, #3]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	2110      	movs	r1, #16
 8006988:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800698c:	f000 fabc 	bl	8006f08 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	330b      	adds	r3, #11
 8006994:	78db      	ldrb	r3, [r3, #3]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b08b      	sub	sp, #44	@ 0x2c
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80069c8:	4b4a      	ldr	r3, [pc, #296]	@ (8006af4 <SHCI_GetWirelessFwInfo+0x154>)
 80069ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80069d0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80069da:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a44      	ldr	r2, [pc, #272]	@ (8006af8 <SHCI_GetWirelessFwInfo+0x158>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d10f      	bne.n	8006a0c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e01a      	b.n	8006a42 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006a14:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006a18:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	0c1b      	lsrs	r3, r3, #16
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f003 030f 	and.w	r3, r3, #15
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	0e1b      	lsrs	r3, r3, #24
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	0e1b      	lsrs	r3, r3, #24
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	0e1b      	lsrs	r3, r3, #24
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	372c      	adds	r7, #44	@ 0x2c
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	58004000 	.word	0x58004000
 8006af8:	a94656b9 	.word	0xa94656b9

08006afc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4a08      	ldr	r2, [pc, #32]	@ (8006b2c <hci_init+0x30>)
 8006b0c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006b0e:	4a08      	ldr	r2, [pc, #32]	@ (8006b30 <hci_init+0x34>)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006b14:	4806      	ldr	r0, [pc, #24]	@ (8006b30 <hci_init+0x34>)
 8006b16:	f000 f979 	bl	8006e0c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f8da 	bl	8006cd8 <TlInit>

  return;
 8006b24:	bf00      	nop
}
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000280 	.word	0x20000280
 8006b30:	20000258 	.word	0x20000258

08006b34 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006b3a:	4822      	ldr	r0, [pc, #136]	@ (8006bc4 <hci_user_evt_proc+0x90>)
 8006b3c:	f000 fd32 	bl	80075a4 <LST_is_empty>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d12b      	bne.n	8006b9e <hci_user_evt_proc+0x6a>
 8006b46:	4b20      	ldr	r3, [pc, #128]	@ (8006bc8 <hci_user_evt_proc+0x94>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d027      	beq.n	8006b9e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	4619      	mov	r1, r3
 8006b54:	481b      	ldr	r0, [pc, #108]	@ (8006bc4 <hci_user_evt_proc+0x90>)
 8006b56:	f000 fdb4 	bl	80076c2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bcc <hci_user_evt_proc+0x98>)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00c      	beq.n	8006b7c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006b66:	2301      	movs	r3, #1
 8006b68:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006b6a:	4b18      	ldr	r3, [pc, #96]	@ (8006bcc <hci_user_evt_proc+0x98>)
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	1d3a      	adds	r2, r7, #4
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006b74:	793a      	ldrb	r2, [r7, #4]
 8006b76:	4b14      	ldr	r3, [pc, #80]	@ (8006bc8 <hci_user_evt_proc+0x94>)
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006b7c:	4b12      	ldr	r3, [pc, #72]	@ (8006bc8 <hci_user_evt_proc+0x94>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006b82:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <hci_user_evt_proc+0x94>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fc0d 	bl	80073ac <TL_MM_EvtDone>
 8006b92:	e004      	b.n	8006b9e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4619      	mov	r1, r3
 8006b98:	480a      	ldr	r0, [pc, #40]	@ (8006bc4 <hci_user_evt_proc+0x90>)
 8006b9a:	f000 fd25 	bl	80075e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006b9e:	4809      	ldr	r0, [pc, #36]	@ (8006bc4 <hci_user_evt_proc+0x90>)
 8006ba0:	f000 fd00 	bl	80075a4 <LST_is_empty>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d107      	bne.n	8006bba <hci_user_evt_proc+0x86>
 8006baa:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <hci_user_evt_proc+0x94>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006bb2:	4804      	ldr	r0, [pc, #16]	@ (8006bc4 <hci_user_evt_proc+0x90>)
 8006bb4:	f001 f856 	bl	8007c64 <hci_notify_asynch_evt>
  }


  return;
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
}
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000078 	.word	0x20000078
 8006bc8:	20000084 	.word	0x20000084
 8006bcc:	20000258 	.word	0x20000258

08006bd0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f000 f8d1 	bl	8006d84 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006be2:	2300      	movs	r3, #0
 8006be4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	b21b      	sxth	r3, r3
 8006bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf0:	b21a      	sxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b21b      	sxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b21b      	sxth	r3, r3
 8006c00:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006c02:	4b33      	ldr	r3, [pc, #204]	@ (8006cd0 <hci_send_req+0x100>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	b2d9      	uxtb	r1, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	8bbb      	ldrh	r3, [r7, #28]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 f88f 	bl	8006d38 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006c1a:	e04e      	b.n	8006cba <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006c1c:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006c20:	f001 f837 	bl	8007c92 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006c24:	e043      	b.n	8006cae <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4829      	ldr	r0, [pc, #164]	@ (8006cd4 <hci_send_req+0x104>)
 8006c2e:	f000 fd48 	bl	80076c2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	7a5b      	ldrb	r3, [r3, #9]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d114      	bne.n	8006c64 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	330b      	adds	r3, #11
 8006c3e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	885b      	ldrh	r3, [r3, #2]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8bba      	ldrh	r2, [r7, #28]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d104      	bne.n	8006c56 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	785b      	ldrb	r3, [r3, #1]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d027      	beq.n	8006cae <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e024      	b.n	8006cae <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	330b      	adds	r3, #11
 8006c68:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8bba      	ldrh	r2, [r7, #28]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d114      	bne.n	8006ca2 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	7a9b      	ldrb	r3, [r3, #10]
 8006c7c:	3b03      	subs	r3, #3
 8006c7e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	bfa8      	it	ge
 8006c8a:	461a      	movge	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6918      	ldr	r0, [r3, #16]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1cd9      	adds	r1, r3, #3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f002 f8af 	bl	8008e00 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006caa:	2301      	movs	r3, #1
 8006cac:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006cae:	4809      	ldr	r0, [pc, #36]	@ (8006cd4 <hci_send_req+0x104>)
 8006cb0:	f000 fc78 	bl	80075a4 <LST_is_empty>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0b5      	beq.n	8006c26 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006cba:	7ffb      	ldrb	r3, [r7, #31]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ad      	beq.n	8006c1c <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	f000 f85f 	bl	8006d84 <NotifyCmdStatus>

  return 0;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000284 	.word	0x20000284
 8006cd4:	20000278 	.word	0x20000278

08006cd8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006ce0:	480f      	ldr	r0, [pc, #60]	@ (8006d20 <TlInit+0x48>)
 8006ce2:	f000 fc4f 	bl	8007584 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8006d24 <TlInit+0x4c>)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006cec:	480e      	ldr	r0, [pc, #56]	@ (8006d28 <TlInit+0x50>)
 8006cee:	f000 fc49 	bl	8007584 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8006d2c <TlInit+0x54>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <TlInit+0x58>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006d04:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <TlInit+0x5c>)
 8006d06:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006d08:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <TlInit+0x58>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f107 0208 	add.w	r2, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
  }

  return;
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
}
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000278 	.word	0x20000278
 8006d24:	20000080 	.word	0x20000080
 8006d28:	20000078 	.word	0x20000078
 8006d2c:	20000084 	.word	0x20000084
 8006d30:	20000258 	.word	0x20000258
 8006d34:	08006dc5 	.word	0x08006dc5

08006d38 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	603a      	str	r2, [r7, #0]
 8006d42:	80fb      	strh	r3, [r7, #6]
 8006d44:	460b      	mov	r3, r1
 8006d46:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006d48:	4b0c      	ldr	r3, [pc, #48]	@ (8006d7c <SendCmd+0x44>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	88fa      	ldrh	r2, [r7, #6]
 8006d4e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006d52:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <SendCmd+0x44>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	797a      	ldrb	r2, [r7, #5]
 8006d58:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006d5a:	4b08      	ldr	r3, [pc, #32]	@ (8006d7c <SendCmd+0x44>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	797a      	ldrb	r2, [r7, #5]
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f002 f84b 	bl	8008e00 <memcpy>

  hciContext.io.Send(0,0);
 8006d6a:	4b05      	ldr	r3, [pc, #20]	@ (8006d80 <SendCmd+0x48>)
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2000      	movs	r0, #0
 8006d72:	4798      	blx	r3

  return;
 8006d74:	bf00      	nop
}
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000080 	.word	0x20000080
 8006d80:	20000258 	.word	0x20000258

08006d84 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006d94:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <NotifyCmdStatus+0x3c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006d9c:	4b08      	ldr	r3, [pc, #32]	@ (8006dc0 <NotifyCmdStatus+0x3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2000      	movs	r0, #0
 8006da2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006da4:	e008      	b.n	8006db8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006da6:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <NotifyCmdStatus+0x3c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006dae:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <NotifyCmdStatus+0x3c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2001      	movs	r0, #1
 8006db4:	4798      	blx	r3
  return;
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
}
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000280 	.word	0x20000280

08006dc4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	7a5b      	ldrb	r3, [r3, #9]
 8006dd0:	2b0f      	cmp	r3, #15
 8006dd2:	d003      	beq.n	8006ddc <TlEvtReceived+0x18>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7a5b      	ldrb	r3, [r3, #9]
 8006dd8:	2b0e      	cmp	r3, #14
 8006dda:	d107      	bne.n	8006dec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4809      	ldr	r0, [pc, #36]	@ (8006e04 <TlEvtReceived+0x40>)
 8006de0:	f000 fc28 	bl	8007634 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006de4:	2000      	movs	r0, #0
 8006de6:	f000 ff49 	bl	8007c7c <hci_cmd_resp_release>
 8006dea:	e006      	b.n	8006dfa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4806      	ldr	r0, [pc, #24]	@ (8006e08 <TlEvtReceived+0x44>)
 8006df0:	f000 fc20 	bl	8007634 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006df4:	4804      	ldr	r0, [pc, #16]	@ (8006e08 <TlEvtReceived+0x44>)
 8006df6:	f000 ff35 	bl	8007c64 <hci_notify_asynch_evt>
  }

  return;
 8006dfa:	bf00      	nop
}
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000278 	.word	0x20000278
 8006e08:	20000078 	.word	0x20000078

08006e0c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a05      	ldr	r2, [pc, #20]	@ (8006e2c <hci_register_io_bus+0x20>)
 8006e18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a04      	ldr	r2, [pc, #16]	@ (8006e30 <hci_register_io_bus+0x24>)
 8006e1e:	611a      	str	r2, [r3, #16]

  return;
 8006e20:	bf00      	nop
}
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	08007125 	.word	0x08007125
 8006e30:	0800718d 	.word	0x0800718d

08006e34 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	4a08      	ldr	r2, [pc, #32]	@ (8006e64 <shci_init+0x30>)
 8006e44:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006e46:	4a08      	ldr	r2, [pc, #32]	@ (8006e68 <shci_init+0x34>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006e4c:	4806      	ldr	r0, [pc, #24]	@ (8006e68 <shci_init+0x34>)
 8006e4e:	f000 f915 	bl	800707c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f898 	bl	8006f8c <TlInit>

  return;
 8006e5c:	bf00      	nop
}
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	200002a8 	.word	0x200002a8
 8006e68:	20000288 	.word	0x20000288

08006e6c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006e72:	4822      	ldr	r0, [pc, #136]	@ (8006efc <shci_user_evt_proc+0x90>)
 8006e74:	f000 fb96 	bl	80075a4 <LST_is_empty>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d12b      	bne.n	8006ed6 <shci_user_evt_proc+0x6a>
 8006e7e:	4b20      	ldr	r3, [pc, #128]	@ (8006f00 <shci_user_evt_proc+0x94>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d027      	beq.n	8006ed6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	481b      	ldr	r0, [pc, #108]	@ (8006efc <shci_user_evt_proc+0x90>)
 8006e8e:	f000 fc18 	bl	80076c2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006e92:	4b1c      	ldr	r3, [pc, #112]	@ (8006f04 <shci_user_evt_proc+0x98>)
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006ea2:	4b18      	ldr	r3, [pc, #96]	@ (8006f04 <shci_user_evt_proc+0x98>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	1d3a      	adds	r2, r7, #4
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006eac:	793a      	ldrb	r2, [r7, #4]
 8006eae:	4b14      	ldr	r3, [pc, #80]	@ (8006f00 <shci_user_evt_proc+0x94>)
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006eb4:	4b12      	ldr	r3, [pc, #72]	@ (8006f00 <shci_user_evt_proc+0x94>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006eba:	4b11      	ldr	r3, [pc, #68]	@ (8006f00 <shci_user_evt_proc+0x94>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa71 	bl	80073ac <TL_MM_EvtDone>
 8006eca:	e004      	b.n	8006ed6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	480a      	ldr	r0, [pc, #40]	@ (8006efc <shci_user_evt_proc+0x90>)
 8006ed2:	f000 fb89 	bl	80075e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ed6:	4809      	ldr	r0, [pc, #36]	@ (8006efc <shci_user_evt_proc+0x90>)
 8006ed8:	f000 fb64 	bl	80075a4 <LST_is_empty>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <shci_user_evt_proc+0x86>
 8006ee2:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <shci_user_evt_proc+0x94>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006eea:	4804      	ldr	r0, [pc, #16]	@ (8006efc <shci_user_evt_proc+0x90>)
 8006eec:	f7f9 fbb3 	bl	8000656 <shci_notify_asynch_evt>
  }


  return;
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
}
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000088 	.word	0x20000088
 8006f00:	20000098 	.word	0x20000098
 8006f04:	20000288 	.word	0x20000288

08006f08 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60ba      	str	r2, [r7, #8]
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	4603      	mov	r3, r0
 8006f14:	81fb      	strh	r3, [r7, #14]
 8006f16:	460b      	mov	r3, r1
 8006f18:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	f000 f868 	bl	8006ff0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006f20:	4b17      	ldr	r3, [pc, #92]	@ (8006f80 <shci_send+0x78>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	89fa      	ldrh	r2, [r7, #14]
 8006f26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006f2a:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <shci_send+0x78>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	7b7a      	ldrb	r2, [r7, #13]
 8006f30:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006f32:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <shci_send+0x78>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 ff5f 	bl	8008e00 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <shci_send+0x7c>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <shci_send+0x80>)
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006f52:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006f56:	f7f9 fb95 	bl	8000684 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f103 0008 	add.w	r0, r3, #8
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <shci_send+0x78>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <shci_send+0x78>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	789b      	ldrb	r3, [r3, #2]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f001 ff47 	bl	8008e00 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006f72:	2001      	movs	r0, #1
 8006f74:	f000 f83c 	bl	8006ff0 <Cmd_SetStatus>

  return;
 8006f78:	bf00      	nop
}
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000094 	.word	0x20000094
 8006f84:	200002ac 	.word	0x200002ac
 8006f88:	20000288 	.word	0x20000288

08006f8c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006f94:	4a10      	ldr	r2, [pc, #64]	@ (8006fd8 <TlInit+0x4c>)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006f9a:	4810      	ldr	r0, [pc, #64]	@ (8006fdc <TlInit+0x50>)
 8006f9c:	f000 faf2 	bl	8007584 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	f000 f825 	bl	8006ff0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <TlInit+0x54>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <TlInit+0x58>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <TlInit+0x5c>)
 8006fba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006fec <TlInit+0x60>)
 8006fbe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006fc0:	4b08      	ldr	r3, [pc, #32]	@ (8006fe4 <TlInit+0x58>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f107 020c 	add.w	r2, r7, #12
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
  }

  return;
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
}
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000094 	.word	0x20000094
 8006fdc:	20000088 	.word	0x20000088
 8006fe0:	20000098 	.word	0x20000098
 8006fe4:	20000288 	.word	0x20000288
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007059 	.word	0x08007059

08006ff0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007000:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <Cmd_SetStatus+0x48>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007008:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <Cmd_SetStatus+0x48>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2000      	movs	r0, #0
 800700e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007010:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <Cmd_SetStatus+0x4c>)
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007016:	e00b      	b.n	8007030 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007018:	4b08      	ldr	r3, [pc, #32]	@ (800703c <Cmd_SetStatus+0x4c>)
 800701a:	2201      	movs	r2, #1
 800701c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <Cmd_SetStatus+0x48>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007026:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <Cmd_SetStatus+0x48>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2001      	movs	r0, #1
 800702c:	4798      	blx	r3
  return;
 800702e:	bf00      	nop
 8007030:	bf00      	nop
}
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	200002a8 	.word	0x200002a8
 800703c:	20000090 	.word	0x20000090

08007040 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007048:	2000      	movs	r0, #0
 800704a:	f7f9 fb10 	bl	800066e <shci_cmd_resp_release>

  return;
 800704e:	bf00      	nop
}
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4805      	ldr	r0, [pc, #20]	@ (8007078 <TlUserEvtReceived+0x20>)
 8007064:	f000 fae6 	bl	8007634 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007068:	4803      	ldr	r0, [pc, #12]	@ (8007078 <TlUserEvtReceived+0x20>)
 800706a:	f7f9 faf4 	bl	8000656 <shci_notify_asynch_evt>

  return;
 800706e:	bf00      	nop
}
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000088 	.word	0x20000088

0800707c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a05      	ldr	r2, [pc, #20]	@ (800709c <shci_register_io_bus+0x20>)
 8007088:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a04      	ldr	r2, [pc, #16]	@ (80070a0 <shci_register_io_bus+0x24>)
 800708e:	611a      	str	r2, [r3, #16]

  return;
 8007090:	bf00      	nop
}
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	08007239 	.word	0x08007239
 80070a0:	0800728d 	.word	0x0800728d

080070a4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80070a8:	f001 fac6 	bl	8008638 <HW_IPCC_Enable>

  return;
 80070ac:	bf00      	nop
}
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <TL_Init>:


void TL_Init( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80070b4:	4b10      	ldr	r3, [pc, #64]	@ (80070f8 <TL_Init+0x48>)
 80070b6:	4a11      	ldr	r2, [pc, #68]	@ (80070fc <TL_Init+0x4c>)
 80070b8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80070ba:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <TL_Init+0x48>)
 80070bc:	4a10      	ldr	r2, [pc, #64]	@ (8007100 <TL_Init+0x50>)
 80070be:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80070c0:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <TL_Init+0x48>)
 80070c2:	4a10      	ldr	r2, [pc, #64]	@ (8007104 <TL_Init+0x54>)
 80070c4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80070c6:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <TL_Init+0x48>)
 80070c8:	4a0f      	ldr	r2, [pc, #60]	@ (8007108 <TL_Init+0x58>)
 80070ca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <TL_Init+0x48>)
 80070ce:	4a0f      	ldr	r2, [pc, #60]	@ (800710c <TL_Init+0x5c>)
 80070d0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80070d2:	4b09      	ldr	r3, [pc, #36]	@ (80070f8 <TL_Init+0x48>)
 80070d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007110 <TL_Init+0x60>)
 80070d6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80070d8:	4b07      	ldr	r3, [pc, #28]	@ (80070f8 <TL_Init+0x48>)
 80070da:	4a0e      	ldr	r2, [pc, #56]	@ (8007114 <TL_Init+0x64>)
 80070dc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80070de:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <TL_Init+0x48>)
 80070e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007118 <TL_Init+0x68>)
 80070e2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <TL_Init+0x48>)
 80070e6:	4a0d      	ldr	r2, [pc, #52]	@ (800711c <TL_Init+0x6c>)
 80070e8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80070ea:	4b03      	ldr	r3, [pc, #12]	@ (80070f8 <TL_Init+0x48>)
 80070ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007120 <TL_Init+0x70>)
 80070ee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80070f0:	f001 fab6 	bl	8008660 <HW_IPCC_Init>

  return;
 80070f4:	bf00      	nop
}
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20030000 	.word	0x20030000
 80070fc:	20030028 	.word	0x20030028
 8007100:	20030048 	.word	0x20030048
 8007104:	20030058 	.word	0x20030058
 8007108:	20030068 	.word	0x20030068
 800710c:	20030070 	.word	0x20030070
 8007110:	20030078 	.word	0x20030078
 8007114:	20030080 	.word	0x20030080
 8007118:	2003009c 	.word	0x2003009c
 800711c:	200300a0 	.word	0x200300a0
 8007120:	200300ac 	.word	0x200300ac

08007124 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007130:	4811      	ldr	r0, [pc, #68]	@ (8007178 <TL_BLE_Init+0x54>)
 8007132:	f000 fa27 	bl	8007584 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007136:	4b11      	ldr	r3, [pc, #68]	@ (800717c <TL_BLE_Init+0x58>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4a0c      	ldr	r2, [pc, #48]	@ (8007180 <TL_BLE_Init+0x5c>)
 8007150:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4a08      	ldr	r2, [pc, #32]	@ (8007178 <TL_BLE_Init+0x54>)
 8007156:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007158:	f001 fa98 	bl	800868c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a08      	ldr	r2, [pc, #32]	@ (8007184 <TL_BLE_Init+0x60>)
 8007162:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4a07      	ldr	r2, [pc, #28]	@ (8007188 <TL_BLE_Init+0x64>)
 800716a:	6013      	str	r3, [r2, #0]

  return 0;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	200300c8 	.word	0x200300c8
 800717c:	20030000 	.word	0x20030000
 8007180:	20030a58 	.word	0x20030a58
 8007184:	200002b8 	.word	0x200002b8
 8007188:	200002bc 	.word	0x200002bc

0800718c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007198:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <TL_BLE_SendCmd+0x34>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80071a2:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <TL_BLE_SendCmd+0x34>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4619      	mov	r1, r3
 80071aa:	2001      	movs	r0, #1
 80071ac:	f000 f96c 	bl	8007488 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80071b0:	f001 fa86 	bl	80086c0 <HW_IPCC_BLE_SendCmd>

  return 0;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20030000 	.word	0x20030000

080071c4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80071ca:	e01c      	b.n	8007206 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4812      	ldr	r0, [pc, #72]	@ (800721c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80071d2:	f000 fa76 	bl	80076c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7a5b      	ldrb	r3, [r3, #9]
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d003      	beq.n	80071e6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7a5b      	ldrb	r3, [r3, #9]
 80071e2:	2b0e      	cmp	r3, #14
 80071e4:	d105      	bne.n	80071f2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	2002      	movs	r0, #2
 80071ec:	f000 f94c 	bl	8007488 <OutputDbgTrace>
 80071f0:	e004      	b.n	80071fc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	2003      	movs	r0, #3
 80071f8:	f000 f946 	bl	8007488 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80071fc:	4b08      	ldr	r3, [pc, #32]	@ (8007220 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4610      	mov	r0, r2
 8007204:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007206:	4805      	ldr	r0, [pc, #20]	@ (800721c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007208:	f000 f9cc 	bl	80075a4 <LST_is_empty>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0dc      	beq.n	80071cc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007212:	bf00      	nop
}
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200300c8 	.word	0x200300c8
 8007220:	200002b8 	.word	0x200002b8

08007224 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007228:	4b02      	ldr	r3, [pc, #8]	@ (8007234 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4798      	blx	r3

  return;
 800722e:	bf00      	nop
}
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	200002bc 	.word	0x200002bc

08007238 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007244:	480d      	ldr	r0, [pc, #52]	@ (800727c <TL_SYS_Init+0x44>)
 8007246:	f000 f99d 	bl	8007584 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <TL_SYS_Init+0x48>)
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4a08      	ldr	r2, [pc, #32]	@ (800727c <TL_SYS_Init+0x44>)
 800725c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800725e:	f001 fa61 	bl	8008724 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a07      	ldr	r2, [pc, #28]	@ (8007284 <TL_SYS_Init+0x4c>)
 8007268:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4a06      	ldr	r2, [pc, #24]	@ (8007288 <TL_SYS_Init+0x50>)
 8007270:	6013      	str	r3, [r2, #0]

  return 0;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	200300d0 	.word	0x200300d0
 8007280:	20030000 	.word	0x20030000
 8007284:	200002c0 	.word	0x200002c0
 8007288:	200002c4 	.word	0x200002c4

0800728c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007298:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <TL_SYS_SendCmd+0x34>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2210      	movs	r2, #16
 80072a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80072a2:	4b07      	ldr	r3, [pc, #28]	@ (80072c0 <TL_SYS_SendCmd+0x34>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	2004      	movs	r0, #4
 80072ac:	f000 f8ec 	bl	8007488 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80072b0:	f001 fa52 	bl	8008758 <HW_IPCC_SYS_SendCmd>

  return 0;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20030000 	.word	0x20030000

080072c4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80072c8:	4b07      	ldr	r3, [pc, #28]	@ (80072e8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4619      	mov	r1, r3
 80072d0:	2005      	movs	r0, #5
 80072d2:	f000 f8d9 	bl	8007488 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80072d6:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a03      	ldr	r2, [pc, #12]	@ (80072e8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80072dc:	68d2      	ldr	r2, [r2, #12]
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3

  return;
 80072e4:	bf00      	nop
}
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20030000 	.word	0x20030000
 80072ec:	200002c0 	.word	0x200002c0

080072f0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80072f6:	e00e      	b.n	8007316 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	480b      	ldr	r0, [pc, #44]	@ (800732c <HW_IPCC_SYS_EvtNot+0x3c>)
 80072fe:	f000 f9e0 	bl	80076c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4619      	mov	r1, r3
 8007306:	2006      	movs	r0, #6
 8007308:	f000 f8be 	bl	8007488 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800730c:	4b08      	ldr	r3, [pc, #32]	@ (8007330 <HW_IPCC_SYS_EvtNot+0x40>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4610      	mov	r0, r2
 8007314:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007316:	4805      	ldr	r0, [pc, #20]	@ (800732c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007318:	f000 f944 	bl	80075a4 <LST_is_empty>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0ea      	beq.n	80072f8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007322:	bf00      	nop
}
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200300d0 	.word	0x200300d0
 8007330:	200002c4 	.word	0x200002c4

08007334 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800733c:	4817      	ldr	r0, [pc, #92]	@ (800739c <TL_MM_Init+0x68>)
 800733e:	f000 f921 	bl	8007584 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007342:	4817      	ldr	r0, [pc, #92]	@ (80073a0 <TL_MM_Init+0x6c>)
 8007344:	f000 f91e 	bl	8007584 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007348:	4b16      	ldr	r3, [pc, #88]	@ (80073a4 <TL_MM_Init+0x70>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	4a16      	ldr	r2, [pc, #88]	@ (80073a8 <TL_MM_Init+0x74>)
 800734e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007350:	4b15      	ldr	r3, [pc, #84]	@ (80073a8 <TL_MM_Init+0x74>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6892      	ldr	r2, [r2, #8]
 8007358:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800735a:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <TL_MM_Init+0x74>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	68d2      	ldr	r2, [r2, #12]
 8007362:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007364:	4b10      	ldr	r3, [pc, #64]	@ (80073a8 <TL_MM_Init+0x74>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a0c      	ldr	r2, [pc, #48]	@ (800739c <TL_MM_Init+0x68>)
 800736a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800736c:	4b0e      	ldr	r3, [pc, #56]	@ (80073a8 <TL_MM_Init+0x74>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007376:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <TL_MM_Init+0x74>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6852      	ldr	r2, [r2, #4]
 800737e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007380:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <TL_MM_Init+0x74>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6912      	ldr	r2, [r2, #16]
 8007388:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800738a:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <TL_MM_Init+0x74>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6952      	ldr	r2, [r2, #20]
 8007392:	619a      	str	r2, [r3, #24]

  return;
 8007394:	bf00      	nop
}
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	200300b8 	.word	0x200300b8
 80073a0:	200002b0 	.word	0x200002b0
 80073a4:	20030000 	.word	0x20030000
 80073a8:	200002c8 	.word	0x200002c8

080073ac <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4807      	ldr	r0, [pc, #28]	@ (80073d4 <TL_MM_EvtDone+0x28>)
 80073b8:	f000 f93c 	bl	8007634 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	2000      	movs	r0, #0
 80073c0:	f000 f862 	bl	8007488 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80073c4:	4804      	ldr	r0, [pc, #16]	@ (80073d8 <TL_MM_EvtDone+0x2c>)
 80073c6:	f001 fa0d 	bl	80087e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80073ca:	bf00      	nop
}
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200002b0 	.word	0x200002b0
 80073d8:	080073dd 	.word	0x080073dd

080073dc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80073e2:	e00c      	b.n	80073fe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80073e4:	1d3b      	adds	r3, r7, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	480a      	ldr	r0, [pc, #40]	@ (8007414 <SendFreeBuf+0x38>)
 80073ea:	f000 f96a 	bl	80076c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80073ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <SendFreeBuf+0x3c>)
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f91b 	bl	8007634 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80073fe:	4805      	ldr	r0, [pc, #20]	@ (8007414 <SendFreeBuf+0x38>)
 8007400:	f000 f8d0 	bl	80075a4 <LST_is_empty>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0ec      	beq.n	80073e4 <SendFreeBuf+0x8>
  }

  return;
 800740a:	bf00      	nop
}
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200002b0 	.word	0x200002b0
 8007418:	20030000 	.word	0x20030000

0800741c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007420:	4805      	ldr	r0, [pc, #20]	@ (8007438 <TL_TRACES_Init+0x1c>)
 8007422:	f000 f8af 	bl	8007584 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007426:	4b05      	ldr	r3, [pc, #20]	@ (800743c <TL_TRACES_Init+0x20>)
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	4a03      	ldr	r2, [pc, #12]	@ (8007438 <TL_TRACES_Init+0x1c>)
 800742c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800742e:	f001 fa2b 	bl	8008888 <HW_IPCC_TRACES_Init>

  return;
 8007432:	bf00      	nop
}
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200300c0 	.word	0x200300c0
 800743c:	20030000 	.word	0x20030000

08007440 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007446:	e008      	b.n	800745a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007448:	1d3b      	adds	r3, r7, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4808      	ldr	r0, [pc, #32]	@ (8007470 <HW_IPCC_TRACES_EvtNot+0x30>)
 800744e:	f000 f938 	bl	80076c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f80d 	bl	8007474 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800745a:	4805      	ldr	r0, [pc, #20]	@ (8007470 <HW_IPCC_TRACES_EvtNot+0x30>)
 800745c:	f000 f8a2 	bl	80075a4 <LST_is_empty>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007466:	bf00      	nop
}
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	200300c0 	.word	0x200300c0

08007474 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	2b06      	cmp	r3, #6
 8007498:	d845      	bhi.n	8007526 <OutputDbgTrace+0x9e>
 800749a:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <OutputDbgTrace+0x18>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074bd 	.word	0x080074bd
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074e7 	.word	0x080074e7
 80074ac:	080074fb 	.word	0x080074fb
 80074b0:	08007507 	.word	0x08007507
 80074b4:	0800750d 	.word	0x0800750d
 80074b8:	0800751b 	.word	0x0800751b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	7a5b      	ldrb	r3, [r3, #9]
 80074c4:	2bff      	cmp	r3, #255	@ 0xff
 80074c6:	d005      	beq.n	80074d4 <OutputDbgTrace+0x4c>
 80074c8:	2bff      	cmp	r3, #255	@ 0xff
 80074ca:	dc05      	bgt.n	80074d8 <OutputDbgTrace+0x50>
 80074cc:	2b0e      	cmp	r3, #14
 80074ce:	d005      	beq.n	80074dc <OutputDbgTrace+0x54>
 80074d0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80074d2:	e001      	b.n	80074d8 <OutputDbgTrace+0x50>
          break;
 80074d4:	bf00      	nop
 80074d6:	e027      	b.n	8007528 <OutputDbgTrace+0xa0>
          break;
 80074d8:	bf00      	nop
 80074da:	e025      	b.n	8007528 <OutputDbgTrace+0xa0>
          break;
 80074dc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80074de:	e023      	b.n	8007528 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80074e4:	e020      	b.n	8007528 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	7a5b      	ldrb	r3, [r3, #9]
 80074ee:	2b0e      	cmp	r3, #14
 80074f0:	d001      	beq.n	80074f6 <OutputDbgTrace+0x6e>
 80074f2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80074f4:	e000      	b.n	80074f8 <OutputDbgTrace+0x70>
          break;
 80074f6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80074f8:	e016      	b.n	8007528 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	7a5b      	ldrb	r3, [r3, #9]
 8007502:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007504:	e010      	b.n	8007528 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800750a:	e00d      	b.n	8007528 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007516:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007518:	e006      	b.n	8007528 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	7a5b      	ldrb	r3, [r3, #9]
 8007522:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007524:	e000      	b.n	8007528 <OutputDbgTrace+0xa0>

    default:
      break;
 8007526:	bf00      	nop
  }

  return;
 8007528:	bf00      	nop
}
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800753e:	4b0f      	ldr	r3, [pc, #60]	@ (800757c <OTP_Read+0x48>)
 8007540:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007542:	e002      	b.n	800754a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3b08      	subs	r3, #8
 8007548:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3307      	adds	r3, #7
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	79fa      	ldrb	r2, [r7, #7]
 8007552:	429a      	cmp	r2, r3
 8007554:	d003      	beq.n	800755e <OTP_Read+0x2a>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4a09      	ldr	r2, [pc, #36]	@ (8007580 <OTP_Read+0x4c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d1f2      	bne.n	8007544 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3307      	adds	r3, #7
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	79fa      	ldrb	r2, [r7, #7]
 8007566:	429a      	cmp	r2, r3
 8007568:	d001      	beq.n	800756e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	1fff73f8 	.word	0x1fff73f8
 8007580:	1fff7000 	.word	0x1fff7000

08007584 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	605a      	str	r2, [r3, #4]
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ac:	f3ef 8310 	mrs	r3, PRIMASK
 80075b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80075b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80075b6:	b672      	cpsid	i
}
 80075b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d102      	bne.n	80075ca <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80075c4:	2301      	movs	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
 80075c8:	e001      	b.n	80075ce <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075f2:	f3ef 8310 	mrs	r3, PRIMASK
 80075f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80075f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075fc:	b672      	cpsid	i
}
 80075fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	605a      	str	r2, [r3, #4]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f383 8810 	msr	PRIMASK, r3
}
 8007626:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763e:	f3ef 8310 	mrs	r3, PRIMASK
 8007642:	60fb      	str	r3, [r7, #12]
  return(result);
 8007644:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007648:	b672      	cpsid	i
}
 800764a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f383 8810 	msr	PRIMASK, r3
}
 8007672:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007674:	bf00      	nop
 8007676:	371c      	adds	r7, #28
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007688:	f3ef 8310 	mrs	r3, PRIMASK
 800768c:	60fb      	str	r3, [r7, #12]
  return(result);
 800768e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007692:	b672      	cpsid	i
}
 8007694:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6852      	ldr	r2, [r2, #4]
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f383 8810 	msr	PRIMASK, r3
}
 80076b4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076cc:	f3ef 8310 	mrs	r3, PRIMASK
 80076d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076d6:	b672      	cpsid	i
}
 80076d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff ffca 	bl	8007680 <LST_remove_node>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f383 8810 	msr	PRIMASK, r3
}
 80076f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076f8:	bf00      	nop
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007704:	4b03      	ldr	r3, [pc, #12]	@ (8007714 <LL_FLASH_GetUDN+0x14>)
 8007706:	681b      	ldr	r3, [r3, #0]
}
 8007708:	4618      	mov	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	1fff7580 	.word	0x1fff7580

08007718 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800771c:	4b03      	ldr	r3, [pc, #12]	@ (800772c <LL_FLASH_GetDeviceID+0x14>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
}
 8007722:	4618      	mov	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	1fff7584 	.word	0x1fff7584

08007730 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007734:	4b03      	ldr	r3, [pc, #12]	@ (8007744 <LL_FLASH_GetSTCompanyID+0x14>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	0a1b      	lsrs	r3, r3, #8
}
 800773a:	4618      	mov	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	1fff7584 	.word	0x1fff7584

08007748 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b090      	sub	sp, #64	@ 0x40
 800774c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800774e:	2392      	movs	r3, #146	@ 0x92
 8007750:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007754:	4b25      	ldr	r3, [pc, #148]	@ (80077ec <APP_BLE_Init+0xa4>)
 8007756:	1d3c      	adds	r4, r7, #4
 8007758:	461d      	mov	r5, r3
 800775a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800775c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800775e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800776a:	c403      	stmia	r4!, {r0, r1}
 800776c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800776e:	f000 f921 	bl	80079b4 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007772:	2101      	movs	r1, #1
 8007774:	2002      	movs	r0, #2
 8007776:	f001 f8bf 	bl	80088f8 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800777a:	4a1d      	ldr	r2, [pc, #116]	@ (80077f0 <APP_BLE_Init+0xa8>)
 800777c:	2100      	movs	r1, #0
 800777e:	2002      	movs	r0, #2
 8007780:	f001 f9e6 	bl	8008b50 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007784:	1d3b      	adds	r3, r7, #4
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff f8c6 	bl	8006918 <SHCI_C2_BLE_Init>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007792:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800779a:	f7fa fab8 	bl	8001d0e <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800779e:	f000 f91f 	bl	80079e0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80077a2:	f7ff f813 	bl	80067cc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80077a6:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <APP_BLE_Init+0xac>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80077ae:	4b11      	ldr	r3, [pc, #68]	@ (80077f4 <APP_BLE_Init+0xac>)
 80077b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077b4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80077b6:	4a10      	ldr	r2, [pc, #64]	@ (80077f8 <APP_BLE_Init+0xb0>)
 80077b8:	2100      	movs	r1, #0
 80077ba:	2001      	movs	r0, #1
 80077bc:	f001 f9c8 	bl	8008b50 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80077c0:	2006      	movs	r0, #6
 80077c2:	f7fe fe76 	bl	80064b2 <aci_hal_set_radio_activity_mask>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80077cc:	f000 fb12 	bl	8007df4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80077d0:	4b08      	ldr	r3, [pc, #32]	@ (80077f4 <APP_BLE_Init+0xac>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80077d6:	4b07      	ldr	r3, [pc, #28]	@ (80077f4 <APP_BLE_Init+0xac>)
 80077d8:	2200      	movs	r2, #0
 80077da:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80077dc:	2001      	movs	r0, #1
 80077de:	f000 f9b3 	bl	8007b48 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80077e2:	bf00      	nop
}
 80077e4:	3740      	adds	r7, #64	@ 0x40
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bdb0      	pop	{r4, r5, r7, pc}
 80077ea:	bf00      	nop
 80077ec:	08008e70 	.word	0x08008e70
 80077f0:	08006b35 	.word	0x08006b35
 80077f4:	200002d4 	.word	0x200002d4
 80077f8:	08007c31 	.word	0x08007c31

080077fc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08c      	sub	sp, #48	@ 0x30
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007804:	2392      	movs	r3, #146	@ 0x92
 8007806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3301      	adds	r3, #1
 800780e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2bff      	cmp	r3, #255	@ 0xff
 8007816:	d05c      	beq.n	80078d2 <SVCCTL_App_Notification+0xd6>
 8007818:	2bff      	cmp	r3, #255	@ 0xff
 800781a:	f300 80bd 	bgt.w	8007998 <SVCCTL_App_Notification+0x19c>
 800781e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007820:	d02b      	beq.n	800787a <SVCCTL_App_Notification+0x7e>
 8007822:	2b3e      	cmp	r3, #62	@ 0x3e
 8007824:	f300 80b8 	bgt.w	8007998 <SVCCTL_App_Notification+0x19c>
 8007828:	2b05      	cmp	r3, #5
 800782a:	d002      	beq.n	8007832 <SVCCTL_App_Notification+0x36>
 800782c:	2b10      	cmp	r3, #16
 800782e:	d020      	beq.n	8007872 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007830:	e0b2      	b.n	8007998 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	3302      	adds	r3, #2
 8007836:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800783e:	b29a      	uxth	r2, r3
 8007840:	4b59      	ldr	r3, [pc, #356]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 8007842:	8adb      	ldrh	r3, [r3, #22]
 8007844:	429a      	cmp	r2, r3
 8007846:	d106      	bne.n	8007856 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007848:	4b57      	ldr	r3, [pc, #348]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 800784a:	2200      	movs	r2, #0
 800784c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800784e:	4b56      	ldr	r3, [pc, #344]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007856:	2001      	movs	r0, #1
 8007858:	f000 f976 	bl	8007b48 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800785c:	4b53      	ldr	r3, [pc, #332]	@ (80079ac <SVCCTL_App_Notification+0x1b0>)
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007862:	4b51      	ldr	r3, [pc, #324]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 8007864:	8ada      	ldrh	r2, [r3, #22]
 8007866:	4b51      	ldr	r3, [pc, #324]	@ (80079ac <SVCCTL_App_Notification+0x1b0>)
 8007868:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800786a:	4850      	ldr	r0, [pc, #320]	@ (80079ac <SVCCTL_App_Notification+0x1b0>)
 800786c:	f000 fa9c 	bl	8007da8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007870:	e095      	b.n	800799e <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	3302      	adds	r3, #2
 8007876:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007878:	e091      	b.n	800799e <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	3302      	adds	r3, #2
 800787e:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d001      	beq.n	800788c <SVCCTL_App_Notification+0x90>
 8007888:	2b03      	cmp	r3, #3
          break;
 800788a:	e021      	b.n	80078d0 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	3301      	adds	r3, #1
 8007890:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007892:	4b45      	ldr	r3, [pc, #276]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 8007894:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007898:	2b04      	cmp	r3, #4
 800789a:	d104      	bne.n	80078a6 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800789c:	4b42      	ldr	r3, [pc, #264]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 800789e:	2206      	movs	r2, #6
 80078a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80078a4:	e003      	b.n	80078ae <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80078a6:	4b40      	ldr	r3, [pc, #256]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 80078a8:	2205      	movs	r2, #5
 80078aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	4b3c      	ldr	r3, [pc, #240]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 80078b8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80078ba:	4b3c      	ldr	r3, [pc, #240]	@ (80079ac <SVCCTL_App_Notification+0x1b0>)
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80078c0:	4b39      	ldr	r3, [pc, #228]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 80078c2:	8ada      	ldrh	r2, [r3, #22]
 80078c4:	4b39      	ldr	r3, [pc, #228]	@ (80079ac <SVCCTL_App_Notification+0x1b0>)
 80078c6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80078c8:	4838      	ldr	r0, [pc, #224]	@ (80079ac <SVCCTL_App_Notification+0x1b0>)
 80078ca:	f000 fa6d 	bl	8007da8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80078ce:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80078d0:	e065      	b.n	800799e <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	3302      	adds	r3, #2
 80078d6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d048      	beq.n	8007978 <SVCCTL_App_Notification+0x17c>
 80078e6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80078ea:	4293      	cmp	r3, r2
 80078ec:	dc56      	bgt.n	800799c <SVCCTL_App_Notification+0x1a0>
 80078ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f2:	d04b      	beq.n	800798c <SVCCTL_App_Notification+0x190>
 80078f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f8:	dc50      	bgt.n	800799c <SVCCTL_App_Notification+0x1a0>
 80078fa:	f240 420a 	movw	r2, #1034	@ 0x40a
 80078fe:	4293      	cmp	r3, r2
 8007900:	dc4c      	bgt.n	800799c <SVCCTL_App_Notification+0x1a0>
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007906:	dc04      	bgt.n	8007912 <SVCCTL_App_Notification+0x116>
 8007908:	2b04      	cmp	r3, #4
 800790a:	d041      	beq.n	8007990 <SVCCTL_App_Notification+0x194>
 800790c:	2b06      	cmp	r3, #6
 800790e:	d039      	beq.n	8007984 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007910:	e044      	b.n	800799c <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8007912:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007916:	2b09      	cmp	r3, #9
 8007918:	d840      	bhi.n	800799c <SVCCTL_App_Notification+0x1a0>
 800791a:	a201      	add	r2, pc, #4	@ (adr r2, 8007920 <SVCCTL_App_Notification+0x124>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007971 	.word	0x08007971
 8007924:	08007949 	.word	0x08007949
 8007928:	0800799d 	.word	0x0800799d
 800792c:	0800799d 	.word	0x0800799d
 8007930:	0800799d 	.word	0x0800799d
 8007934:	0800799d 	.word	0x0800799d
 8007938:	08007995 	.word	0x08007995
 800793c:	0800799d 	.word	0x0800799d
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007995 	.word	0x08007995
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007948:	4b17      	ldr	r3, [pc, #92]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 800794a:	8adb      	ldrh	r3, [r3, #22]
 800794c:	4918      	ldr	r1, [pc, #96]	@ (80079b0 <SVCCTL_App_Notification+0x1b4>)
 800794e:	4618      	mov	r0, r3
 8007950:	f7fd fef2 	bl	8005738 <aci_gap_pass_key_resp>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800795a:	e01c      	b.n	8007996 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800795c:	4b12      	ldr	r3, [pc, #72]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 800795e:	8adb      	ldrh	r3, [r3, #22]
 8007960:	2101      	movs	r1, #1
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe f8fc 	bl	8005b60 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800796e:	e012      	b.n	8007996 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	3302      	adds	r3, #2
 8007974:	623b      	str	r3, [r7, #32]
          break;
 8007976:	e00e      	b.n	8007996 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007978:	4b0b      	ldr	r3, [pc, #44]	@ (80079a8 <SVCCTL_App_Notification+0x1ac>)
 800797a:	8adb      	ldrh	r3, [r3, #22]
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fc02 	bl	8006186 <aci_gatt_confirm_indication>
        break;
 8007982:	e008      	b.n	8007996 <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	3302      	adds	r3, #2
 8007988:	61fb      	str	r3, [r7, #28]
          break;
 800798a:	e004      	b.n	8007996 <SVCCTL_App_Notification+0x19a>
          break;
 800798c:	bf00      	nop
 800798e:	e005      	b.n	800799c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007990:	bf00      	nop
 8007992:	e003      	b.n	800799c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007994:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007996:	e001      	b.n	800799c <SVCCTL_App_Notification+0x1a0>
      break;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800799c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800799e:	2301      	movs	r3, #1
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3730      	adds	r7, #48	@ 0x30
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200002d4 	.word	0x200002d4
 80079ac:	20000358 	.word	0x20000358
 80079b0:	0001b207 	.word	0x0001b207

080079b4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80079ba:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <Ble_Tl_Init+0x20>)
 80079bc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80079be:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <Ble_Tl_Init+0x24>)
 80079c0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80079c2:	463b      	mov	r3, r7
 80079c4:	4619      	mov	r1, r3
 80079c6:	4805      	ldr	r0, [pc, #20]	@ (80079dc <Ble_Tl_Init+0x28>)
 80079c8:	f7ff f898 	bl	8006afc <hci_init>

  return;
 80079cc:	bf00      	nop
}
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	200300d8 	.word	0x200300d8
 80079d8:	08007ce1 	.word	0x08007ce1
 80079dc:	08007ca9 	.word	0x08007ca9

080079e0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80079e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e2:	b08d      	sub	sp, #52	@ 0x34
 80079e4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80079e6:	2300      	movs	r3, #0
 80079e8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079ea:	2392      	movs	r3, #146	@ 0x92
 80079ec:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80079ee:	f7fe fdb4 	bl	800655a <hci_reset>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80079f6:	f000 f8d7 	bl	8007ba8 <BleGetBdAddress>
 80079fa:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	2106      	movs	r1, #6
 8007a00:	2000      	movs	r0, #0
 8007a02:	f7fe fc6a 	bl	80062da <aci_hal_write_config_data>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8007b34 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007a0c:	2110      	movs	r1, #16
 8007a0e:	2018      	movs	r0, #24
 8007a10:	f7fe fc63 	bl	80062da <aci_hal_write_config_data>
 8007a14:	4603      	mov	r3, r0
 8007a16:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007a18:	4a47      	ldr	r2, [pc, #284]	@ (8007b38 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007a1a:	2110      	movs	r1, #16
 8007a1c:	2008      	movs	r0, #8
 8007a1e:	f7fe fc5c 	bl	80062da <aci_hal_write_config_data>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007a26:	211f      	movs	r1, #31
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7fe fcdb 	bl	80063e4 <aci_hal_set_tx_power_level>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007a32:	f7fe f8fc 	bl	8005c2e <aci_gatt_init>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01f      	beq.n	8007a8c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b3c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007a4e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007a50:	1dba      	adds	r2, r7, #6
 8007a52:	7bf8      	ldrb	r0, [r7, #15]
 8007a54:	1cbb      	adds	r3, r7, #2
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	1d3b      	adds	r3, r7, #4
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	2208      	movs	r2, #8
 8007a60:	2100      	movs	r1, #0
 8007a62:	f7fd fed0 	bl	8005806 <aci_gap_init>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007a6a:	88fc      	ldrh	r4, [r7, #6]
 8007a6c:	88bd      	ldrh	r5, [r7, #4]
 8007a6e:	68b8      	ldr	r0, [r7, #8]
 8007a70:	f7f8 fb84 	bl	800017c <strlen>
 8007a74:	4603      	mov	r3, r0
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	4629      	mov	r1, r5
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7fe fad6 	bl	8006034 <aci_gatt_update_char_value>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007a8c:	88f8      	ldrh	r0, [r7, #6]
 8007a8e:	8879      	ldrh	r1, [r7, #2]
 8007a90:	463b      	mov	r3, r7
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2302      	movs	r3, #2
 8007a96:	2200      	movs	r2, #0
 8007a98:	f7fe facc 	bl	8006034 <aci_gatt_update_char_value>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	2102      	movs	r1, #2
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f7fe fd7c 	bl	80065a2 <hci_le_set_default_phy>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007aae:	4b24      	ldr	r3, [pc, #144]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007ab4:	4b22      	ldr	r3, [pc, #136]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd fd25 	bl	8005508 <aci_gap_set_io_capability>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007aca:	2208      	movs	r2, #8
 8007acc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007ace:	4b1c      	ldr	r3, [pc, #112]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ad0:	2210      	movs	r2, #16
 8007ad2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007ada:	4b19      	ldr	r3, [pc, #100]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007adc:	4a19      	ldr	r2, [pc, #100]	@ (8007b44 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007ade:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007ae0:	4b17      	ldr	r3, [pc, #92]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007ae6:	4b16      	ldr	r3, [pc, #88]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ae8:	789c      	ldrb	r4, [r3, #2]
 8007aea:	4b15      	ldr	r3, [pc, #84]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007aec:	785d      	ldrb	r5, [r3, #1]
 8007aee:	4b14      	ldr	r3, [pc, #80]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007af0:	791b      	ldrb	r3, [r3, #4]
 8007af2:	4a13      	ldr	r2, [pc, #76]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007af4:	7952      	ldrb	r2, [r2, #5]
 8007af6:	4912      	ldr	r1, [pc, #72]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007af8:	78c9      	ldrb	r1, [r1, #3]
 8007afa:	4811      	ldr	r0, [pc, #68]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007afc:	6880      	ldr	r0, [r0, #8]
 8007afe:	2600      	movs	r6, #0
 8007b00:	9604      	str	r6, [sp, #16]
 8007b02:	9003      	str	r0, [sp, #12]
 8007b04:	9102      	str	r1, [sp, #8]
 8007b06:	9201      	str	r2, [sp, #4]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7fd fd4d 	bl	80055b0 <aci_gap_set_authentication_requirement>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b1c:	789b      	ldrb	r3, [r3, #2]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007b22:	f7fd ff8f 	bl	8005a44 <aci_gap_configure_filter_accept_list>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	08009070 	.word	0x08009070
 8007b38:	08009080 	.word	0x08009080
 8007b3c:	08008eac 	.word	0x08008eac
 8007b40:	200002d4 	.word	0x200002d4
 8007b44:	0001b207 	.word	0x0001b207

08007b48 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08c      	sub	sp, #48	@ 0x30
 8007b4c:	af08      	add	r7, sp, #32
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007b52:	2392      	movs	r3, #146	@ 0x92
 8007b54:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007b56:	4a12      	ldr	r2, [pc, #72]	@ (8007ba0 <Adv_Request+0x58>)
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9306      	str	r3, [sp, #24]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9302      	str	r3, [sp, #8]
 8007b72:	2300      	movs	r3, #0
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	2300      	movs	r3, #0
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	22a0      	movs	r2, #160	@ 0xa0
 8007b7e:	2180      	movs	r1, #128	@ 0x80
 8007b80:	2000      	movs	r0, #0
 8007b82:	f7fd fbc7 	bl	8005314 <aci_gap_set_discoverable>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007b8a:	4906      	ldr	r1, [pc, #24]	@ (8007ba4 <Adv_Request+0x5c>)
 8007b8c:	2019      	movs	r0, #25
 8007b8e:	f7fd fee7 	bl	8005960 <aci_gap_update_adv_data>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007b96:	bf00      	nop
}
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200002d4 	.word	0x200002d4
 8007ba4:	2000002c 	.word	0x2000002c

08007ba8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007bae:	f7ff fda7 	bl	8007700 <LL_FLASH_GetUDN>
 8007bb2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	d023      	beq.n	8007c04 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007bbc:	f7ff fdb8 	bl	8007730 <LL_FLASH_GetSTCompanyID>
 8007bc0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007bc2:	f7ff fda9 	bl	8007718 <LL_FLASH_GetDeviceID>
 8007bc6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	4b16      	ldr	r3, [pc, #88]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007bce:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	4b14      	ldr	r3, [pc, #80]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007bd8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	4b12      	ldr	r3, [pc, #72]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007be0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	4b10      	ldr	r3, [pc, #64]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007be8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007bf2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007bfc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <BleGetBdAddress+0x80>)
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e00b      	b.n	8007c1c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007c04:	2000      	movs	r0, #0
 8007c06:	f7ff fc95 	bl	8007534 <OTP_Read>
 8007c0a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e001      	b.n	8007c1c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007c18:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <BleGetBdAddress+0x84>)
 8007c1a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007c1c:	697b      	ldr	r3, [r7, #20]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	200002cc 	.word	0x200002cc
 8007c2c:	08009068 	.word	0x08009068

08007c30 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007c36:	4b0a      	ldr	r3, [pc, #40]	@ (8007c60 <Adv_Cancel+0x30>)
 8007c38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	d00a      	beq.n	8007c56 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007c40:	2392      	movs	r3, #146	@ 0x92
 8007c42:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007c44:	f7fd fb42 	bl	80052cc <aci_gap_set_non_discoverable>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007c4c:	4b04      	ldr	r3, [pc, #16]	@ (8007c60 <Adv_Cancel+0x30>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
}
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200002d4 	.word	0x200002d4

08007c64 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	2002      	movs	r0, #2
 8007c70:	f000 ff90 	bl	8008b94 <UTIL_SEQ_SetTask>

  return;
 8007c74:	bf00      	nop
}
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007c84:	2001      	movs	r0, #1
 8007c86:	f000 fff1 	bl	8008c6c <UTIL_SEQ_SetEvt>

  return;
 8007c8a:	bf00      	nop
}
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	f001 f806 	bl	8008cac <UTIL_SEQ_WaitEvt>

  return;
 8007ca0:	bf00      	nop
}
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fdd8 	bl	8006870 <SVCCTL_UserEvtRx>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007cd0:	e003      	b.n	8007cda <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  return;
 8007cd8:	bf00      	nop
}
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <BLE_StatusNot+0x16>
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d006      	beq.n	8007d02 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007cf4:	e00b      	b.n	8007d0e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 ff76 	bl	8008bec <UTIL_SEQ_PauseTask>
      break;
 8007d00:	e005      	b.n	8007d0e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007d02:	2303      	movs	r3, #3
 8007d04:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 ff90 	bl	8008c2c <UTIL_SEQ_ResumeTask>
      break;
 8007d0c:	bf00      	nop
  }

  return;
 8007d0e:	bf00      	nop
}
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <LL_C2_PWR_SetPowerMode>:
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8007d20:	4b07      	ldr	r3, [pc, #28]	@ (8007d40 <LL_C2_PWR_SetPowerMode+0x28>)
 8007d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d26:	f023 0207 	bic.w	r2, r3, #7
 8007d2a:	4905      	ldr	r1, [pc, #20]	@ (8007d40 <LL_C2_PWR_SetPowerMode+0x28>)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	58000400 	.word	0x58000400

08007d44 <Custom_STM_App_Notification>:
static void Sensor_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d81f      	bhi.n	8007d94 <Custom_STM_App_Notification+0x50>
 8007d54:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <Custom_STM_App_Notification+0x18>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d95 	.word	0x08007d95
 8007d60:	08007d6d 	.word	0x08007d6d
 8007d64:	08007d83 	.word	0x08007d83
 8007d68:	08007d95 	.word	0x08007d95
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_READ_EVT */
      break;

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 1;
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <Custom_STM_App_Notification+0x5c>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	701a      	strb	r2, [r3, #0]
		HW_TS_Start(TemperatureTimerId,
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <Custom_STM_App_Notification+0x60>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	f242 6166 	movw	r1, #9830	@ 0x2666
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f9 fa7a 	bl	8001274 <HW_TS_Start>
				MS_TO_RTC_TICKS(SENSOR_UPDATE_PERIOD_MS));
		APP_DBG_MSG("## Combined Notifications ENABLED\n");
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
      break;
 8007d80:	e009      	b.n	8007d96 <Custom_STM_App_Notification+0x52>

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8007d82:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <Custom_STM_App_Notification+0x5c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
		HW_TS_Stop(TemperatureTimerId);
 8007d88:	4b06      	ldr	r3, [pc, #24]	@ (8007da4 <Custom_STM_App_Notification+0x60>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7f9 f9ed 	bl	800116c <HW_TS_Stop>
		APP_DBG_MSG("## Combined Notifications DISABLED\n");

      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
      break;
 8007d92:	e000      	b.n	8007d96 <Custom_STM_App_Notification+0x52>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007d94:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007d96:	bf00      	nop
}
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2000035c 	.word	0x2000035c
 8007da4:	20000360 	.word	0x20000360

08007da8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <Custom_APP_Notification+0x16>
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d005      	beq.n	8007dc8 <Custom_APP_Notification+0x20>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007dbc:	e011      	b.n	8007de2 <Custom_APP_Notification+0x3a>
		Custom_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	885a      	ldrh	r2, [r3, #2]
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <Custom_APP_Notification+0x44>)
 8007dc4:	805a      	strh	r2, [r3, #2]
      break;
 8007dc6:	e00c      	b.n	8007de2 <Custom_APP_Notification+0x3a>
		if (Custom_App_Context.Temperature_pressure_Notification_Status == 1) {
 8007dc8:	4b08      	ldr	r3, [pc, #32]	@ (8007dec <Custom_APP_Notification+0x44>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d104      	bne.n	8007dda <Custom_APP_Notification+0x32>
			HW_TS_Stop(TemperatureTimerId);
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <Custom_APP_Notification+0x48>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7f9 f9c9 	bl	800116c <HW_TS_Stop>
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8007dda:	4b04      	ldr	r3, [pc, #16]	@ (8007dec <Custom_APP_Notification+0x44>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
      break;
 8007de0:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007de2:	bf00      	nop
}
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	2000035c 	.word	0x2000035c
 8007df0:	20000360 	.word	0x20000360

08007df4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//Sensor_ReadCoefficients();
	HW_TS_Create(0, &TemperatureTimerId, hw_ts_Repeated, Sensor_Timer_Callback);
 8007df8:	4b03      	ldr	r3, [pc, #12]	@ (8007e08 <Custom_APP_Init+0x14>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4903      	ldr	r1, [pc, #12]	@ (8007e0c <Custom_APP_Init+0x18>)
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f7f9 f93a 	bl	8001078 <HW_TS_Create>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007e04:	bf00      	nop
}
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	08008005 	.word	0x08008005
 8007e0c:	20000360 	.word	0x20000360

08007e10 <Sensor_ReadTempPressure>:

  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Sensor_ReadTempPressure(void) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
	/* 1) Send START CONVERSION (temp+pressure) */
	TX_BUFFER[0] = start_conversion_cmd;
 8007e14:	224c      	movs	r2, #76	@ 0x4c
 8007e16:	4b66      	ldr	r3, [pc, #408]	@ (8007fb0 <Sensor_ReadTempPressure+0x1a0>)
 8007e18:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2110      	movs	r1, #16
 8007e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e22:	f7fa fcfb 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	4960      	ldr	r1, [pc, #384]	@ (8007fb0 <Sensor_ReadTempPressure+0x1a0>)
 8007e2e:	4861      	ldr	r0, [pc, #388]	@ (8007fb4 <Sensor_ReadTempPressure+0x1a4>)
 8007e30:	f7fc fbc2 	bl	80045b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007e34:	2201      	movs	r2, #1
 8007e36:	2110      	movs	r1, #16
 8007e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e3c:	f7fa fcee 	bl	800281c <HAL_GPIO_WritePin>

	/* 2) Wait ~300 ms for conversion to complete */

	/* 3) Send READ ADC command, read 6 bytes total */
	TX_BUFFER[0] = read_adc_cmd;
 8007e40:	225c      	movs	r2, #92	@ 0x5c
 8007e42:	4b5b      	ldr	r3, [pc, #364]	@ (8007fb0 <Sensor_ReadTempPressure+0x1a0>)
 8007e44:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2110      	movs	r1, #16
 8007e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e4e:	f7fa fce5 	bl	800281c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295
 8007e56:	2201      	movs	r2, #1
 8007e58:	4955      	ldr	r1, [pc, #340]	@ (8007fb0 <Sensor_ReadTempPressure+0x1a0>)
 8007e5a:	4856      	ldr	r0, [pc, #344]	@ (8007fb4 <Sensor_ReadTempPressure+0x1a4>)
 8007e5c:	f7fc fbac 	bl	80045b8 <HAL_SPI_Transmit>
	// We expect: RX_BUFFER[0..2] = raw_temp (MSB, mid, LSB)
	//            RX_BUFFER[3..5] = raw_pressure
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, HAL_MAX_DELAY);
 8007e60:	f04f 33ff 	mov.w	r3, #4294967295
 8007e64:	2206      	movs	r2, #6
 8007e66:	4954      	ldr	r1, [pc, #336]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007e68:	4852      	ldr	r0, [pc, #328]	@ (8007fb4 <Sensor_ReadTempPressure+0x1a4>)
 8007e6a:	f7fc fd1b 	bl	80048a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2110      	movs	r1, #16
 8007e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e76:	f7fa fcd1 	bl	800281c <HAL_GPIO_WritePin>

	/* 4) Merge bytes: raw_temp = 24‐bit, raw_pressure = 24‐bit */
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 8007e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	041a      	lsls	r2, r3, #16
 8007e80:	4b4d      	ldr	r3, [pc, #308]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	4313      	orrs	r3, r2
			| (uint32_t) RX_BUFFER[2];
 8007e88:	4a4b      	ldr	r2, [pc, #300]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007e8a:	7892      	ldrb	r2, [r2, #2]
 8007e8c:	4313      	orrs	r3, r2
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 8007e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8007fbc <Sensor_ReadTempPressure+0x1ac>)
 8007e90:	6013      	str	r3, [r2, #0]
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 8007e92:	4b49      	ldr	r3, [pc, #292]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007e94:	78db      	ldrb	r3, [r3, #3]
 8007e96:	041a      	lsls	r2, r3, #16
			| ((uint32_t) RX_BUFFER[4] << 8) | (uint32_t) RX_BUFFER[5];
 8007e98:	4b47      	ldr	r3, [pc, #284]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007e9a:	791b      	ldrb	r3, [r3, #4]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	4a45      	ldr	r2, [pc, #276]	@ (8007fb8 <Sensor_ReadTempPressure+0x1a8>)
 8007ea2:	7952      	ldrb	r2, [r2, #5]
 8007ea4:	4313      	orrs	r3, r2
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 8007ea6:	4a46      	ldr	r2, [pc, #280]	@ (8007fc0 <Sensor_ReadTempPressure+0x1b0>)
 8007ea8:	6013      	str	r3, [r2, #0]

	/* 5) Compute “temperature” per your formula (as float) */
	// temperature = C1 * raw_temp / 2^29 – C3 * raw_pressure / 2^35 – C2/64
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 8007eaa:	4b46      	ldr	r3, [pc, #280]	@ (8007fc4 <Sensor_ReadTempPressure+0x1b4>)
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007eb6:	4b41      	ldr	r3, [pc, #260]	@ (8007fbc <Sensor_ReadTempPressure+0x1ac>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8007fc8 <Sensor_ReadTempPressure+0x1b8>
 8007eca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / 34359738368.0f)
 8007ece:	4b3f      	ldr	r3, [pc, #252]	@ (8007fcc <Sensor_ReadTempPressure+0x1bc>)
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eda:	4b39      	ldr	r3, [pc, #228]	@ (8007fc0 <Sensor_ReadTempPressure+0x1b0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007eea:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8007fd0 <Sensor_ReadTempPressure+0x1c0>
 8007eee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / 64.0f);
 8007ef6:	4b37      	ldr	r3, [pc, #220]	@ (8007fd4 <Sensor_ReadTempPressure+0x1c4>)
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f02:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8007fd8 <Sensor_ReadTempPressure+0x1c8>
 8007f06:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 8007f0e:	4b33      	ldr	r3, [pc, #204]	@ (8007fdc <Sensor_ReadTempPressure+0x1cc>)
 8007f10:	edc3 7a00 	vstr	s15, [r3]

	/* 6) Compute offset & sensitivity */
	offset = (float) C6 + ((float) C7 * temperature / 512.0f);
 8007f14:	4b32      	ldr	r3, [pc, #200]	@ (8007fe0 <Sensor_ReadTempPressure+0x1d0>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f20:	4b30      	ldr	r3, [pc, #192]	@ (8007fe4 <Sensor_ReadTempPressure+0x1d4>)
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007fdc <Sensor_ReadTempPressure+0x1cc>)
 8007f2e:	edd3 7a00 	vldr	s15, [r3]
 8007f32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f36:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8007fe8 <Sensor_ReadTempPressure+0x1d8>
 8007f3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f42:	4b2a      	ldr	r3, [pc, #168]	@ (8007fec <Sensor_ReadTempPressure+0x1dc>)
 8007f44:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + ((float) C9 * temperature / 512.0f);
 8007f48:	4b29      	ldr	r3, [pc, #164]	@ (8007ff0 <Sensor_ReadTempPressure+0x1e0>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	ee07 3a90 	vmov	s15, r3
 8007f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f54:	4b27      	ldr	r3, [pc, #156]	@ (8007ff4 <Sensor_ReadTempPressure+0x1e4>)
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f60:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <Sensor_ReadTempPressure+0x1cc>)
 8007f62:	edd3 7a00 	vldr	s15, [r3]
 8007f66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f6a:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007fe8 <Sensor_ReadTempPressure+0x1d8>
 8007f6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f76:	4b20      	ldr	r3, [pc, #128]	@ (8007ff8 <Sensor_ReadTempPressure+0x1e8>)
 8007f78:	edc3 7a00 	vstr	s15, [r3]

	/* 7) Finally, compute pressure: */
	// pressure = raw_pressure * sensitivity / 2^22 – offset
	pressure = ((float) raw_pressure * sensitivity / 4194304.0f) - offset;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	@ (8007fc0 <Sensor_ReadTempPressure+0x1b0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f88:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff8 <Sensor_ReadTempPressure+0x1e8>)
 8007f8a:	edd3 7a00 	vldr	s15, [r3]
 8007f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f92:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007ffc <Sensor_ReadTempPressure+0x1ec>
 8007f96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007f9a:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <Sensor_ReadTempPressure+0x1dc>)
 8007f9c:	edd3 7a00 	vldr	s15, [r3]
 8007fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa4:	4b16      	ldr	r3, [pc, #88]	@ (8008000 <Sensor_ReadTempPressure+0x1f0>)
 8007fa6:	edc3 7a00 	vstr	s15, [r3]
}
 8007faa:	bf00      	nop
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000248 	.word	0x20000248
 8007fb4:	200001b8 	.word	0x200001b8
 8007fb8:	2000024c 	.word	0x2000024c
 8007fbc:	20000234 	.word	0x20000234
 8007fc0:	20000230 	.word	0x20000230
 8007fc4:	2000021c 	.word	0x2000021c
 8007fc8:	4e000000 	.word	0x4e000000
 8007fcc:	20000220 	.word	0x20000220
 8007fd0:	51000000 	.word	0x51000000
 8007fd4:	2000021e 	.word	0x2000021e
 8007fd8:	42800000 	.word	0x42800000
 8007fdc:	20000238 	.word	0x20000238
 8007fe0:	20000226 	.word	0x20000226
 8007fe4:	20000228 	.word	0x20000228
 8007fe8:	44000000 	.word	0x44000000
 8007fec:	2000023c 	.word	0x2000023c
 8007ff0:	2000022a 	.word	0x2000022a
 8007ff4:	2000022c 	.word	0x2000022c
 8007ff8:	20000240 	.word	0x20000240
 8007ffc:	4a800000 	.word	0x4a800000
 8008000:	20000244 	.word	0x20000244

08008004 <Sensor_Timer_Callback>:

static void Sensor_Timer_Callback(void) {
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
	// Only do something if a client is subscribed for notifications
	if (Custom_App_Context.Temperature_pressure_Notification_Status) {
 800800a:	4b17      	ldr	r3, [pc, #92]	@ (8008068 <Sensor_Timer_Callback+0x64>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d025      	beq.n	800805e <Sensor_Timer_Callback+0x5a>
		uint8_t sensor_payload[8];

		// 1. Read the sensor to get the latest temperature and pressure
		Sensor_ReadTempPressure();
 8008012:	f7ff fefd 	bl	8007e10 <Sensor_ReadTempPressure>

		// 2. Pack both float values into the 8-byte array
		memcpy(&sensor_payload[0], &temperature, sizeof(float)); // First 4 bytes
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <Sensor_Timer_Callback+0x68>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	603b      	str	r3, [r7, #0]
		memcpy(&sensor_payload[4], &pressure, sizeof(float));    // Next 4 bytes
 800801c:	4b14      	ldr	r3, [pc, #80]	@ (8008070 <Sensor_Timer_Callback+0x6c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	607b      	str	r3, [r7, #4]

		APP_DBG_MSG("Sending Combined Temp/Pres Notification...\n");

		// 3. Send the single 8-byte notification
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMPERATURE_PRESSURE,
 8008022:	463b      	mov	r3, r7
 8008024:	4619      	mov	r1, r3
 8008026:	2000      	movs	r0, #0
 8008028:	f000 f96a 	bl	8008300 <Custom_STM_App_Update_Char>
				sensor_payload);
		aci_gap_terminate(Custom_App_Context.ConnectionHandle, 0x13);
 800802c:	4b0e      	ldr	r3, [pc, #56]	@ (8008068 <Sensor_Timer_Callback+0x64>)
 800802e:	885b      	ldrh	r3, [r3, #2]
 8008030:	2113      	movs	r1, #19
 8008032:	4618      	mov	r0, r3
 8008034:	f7fd fd2a 	bl	8005a8c <aci_gap_terminate>

		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8008038:	480e      	ldr	r0, [pc, #56]	@ (8008074 <Sensor_Timer_Callback+0x70>)
 800803a:	f7fc f9bb 	bl	80043b4 <HAL_RTCEx_DeactivateWakeUpTimer>
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10240, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800803e:	2200      	movs	r2, #0
 8008040:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8008044:	480b      	ldr	r0, [pc, #44]	@ (8008074 <Sensor_Timer_Callback+0x70>)
 8008046:	f7fc f8e9 	bl	800421c <HAL_RTCEx_SetWakeUpTimer_IT>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800804a:	4b0b      	ldr	r3, [pc, #44]	@ (8008078 <Sensor_Timer_Callback+0x74>)
 800804c:	2209      	movs	r2, #9
 800804e:	619a      	str	r2, [r3, #24]
		HAL_SuspendTick();
 8008050:	f7fa f8d2 	bl	80021f8 <HAL_SuspendTick>
		LL_C2_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8008054:	2003      	movs	r0, #3
 8008056:	f7ff fe5f 	bl	8007d18 <LL_C2_PWR_SetPowerMode>
		HAL_PWR_EnterSTANDBYMode();
 800805a:	f7fa fcb1 	bl	80029c0 <HAL_PWR_EnterSTANDBYMode>

	}
}
 800805e:	bf00      	nop
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	2000035c 	.word	0x2000035c
 800806c:	20000238 	.word	0x20000238
 8008070:	20000244 	.word	0x20000244
 8008074:	20000194 	.word	0x20000194
 8008078:	58000400 	.word	0x58000400

0800807c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b092      	sub	sp, #72	@ 0x48
 8008080:	af02      	add	r7, sp, #8
 8008082:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008084:	2300      	movs	r3, #0
 8008086:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3301      	adds	r3, #1
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch (event_pckt->evt)
 8008090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2bff      	cmp	r3, #255	@ 0xff
 8008096:	f040 80ad 	bne.w	80081f4 <Custom_STM_Event_Handler+0x178>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	3302      	adds	r3, #2
 800809e:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (blecore_evt->ecode)
 80080a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80080aa:	2b1a      	cmp	r3, #26
 80080ac:	f200 809c 	bhi.w	80081e8 <Custom_STM_Event_Handler+0x16c>
 80080b0:	a201      	add	r2, pc, #4	@ (adr r2, 80080b8 <Custom_STM_Event_Handler+0x3c>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	08008125 	.word	0x08008125
 80080bc:	080081e9 	.word	0x080081e9
 80080c0:	080081e9 	.word	0x080081e9
 80080c4:	080081e9 	.word	0x080081e9
 80080c8:	080081e9 	.word	0x080081e9
 80080cc:	080081e9 	.word	0x080081e9
 80080d0:	080081e9 	.word	0x080081e9
 80080d4:	080081e9 	.word	0x080081e9
 80080d8:	080081e9 	.word	0x080081e9
 80080dc:	080081e9 	.word	0x080081e9
 80080e0:	080081e9 	.word	0x080081e9
 80080e4:	080081e9 	.word	0x080081e9
 80080e8:	080081e9 	.word	0x080081e9
 80080ec:	080081e9 	.word	0x080081e9
 80080f0:	080081e9 	.word	0x080081e9
 80080f4:	080081e9 	.word	0x080081e9
 80080f8:	080081e9 	.word	0x080081e9
 80080fc:	080081e9 	.word	0x080081e9
 8008100:	080081e9 	.word	0x080081e9
 8008104:	08008173 	.word	0x08008173
 8008108:	080081e9 	.word	0x080081e9
 800810c:	080081e9 	.word	0x080081e9
 8008110:	080081e9 	.word	0x080081e9
 8008114:	080081e9 	.word	0x080081e9
 8008118:	080081e9 	.word	0x080081e9
 800811c:	080081e9 	.word	0x080081e9
 8008120:	080081cb 	.word	0x080081cb
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	3302      	adds	r3, #2
 8008128:	62bb      	str	r3, [r7, #40]	@ 0x28
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	885b      	ldrh	r3, [r3, #2]
 800812e:	b29b      	uxth	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	4b34      	ldr	r3, [pc, #208]	@ (8008204 <Custom_STM_Event_Handler+0x188>)
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	3302      	adds	r3, #2
 8008138:	429a      	cmp	r2, r3
 800813a:	d157      	bne.n	80081ec <Custom_STM_Event_Handler+0x170>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800813c:	2301      	movs	r3, #1
 800813e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	7a1b      	ldrb	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <Custom_STM_Event_Handler+0xd4>
 800814a:	2b01      	cmp	r3, #1
 800814c:	d008      	beq.n	8008160 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 800814e:	e00f      	b.n	8008170 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT;
 8008150:	2302      	movs	r3, #2
 8008152:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 8008154:	f107 0314 	add.w	r3, r7, #20
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fdf3 	bl	8007d44 <Custom_STM_App_Notification>
                break;
 800815e:	e007      	b.n	8008170 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT;
 8008160:	2301      	movs	r3, #1
 8008162:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 8008164:	f107 0314 	add.w	r3, r7, #20
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fdeb 	bl	8007d44 <Custom_STM_App_Notification>
                break;
 800816e:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8008170:	e03c      	b.n	80081ec <Custom_STM_Event_Handler+0x170>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	3302      	adds	r3, #2
 8008176:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817a:	885b      	ldrh	r3, [r3, #2]
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	4b20      	ldr	r3, [pc, #128]	@ (8008204 <Custom_STM_Event_Handler+0x188>)
 8008182:	885b      	ldrh	r3, [r3, #2]
 8008184:	3301      	adds	r3, #1
 8008186:	429a      	cmp	r2, r3
 8008188:	d132      	bne.n	80081f0 <Custom_STM_Event_Handler+0x174>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
				uint8_t sensor_payload[8];
				Sensor_ReadTempPressure();
 8008190:	f7ff fe3e 	bl	8007e10 <Sensor_ReadTempPressure>
				memcpy(&sensor_payload[0], &temperature, sizeof(float));
 8008194:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <Custom_STM_Event_Handler+0x18c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60fb      	str	r3, [r7, #12]
				memcpy(&sensor_payload[4], &pressure, sizeof(float));
 800819a:	4b1c      	ldr	r3, [pc, #112]	@ (800820c <Custom_STM_Event_Handler+0x190>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	613b      	str	r3, [r7, #16]

				aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 80081a0:	4b18      	ldr	r3, [pc, #96]	@ (8008204 <Custom_STM_Event_Handler+0x188>)
 80081a2:	8818      	ldrh	r0, [r3, #0]
 80081a4:	4b17      	ldr	r3, [pc, #92]	@ (8008204 <Custom_STM_Event_Handler+0x188>)
 80081a6:	8859      	ldrh	r1, [r3, #2]
 80081a8:	4b19      	ldr	r3, [pc, #100]	@ (8008210 <Custom_STM_Event_Handler+0x194>)
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	f107 030c 	add.w	r3, r7, #12
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	f7fd ff3c 	bl	8006034 <aci_gatt_update_char_value>
						CustomContext.CustomTemperature_PressureHdle, 0,
						SizeTemperature_Pressure, // Use the 8-byte size
						sensor_payload);
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80081bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe f834 	bl	8006230 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 80081c8:	e012      	b.n	80081f0 <Custom_STM_Event_Handler+0x174>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80081ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081cc:	3302      	adds	r3, #2
 80081ce:	633b      	str	r3, [r7, #48]	@ 0x30
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	753b      	strb	r3, [r7, #20]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	84bb      	strh	r3, [r7, #36]	@ 0x24
          Custom_STM_App_Notification(&Notification);
 80081dc:	f107 0314 	add.w	r3, r7, #20
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fdaf 	bl	8007d44 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80081e6:	e004      	b.n	80081f2 <Custom_STM_Event_Handler+0x176>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80081e8:	bf00      	nop
 80081ea:	e004      	b.n	80081f6 <Custom_STM_Event_Handler+0x17a>
          break;
 80081ec:	bf00      	nop
 80081ee:	e002      	b.n	80081f6 <Custom_STM_Event_Handler+0x17a>
          break;
 80081f0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80081f2:	e000      	b.n	80081f6 <Custom_STM_Event_Handler+0x17a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80081f4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80081f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}/* end Custom_STM_Event_Handler */
 80081fa:	4618      	mov	r0, r3
 80081fc:	3740      	adds	r7, #64	@ 0x40
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000364 	.word	0x20000364
 8008208:	20000238 	.word	0x20000238
 800820c:	20000244 	.word	0x20000244
 8008210:	20000046 	.word	0x20000046

08008214 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08c      	sub	sp, #48	@ 0x30
 8008218:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800821a:	2392      	movs	r3, #146	@ 0x92
 800821c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800821e:	4834      	ldr	r0, [pc, #208]	@ (80082f0 <SVCCTL_InitCustomSvc+0xdc>)
 8008220:	f7fe fb0c 	bl	800683c <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8008224:	2304      	movs	r3, #4
 8008226:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_SENSOR_UUID(uuid.Char_UUID_128);
 8008228:	238f      	movs	r3, #143	@ 0x8f
 800822a:	713b      	strb	r3, [r7, #4]
 800822c:	23e5      	movs	r3, #229	@ 0xe5
 800822e:	717b      	strb	r3, [r7, #5]
 8008230:	23b3      	movs	r3, #179	@ 0xb3
 8008232:	71bb      	strb	r3, [r7, #6]
 8008234:	23d5      	movs	r3, #213	@ 0xd5
 8008236:	71fb      	strb	r3, [r7, #7]
 8008238:	232e      	movs	r3, #46	@ 0x2e
 800823a:	723b      	strb	r3, [r7, #8]
 800823c:	237f      	movs	r3, #127	@ 0x7f
 800823e:	727b      	strb	r3, [r7, #9]
 8008240:	234a      	movs	r3, #74	@ 0x4a
 8008242:	72bb      	strb	r3, [r7, #10]
 8008244:	2398      	movs	r3, #152	@ 0x98
 8008246:	72fb      	strb	r3, [r7, #11]
 8008248:	232a      	movs	r3, #42	@ 0x2a
 800824a:	733b      	strb	r3, [r7, #12]
 800824c:	2348      	movs	r3, #72	@ 0x48
 800824e:	737b      	strb	r3, [r7, #13]
 8008250:	237a      	movs	r3, #122	@ 0x7a
 8008252:	73bb      	strb	r3, [r7, #14]
 8008254:	23cc      	movs	r3, #204	@ 0xcc
 8008256:	73fb      	strb	r3, [r7, #15]
 8008258:	2323      	movs	r3, #35	@ 0x23
 800825a:	743b      	strb	r3, [r7, #16]
 800825c:	2323      	movs	r3, #35	@ 0x23
 800825e:	747b      	strb	r3, [r7, #17]
 8008260:	2300      	movs	r3, #0
 8008262:	74bb      	strb	r3, [r7, #18]
 8008264:	2300      	movs	r3, #0
 8008266:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008268:	7dbb      	ldrb	r3, [r7, #22]
 800826a:	1d39      	adds	r1, r7, #4
 800826c:	4a21      	ldr	r2, [pc, #132]	@ (80082f4 <SVCCTL_InitCustomSvc+0xe0>)
 800826e:	9200      	str	r2, [sp, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	2002      	movs	r0, #2
 8008274:	f7fd fd00 	bl	8005c78 <aci_gatt_add_service>
 8008278:	4603      	mov	r3, r0
 800827a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Temperature_Pressure
   */
  COPY_TEMPERATURE_PRESSURE_UUID(uuid.Char_UUID_128);
 800827c:	2319      	movs	r3, #25
 800827e:	713b      	strb	r3, [r7, #4]
 8008280:	23ed      	movs	r3, #237	@ 0xed
 8008282:	717b      	strb	r3, [r7, #5]
 8008284:	2382      	movs	r3, #130	@ 0x82
 8008286:	71bb      	strb	r3, [r7, #6]
 8008288:	23ae      	movs	r3, #174	@ 0xae
 800828a:	71fb      	strb	r3, [r7, #7]
 800828c:	23ed      	movs	r3, #237	@ 0xed
 800828e:	723b      	strb	r3, [r7, #8]
 8008290:	2321      	movs	r3, #33	@ 0x21
 8008292:	727b      	strb	r3, [r7, #9]
 8008294:	234c      	movs	r3, #76	@ 0x4c
 8008296:	72bb      	strb	r3, [r7, #10]
 8008298:	239d      	movs	r3, #157	@ 0x9d
 800829a:	72fb      	strb	r3, [r7, #11]
 800829c:	2341      	movs	r3, #65	@ 0x41
 800829e:	733b      	strb	r3, [r7, #12]
 80082a0:	2345      	movs	r3, #69	@ 0x45
 80082a2:	737b      	strb	r3, [r7, #13]
 80082a4:	2322      	movs	r3, #34	@ 0x22
 80082a6:	73bb      	strb	r3, [r7, #14]
 80082a8:	238e      	movs	r3, #142	@ 0x8e
 80082aa:	73fb      	strb	r3, [r7, #15]
 80082ac:	2324      	movs	r3, #36	@ 0x24
 80082ae:	743b      	strb	r3, [r7, #16]
 80082b0:	2323      	movs	r3, #35	@ 0x23
 80082b2:	747b      	strb	r3, [r7, #17]
 80082b4:	2300      	movs	r3, #0
 80082b6:	74bb      	strb	r3, [r7, #18]
 80082b8:	2300      	movs	r3, #0
 80082ba:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSensorHdle,
 80082bc:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <SVCCTL_InitCustomSvc+0xe0>)
 80082be:	8818      	ldrh	r0, [r3, #0]
 80082c0:	4b0d      	ldr	r3, [pc, #52]	@ (80082f8 <SVCCTL_InitCustomSvc+0xe4>)
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	1d3a      	adds	r2, r7, #4
 80082c6:	490d      	ldr	r1, [pc, #52]	@ (80082fc <SVCCTL_InitCustomSvc+0xe8>)
 80082c8:	9105      	str	r1, [sp, #20]
 80082ca:	2101      	movs	r1, #1
 80082cc:	9104      	str	r1, [sp, #16]
 80082ce:	2110      	movs	r1, #16
 80082d0:	9103      	str	r1, [sp, #12]
 80082d2:	2104      	movs	r1, #4
 80082d4:	9102      	str	r1, [sp, #8]
 80082d6:	2100      	movs	r1, #0
 80082d8:	9101      	str	r1, [sp, #4]
 80082da:	2112      	movs	r1, #18
 80082dc:	9100      	str	r1, [sp, #0]
 80082de:	2102      	movs	r1, #2
 80082e0:	f7fd fda0 	bl	8005e24 <aci_gatt_add_char>
 80082e4:	4603      	mov	r3, r0
 80082e6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80082e8:	bf00      	nop
}
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	0800807d 	.word	0x0800807d
 80082f4:	20000364 	.word	0x20000364
 80082f8:	20000046 	.word	0x20000046
 80082fc:	20000366 	.word	0x20000366

08008300 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af02      	add	r7, sp, #8
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800830c:	2392      	movs	r3, #146	@ 0x92
 800830e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_TEMPERATURE_PRESSURE:
      ret = aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 8008316:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <Custom_STM_App_Update_Char+0x44>)
 8008318:	8818      	ldrh	r0, [r3, #0]
 800831a:	4b0a      	ldr	r3, [pc, #40]	@ (8008344 <Custom_STM_App_Update_Char+0x44>)
 800831c:	8859      	ldrh	r1, [r3, #2]
 800831e:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <Custom_STM_App_Update_Char+0x48>)
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	2200      	movs	r2, #0
 800832c:	f7fd fe82 	bl	8006034 <aci_gatt_update_char_value>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMPERATURE_PRESSURE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8008334:	e000      	b.n	8008338 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 8008336:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000364 	.word	0x20000364
 8008348:	20000046 	.word	0x20000046

0800834c <LL_PWR_EnableBootC2>:
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008350:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <LL_PWR_EnableBootC2+0x1c>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4a04      	ldr	r2, [pc, #16]	@ (8008368 <LL_PWR_EnableBootC2+0x1c>)
 8008356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835a:	60d3      	str	r3, [r2, #12]
}
 800835c:	bf00      	nop
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	58000400 	.word	0x58000400

0800836c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008374:	4b06      	ldr	r3, [pc, #24]	@ (8008390 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008376:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800837a:	4905      	ldr	r1, [pc, #20]	@ (8008390 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	58000800 	.word	0x58000800

08008394 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800839e:	6a1a      	ldr	r2, [r3, #32]
 80083a0:	4904      	ldr	r1, [pc, #16]	@ (80083b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	620b      	str	r3, [r1, #32]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	58000800 	.word	0x58000800

080083b8 <LL_AHB3_GRP1_EnableClock>:
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80083c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80083d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4013      	ands	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80083dc:	68fb      	ldr	r3, [r7, #12]
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <LL_C2_AHB3_GRP1_EnableClock>:
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80083f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80083fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4313      	orrs	r3, r2
 8008402:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4013      	ands	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008414:	68fb      	ldr	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f043 0201 	orr.w	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	43db      	mvns	r3, r3
 8008476:	401a      	ands	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	605a      	str	r2, [r3, #4]
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	605a      	str	r2, [r3, #4]
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	43db      	mvns	r3, r3
 80084be:	401a      	ands	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	605a      	str	r2, [r3, #4]
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	609a      	str	r2, [r3, #8]
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	041a      	lsls	r2, r3, #16
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	609a      	str	r2, [r3, #8]
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	4013      	ands	r3, r2
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d101      	bne.n	8008526 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69da      	ldr	r2, [r3, #28]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	4013      	ands	r3, r2
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d101      	bne.n	8008550 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008564:	2102      	movs	r1, #2
 8008566:	4818      	ldr	r0, [pc, #96]	@ (80085c8 <HW_IPCC_Rx_Handler+0x68>)
 8008568:	f7ff ffe4 	bl	8008534 <LL_C2_IPCC_IsActiveFlag_CHx>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <HW_IPCC_Rx_Handler+0x24>
 8008572:	4b15      	ldr	r3, [pc, #84]	@ (80085c8 <HW_IPCC_Rx_Handler+0x68>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800857e:	f000 f925 	bl	80087cc <HW_IPCC_SYS_EvtHandler>
 8008582:	e01e      	b.n	80085c2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008584:	2101      	movs	r1, #1
 8008586:	4810      	ldr	r0, [pc, #64]	@ (80085c8 <HW_IPCC_Rx_Handler+0x68>)
 8008588:	f7ff ffd4 	bl	8008534 <LL_C2_IPCC_IsActiveFlag_CHx>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <HW_IPCC_Rx_Handler+0x44>
 8008592:	4b0d      	ldr	r3, [pc, #52]	@ (80085c8 <HW_IPCC_Rx_Handler+0x68>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800859e:	f000 f899 	bl	80086d4 <HW_IPCC_BLE_EvtHandler>
 80085a2:	e00e      	b.n	80085c2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80085a4:	2108      	movs	r1, #8
 80085a6:	4808      	ldr	r0, [pc, #32]	@ (80085c8 <HW_IPCC_Rx_Handler+0x68>)
 80085a8:	f7ff ffc4 	bl	8008534 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d008      	beq.n	80085c4 <HW_IPCC_Rx_Handler+0x64>
 80085b2:	4b05      	ldr	r3, [pc, #20]	@ (80085c8 <HW_IPCC_Rx_Handler+0x68>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80085be:	f000 f97d 	bl	80088bc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
}
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	58000c00 	.word	0x58000c00

080085cc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80085d0:	2102      	movs	r1, #2
 80085d2:	4818      	ldr	r0, [pc, #96]	@ (8008634 <HW_IPCC_Tx_Handler+0x68>)
 80085d4:	f7ff ff99 	bl	800850a <LL_C1_IPCC_IsActiveFlag_CHx>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d108      	bne.n	80085f0 <HW_IPCC_Tx_Handler+0x24>
 80085de:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <HW_IPCC_Tx_Handler+0x68>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80085ea:	f000 f8d3 	bl	8008794 <HW_IPCC_SYS_CmdEvtHandler>
 80085ee:	e01e      	b.n	800862e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80085f0:	2108      	movs	r1, #8
 80085f2:	4810      	ldr	r0, [pc, #64]	@ (8008634 <HW_IPCC_Tx_Handler+0x68>)
 80085f4:	f7ff ff89 	bl	800850a <LL_C1_IPCC_IsActiveFlag_CHx>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d108      	bne.n	8008610 <HW_IPCC_Tx_Handler+0x44>
 80085fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <HW_IPCC_Tx_Handler+0x68>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d102      	bne.n	8008610 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800860a:	f000 f919 	bl	8008840 <HW_IPCC_MM_FreeBufHandler>
 800860e:	e00e      	b.n	800862e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008610:	2120      	movs	r1, #32
 8008612:	4808      	ldr	r0, [pc, #32]	@ (8008634 <HW_IPCC_Tx_Handler+0x68>)
 8008614:	f7ff ff79 	bl	800850a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d108      	bne.n	8008630 <HW_IPCC_Tx_Handler+0x64>
 800861e:	4b05      	ldr	r3, [pc, #20]	@ (8008634 <HW_IPCC_Tx_Handler+0x68>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800862a:	f000 f85f 	bl	80086ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800862e:	bf00      	nop
 8008630:	bf00      	nop
}
 8008632:	bd80      	pop	{r7, pc}
 8008634:	58000c00 	.word	0x58000c00

08008638 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800863c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008640:	f7ff fed3 	bl	80083ea <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008644:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008648:	f7ff fea4 	bl	8008394 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800864c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008650:	f7ff fe8c 	bl	800836c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008654:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008656:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008658:	f7ff fe78 	bl	800834c <LL_PWR_EnableBootC2>

  return;
 800865c:	bf00      	nop
}
 800865e:	bd80      	pop	{r7, pc}

08008660 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008664:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008668:	f7ff fea6 	bl	80083b8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800866c:	4806      	ldr	r0, [pc, #24]	@ (8008688 <HW_IPCC_Init+0x28>)
 800866e:	f7ff fee8 	bl	8008442 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008672:	4805      	ldr	r0, [pc, #20]	@ (8008688 <HW_IPCC_Init+0x28>)
 8008674:	f7ff fed5 	bl	8008422 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008678:	202c      	movs	r0, #44	@ 0x2c
 800867a:	f7f9 ff22 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800867e:	202d      	movs	r0, #45	@ 0x2d
 8008680:	f7f9 ff1f 	bl	80024c2 <HAL_NVIC_EnableIRQ>

  return;
 8008684:	bf00      	nop
}
 8008686:	bd80      	pop	{r7, pc}
 8008688:	58000c00 	.word	0x58000c00

0800868c <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008692:	f3ef 8310 	mrs	r3, PRIMASK
 8008696:	607b      	str	r3, [r7, #4]
  return(result);
 8008698:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800869a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800869c:	b672      	cpsid	i
}
 800869e:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80086a0:	2101      	movs	r1, #1
 80086a2:	4806      	ldr	r0, [pc, #24]	@ (80086bc <HW_IPCC_BLE_Init+0x30>)
 80086a4:	f7ff ff02 	bl	80084ac <LL_C1_IPCC_EnableReceiveChannel>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f383 8810 	msr	PRIMASK, r3
}
 80086b2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80086b4:	bf00      	nop
}
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	58000c00 	.word	0x58000c00

080086c0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80086c4:	2101      	movs	r1, #1
 80086c6:	4802      	ldr	r0, [pc, #8]	@ (80086d0 <HW_IPCC_BLE_SendCmd+0x10>)
 80086c8:	f7ff ff10 	bl	80084ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80086cc:	bf00      	nop
}
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	58000c00 	.word	0x58000c00

080086d4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80086d8:	f7fe fd74 	bl	80071c4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80086dc:	2101      	movs	r1, #1
 80086de:	4802      	ldr	r0, [pc, #8]	@ (80086e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80086e0:	f7ff fef6 	bl	80084d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80086e4:	bf00      	nop
}
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	58000c00 	.word	0x58000c00

080086ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f2:	f3ef 8310 	mrs	r3, PRIMASK
 80086f6:	607b      	str	r3, [r7, #4]
  return(result);
 80086f8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80086fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80086fc:	b672      	cpsid	i
}
 80086fe:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008700:	2120      	movs	r1, #32
 8008702:	4807      	ldr	r0, [pc, #28]	@ (8008720 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8008704:	f7ff fec0 	bl	8008488 <LL_C1_IPCC_DisableTransmitChannel>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f383 8810 	msr	PRIMASK, r3
}
 8008712:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8008714:	f7fe fd86 	bl	8007224 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008718:	bf00      	nop
}
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	58000c00 	.word	0x58000c00

08008724 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872a:	f3ef 8310 	mrs	r3, PRIMASK
 800872e:	607b      	str	r3, [r7, #4]
  return(result);
 8008730:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008732:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008734:	b672      	cpsid	i
}
 8008736:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008738:	2102      	movs	r1, #2
 800873a:	4806      	ldr	r0, [pc, #24]	@ (8008754 <HW_IPCC_SYS_Init+0x30>)
 800873c:	f7ff feb6 	bl	80084ac <LL_C1_IPCC_EnableReceiveChannel>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800874c:	bf00      	nop
}
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	58000c00 	.word	0x58000c00

08008758 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800875e:	2102      	movs	r1, #2
 8008760:	480b      	ldr	r0, [pc, #44]	@ (8008790 <HW_IPCC_SYS_SendCmd+0x38>)
 8008762:	f7ff fec3 	bl	80084ec <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008766:	f3ef 8310 	mrs	r3, PRIMASK
 800876a:	607b      	str	r3, [r7, #4]
  return(result);
 800876c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800876e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008770:	b672      	cpsid	i
}
 8008772:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008774:	2102      	movs	r1, #2
 8008776:	4806      	ldr	r0, [pc, #24]	@ (8008790 <HW_IPCC_SYS_SendCmd+0x38>)
 8008778:	f7ff fe73 	bl	8008462 <LL_C1_IPCC_EnableTransmitChannel>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f383 8810 	msr	PRIMASK, r3
}
 8008786:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8008788:	bf00      	nop
}
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	58000c00 	.word	0x58000c00

08008794 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800879a:	f3ef 8310 	mrs	r3, PRIMASK
 800879e:	607b      	str	r3, [r7, #4]
  return(result);
 80087a0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80087a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80087a4:	b672      	cpsid	i
}
 80087a6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80087a8:	2102      	movs	r1, #2
 80087aa:	4807      	ldr	r0, [pc, #28]	@ (80087c8 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 80087ac:	f7ff fe6c 	bl	8008488 <LL_C1_IPCC_DisableTransmitChannel>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f383 8810 	msr	PRIMASK, r3
}
 80087ba:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 80087bc:	f7fe fd82 	bl	80072c4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80087c0:	bf00      	nop
}
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	58000c00 	.word	0x58000c00

080087cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80087d0:	f7fe fd8e 	bl	80072f0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80087d4:	2102      	movs	r1, #2
 80087d6:	4802      	ldr	r0, [pc, #8]	@ (80087e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80087d8:	f7ff fe7a 	bl	80084d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80087dc:	bf00      	nop
}
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	58000c00 	.word	0x58000c00

080087e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80087ec:	2108      	movs	r1, #8
 80087ee:	4812      	ldr	r0, [pc, #72]	@ (8008838 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80087f0:	f7ff fe8b 	bl	800850a <LL_C1_IPCC_IsActiveFlag_CHx>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d013      	beq.n	8008822 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 80087fa:	4a10      	ldr	r2, [pc, #64]	@ (800883c <HW_IPCC_MM_SendFreeBuf+0x58>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008800:	f3ef 8310 	mrs	r3, PRIMASK
 8008804:	60fb      	str	r3, [r7, #12]
  return(result);
 8008806:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8008808:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800880a:	b672      	cpsid	i
}
 800880c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800880e:	2108      	movs	r1, #8
 8008810:	4809      	ldr	r0, [pc, #36]	@ (8008838 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8008812:	f7ff fe26 	bl	8008462 <LL_C1_IPCC_EnableTransmitChannel>
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f383 8810 	msr	PRIMASK, r3
}
 8008820:	e005      	b.n	800882e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4798      	blx	r3

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008826:	2108      	movs	r1, #8
 8008828:	4803      	ldr	r0, [pc, #12]	@ (8008838 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800882a:	f7ff fe5f 	bl	80084ec <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800882e:	bf00      	nop
}
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	58000c00 	.word	0x58000c00
 800883c:	20000368 	.word	0x20000368

08008840 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008846:	f3ef 8310 	mrs	r3, PRIMASK
 800884a:	607b      	str	r3, [r7, #4]
  return(result);
 800884c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800884e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008850:	b672      	cpsid	i
}
 8008852:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008854:	2108      	movs	r1, #8
 8008856:	480a      	ldr	r0, [pc, #40]	@ (8008880 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8008858:	f7ff fe16 	bl	8008488 <LL_C1_IPCC_DisableTransmitChannel>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f383 8810 	msr	PRIMASK, r3
}
 8008866:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8008868:	4b06      	ldr	r3, [pc, #24]	@ (8008884 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800886e:	2108      	movs	r1, #8
 8008870:	4803      	ldr	r0, [pc, #12]	@ (8008880 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8008872:	f7ff fe3b 	bl	80084ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008876:	bf00      	nop
}
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	58000c00 	.word	0x58000c00
 8008884:	20000368 	.word	0x20000368

08008888 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800888e:	f3ef 8310 	mrs	r3, PRIMASK
 8008892:	607b      	str	r3, [r7, #4]
  return(result);
 8008894:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008898:	b672      	cpsid	i
}
 800889a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800889c:	2108      	movs	r1, #8
 800889e:	4806      	ldr	r0, [pc, #24]	@ (80088b8 <HW_IPCC_TRACES_Init+0x30>)
 80088a0:	f7ff fe04 	bl	80084ac <LL_C1_IPCC_EnableReceiveChannel>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f383 8810 	msr	PRIMASK, r3
}
 80088ae:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80088b0:	bf00      	nop
}
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	58000c00 	.word	0x58000c00

080088bc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80088c0:	f7fe fdbe 	bl	8007440 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80088c4:	2108      	movs	r1, #8
 80088c6:	4802      	ldr	r0, [pc, #8]	@ (80088d0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80088c8:	f7ff fe02 	bl	80084d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80088cc:	bf00      	nop
}
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	58000c00 	.word	0x58000c00

080088d4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80088d8:	4b05      	ldr	r3, [pc, #20]	@ (80088f0 <UTIL_LPM_Init+0x1c>)
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80088de:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <UTIL_LPM_Init+0x20>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	2000036c 	.word	0x2000036c
 80088f4:	20000370 	.word	0x20000370

080088f8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008904:	f3ef 8310 	mrs	r3, PRIMASK
 8008908:	613b      	str	r3, [r7, #16]
  return(result);
 800890a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800890c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800890e:	b672      	cpsid	i
}
 8008910:	bf00      	nop
  
  switch(state)
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d008      	beq.n	800892a <UTIL_LPM_SetOffMode+0x32>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10e      	bne.n	800893a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800891c:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <UTIL_LPM_SetOffMode+0x5c>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4313      	orrs	r3, r2
 8008924:	4a0b      	ldr	r2, [pc, #44]	@ (8008954 <UTIL_LPM_SetOffMode+0x5c>)
 8008926:	6013      	str	r3, [r2, #0]
      break;
 8008928:	e008      	b.n	800893c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	43da      	mvns	r2, r3
 800892e:	4b09      	ldr	r3, [pc, #36]	@ (8008954 <UTIL_LPM_SetOffMode+0x5c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4013      	ands	r3, r2
 8008934:	4a07      	ldr	r2, [pc, #28]	@ (8008954 <UTIL_LPM_SetOffMode+0x5c>)
 8008936:	6013      	str	r3, [r2, #0]
      break;
 8008938:	e000      	b.n	800893c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800893a:	bf00      	nop
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f383 8810 	msr	PRIMASK, r3
}
 8008946:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008948:	bf00      	nop
 800894a:	371c      	adds	r7, #28
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	20000370 	.word	0x20000370

08008958 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b090      	sub	sp, #64	@ 0x40
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008960:	4b73      	ldr	r3, [pc, #460]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008966:	4b72      	ldr	r3, [pc, #456]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4013      	ands	r3, r2
 800896e:	4a70      	ldr	r2, [pc, #448]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 8008970:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008972:	4b70      	ldr	r3, [pc, #448]	@ (8008b34 <UTIL_SEQ_Run+0x1dc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008978:	4b6f      	ldr	r3, [pc, #444]	@ (8008b38 <UTIL_SEQ_Run+0x1e0>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800897e:	4b6f      	ldr	r3, [pc, #444]	@ (8008b3c <UTIL_SEQ_Run+0x1e4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008984:	4b6e      	ldr	r3, [pc, #440]	@ (8008b40 <UTIL_SEQ_Run+0x1e8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800898a:	e08d      	b.n	8008aa8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008990:	e002      	b.n	8008998 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008994:	3301      	adds	r3, #1
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008998:	4a6a      	ldr	r2, [pc, #424]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 800899a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	401a      	ands	r2, r3
 80089a4:	4b62      	ldr	r3, [pc, #392]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f1      	beq.n	8008992 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80089ae:	4a65      	ldr	r2, [pc, #404]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 80089b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	401a      	ands	r2, r3
 80089ba:	4b5d      	ldr	r3, [pc, #372]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4013      	ands	r3, r2
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80089c2:	4a60      	ldr	r2, [pc, #384]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 80089c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4413      	add	r3, r2
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	4013      	ands	r3, r2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d106      	bne.n	80089e2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80089d4:	4a5b      	ldr	r2, [pc, #364]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 80089d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	4413      	add	r3, r2
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80089e2:	4a58      	ldr	r2, [pc, #352]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 80089e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	4413      	add	r3, r2
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	4013      	ands	r3, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 f9c1 	bl	8008d78 <SEQ_BitPosition>
 80089f6:	4603      	mov	r3, r0
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b53      	ldr	r3, [pc, #332]	@ (8008b48 <UTIL_SEQ_Run+0x1f0>)
 80089fc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80089fe:	4a51      	ldr	r2, [pc, #324]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 8008a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4413      	add	r3, r2
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	4b4f      	ldr	r3, [pc, #316]	@ (8008b48 <UTIL_SEQ_Run+0x1f0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a12:	43db      	mvns	r3, r3
 8008a14:	401a      	ands	r2, r3
 8008a16:	494b      	ldr	r1, [pc, #300]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 8008a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	440b      	add	r3, r1
 8008a1e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a20:	f3ef 8310 	mrs	r3, PRIMASK
 8008a24:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a26:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008a28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a2a:	b672      	cpsid	i
}
 8008a2c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008a2e:	4b46      	ldr	r3, [pc, #280]	@ (8008b48 <UTIL_SEQ_Run+0x1f0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2201      	movs	r2, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	43da      	mvns	r2, r3
 8008a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b34 <UTIL_SEQ_Run+0x1dc>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	4a3c      	ldr	r2, [pc, #240]	@ (8008b34 <UTIL_SEQ_Run+0x1dc>)
 8008a42:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008a44:	2301      	movs	r3, #1
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a48:	e013      	b.n	8008a72 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	4a3d      	ldr	r2, [pc, #244]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 8008a50:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008a54:	4b3c      	ldr	r3, [pc, #240]	@ (8008b48 <UTIL_SEQ_Run+0x1f0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	43da      	mvns	r2, r3
 8008a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a62:	3b01      	subs	r3, #1
 8008a64:	400a      	ands	r2, r1
 8008a66:	4937      	ldr	r1, [pc, #220]	@ (8008b44 <UTIL_SEQ_Run+0x1ec>)
 8008a68:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e8      	bne.n	8008a4a <UTIL_SEQ_Run+0xf2>
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f383 8810 	msr	PRIMASK, r3
}
 8008a82:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008a84:	4b30      	ldr	r3, [pc, #192]	@ (8008b48 <UTIL_SEQ_Run+0x1f0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a30      	ldr	r2, [pc, #192]	@ (8008b4c <UTIL_SEQ_Run+0x1f4>)
 8008a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a8e:	4798      	blx	r3

    local_taskset = TaskSet;
 8008a90:	4b28      	ldr	r3, [pc, #160]	@ (8008b34 <UTIL_SEQ_Run+0x1dc>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8008a96:	4b28      	ldr	r3, [pc, #160]	@ (8008b38 <UTIL_SEQ_Run+0x1e0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008a9c:	4b27      	ldr	r3, [pc, #156]	@ (8008b3c <UTIL_SEQ_Run+0x1e4>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008aa2:	4b27      	ldr	r3, [pc, #156]	@ (8008b40 <UTIL_SEQ_Run+0x1e8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	401a      	ands	r2, r3
 8008aae:	4b20      	ldr	r3, [pc, #128]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <UTIL_SEQ_Run+0x16c>
 8008ab8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abc:	4013      	ands	r3, r2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f43f af64 	beq.w	800898c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008ac4:	4b20      	ldr	r3, [pc, #128]	@ (8008b48 <UTIL_SEQ_Run+0x1f0>)
 8008ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aca:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008acc:	f000 f946 	bl	8008d5c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ad6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ada:	b672      	cpsid	i
}
 8008adc:	bf00      	nop
  local_taskset = TaskSet;
 8008ade:	4b15      	ldr	r3, [pc, #84]	@ (8008b34 <UTIL_SEQ_Run+0x1dc>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008ae4:	4b14      	ldr	r3, [pc, #80]	@ (8008b38 <UTIL_SEQ_Run+0x1e0>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008aea:	4b14      	ldr	r3, [pc, #80]	@ (8008b3c <UTIL_SEQ_Run+0x1e4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	401a      	ands	r2, r3
 8008af6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d107      	bne.n	8008b10 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008b00:	4b0f      	ldr	r3, [pc, #60]	@ (8008b40 <UTIL_SEQ_Run+0x1e8>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	4013      	ands	r3, r2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008b0c:	f7f7 fd9c 	bl	8000648 <UTIL_SEQ_Idle>
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f383 8810 	msr	PRIMASK, r3
}
 8008b1a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008b1c:	f000 f925 	bl	8008d6a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008b20:	4a03      	ldr	r2, [pc, #12]	@ (8008b30 <UTIL_SEQ_Run+0x1d8>)
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	6013      	str	r3, [r2, #0]

  return;
 8008b26:	bf00      	nop
}
 8008b28:	3740      	adds	r7, #64	@ 0x40
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000004c 	.word	0x2000004c
 8008b34:	20000374 	.word	0x20000374
 8008b38:	20000378 	.word	0x20000378
 8008b3c:	20000048 	.word	0x20000048
 8008b40:	2000037c 	.word	0x2000037c
 8008b44:	20000404 	.word	0x20000404
 8008b48:	20000380 	.word	0x20000380
 8008b4c:	20000384 	.word	0x20000384

08008b50 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b60:	617b      	str	r3, [r7, #20]
  return(result);
 8008b62:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008b64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b66:	b672      	cpsid	i
}
 8008b68:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f904 	bl	8008d78 <SEQ_BitPosition>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4619      	mov	r1, r3
 8008b74:	4a06      	ldr	r2, [pc, #24]	@ (8008b90 <UTIL_SEQ_RegTask+0x40>)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f383 8810 	msr	PRIMASK, r3
}
 8008b86:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008b88:	bf00      	nop
}
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000384 	.word	0x20000384

08008b94 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008ba2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008ba6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ba8:	b672      	cpsid	i
}
 8008baa:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008bac:	4b0d      	ldr	r3, [pc, #52]	@ (8008be4 <UTIL_SEQ_SetTask+0x50>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8008be4 <UTIL_SEQ_SetTask+0x50>)
 8008bb6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8008be8 <UTIL_SEQ_SetTask+0x54>)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	4908      	ldr	r1, [pc, #32]	@ (8008be8 <UTIL_SEQ_SetTask+0x54>)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f383 8810 	msr	PRIMASK, r3
}
 8008bd6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008bd8:	bf00      	nop
}
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	20000374 	.word	0x20000374
 8008be8:	20000404 	.word	0x20000404

08008bec <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bfe:	b672      	cpsid	i
}
 8008c00:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	43da      	mvns	r2, r3
 8008c06:	4b08      	ldr	r3, [pc, #32]	@ (8008c28 <UTIL_SEQ_PauseTask+0x3c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	4a06      	ldr	r2, [pc, #24]	@ (8008c28 <UTIL_SEQ_PauseTask+0x3c>)
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f383 8810 	msr	PRIMASK, r3
}
 8008c1a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c1c:	bf00      	nop
}
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000048 	.word	0x20000048

08008c2c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c34:	f3ef 8310 	mrs	r3, PRIMASK
 8008c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c3e:	b672      	cpsid	i
}
 8008c40:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008c42:	4b09      	ldr	r3, [pc, #36]	@ (8008c68 <UTIL_SEQ_ResumeTask+0x3c>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	4a07      	ldr	r2, [pc, #28]	@ (8008c68 <UTIL_SEQ_ResumeTask+0x3c>)
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f383 8810 	msr	PRIMASK, r3
}
 8008c58:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c5a:	bf00      	nop
}
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000048 	.word	0x20000048

08008c6c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c74:	f3ef 8310 	mrs	r3, PRIMASK
 8008c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c7e:	b672      	cpsid	i
}
 8008c80:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008c82:	4b09      	ldr	r3, [pc, #36]	@ (8008ca8 <UTIL_SEQ_SetEvt+0x3c>)
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	4a07      	ldr	r2, [pc, #28]	@ (8008ca8 <UTIL_SEQ_SetEvt+0x3c>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f383 8810 	msr	PRIMASK, r3
}
 8008c98:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c9a:	bf00      	nop
}
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20000378 	.word	0x20000378

08008cac <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d34 <UTIL_SEQ_WaitEvt+0x88>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008cba:	4b1e      	ldr	r3, [pc, #120]	@ (8008d34 <UTIL_SEQ_WaitEvt+0x88>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d102      	bne.n	8008cca <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	e005      	b.n	8008cd6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008cca:	4b1a      	ldr	r3, [pc, #104]	@ (8008d34 <UTIL_SEQ_WaitEvt+0x88>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008cd6:	4b18      	ldr	r3, [pc, #96]	@ (8008d38 <UTIL_SEQ_WaitEvt+0x8c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008cdc:	4a16      	ldr	r2, [pc, #88]	@ (8008d38 <UTIL_SEQ_WaitEvt+0x8c>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008ce2:	e003      	b.n	8008cec <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	69f8      	ldr	r0, [r7, #28]
 8008ce8:	f000 f82a 	bl	8008d40 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008cec:	4b13      	ldr	r3, [pc, #76]	@ (8008d3c <UTIL_SEQ_WaitEvt+0x90>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0f5      	beq.n	8008ce4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8008d34 <UTIL_SEQ_WaitEvt+0x88>)
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8008d02:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d04:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d08:	b672      	cpsid	i
}
 8008d0a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	43da      	mvns	r2, r3
 8008d10:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <UTIL_SEQ_WaitEvt+0x90>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4013      	ands	r3, r2
 8008d16:	4a09      	ldr	r2, [pc, #36]	@ (8008d3c <UTIL_SEQ_WaitEvt+0x90>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f383 8810 	msr	PRIMASK, r3
}
 8008d24:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008d26:	4a04      	ldr	r2, [pc, #16]	@ (8008d38 <UTIL_SEQ_WaitEvt+0x8c>)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	6013      	str	r3, [r2, #0]
  return;
 8008d2c:	bf00      	nop
}
 8008d2e:	3720      	adds	r7, #32
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000380 	.word	0x20000380
 8008d38:	2000037c 	.word	0x2000037c
 8008d3c:	20000378 	.word	0x20000378

08008d40 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fe02 	bl	8008958 <UTIL_SEQ_Run>
  return;
 8008d54:	bf00      	nop
}
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d60:	bf00      	nop
}
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d6e:	bf00      	nop
}
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <SEQ_BitPosition+0x16>
    return 32U;
 8008d8a:	2320      	movs	r3, #32
 8008d8c:	e003      	b.n	8008d96 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	fab3 f383 	clz	r3, r3
 8008d94:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8008d96:	f1c3 031f 	rsb	r3, r3, #31
 8008d9a:	b2db      	uxtb	r3, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	@ (8008df0 <__libc_init_array+0x38>)
 8008dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008df4 <__libc_init_array+0x3c>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008df8 <__libc_init_array+0x40>)
 8008dca:	4c0c      	ldr	r4, [pc, #48]	@ (8008dfc <__libc_init_array+0x44>)
 8008dcc:	f000 f826 	bl	8008e1c <_init>
 8008dd0:	1b64      	subs	r4, r4, r5
 8008dd2:	10a4      	asrs	r4, r4, #2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	4798      	blx	r3
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	4798      	blx	r3
 8008dec:	3601      	adds	r6, #1
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	08009098 	.word	0x08009098
 8008df4:	08009098 	.word	0x08009098
 8008df8:	08009098 	.word	0x08009098
 8008dfc:	0800909c 	.word	0x0800909c

08008e00 <memcpy>:
 8008e00:	440a      	add	r2, r1
 8008e02:	4291      	cmp	r1, r2
 8008e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e08:	d100      	bne.n	8008e0c <memcpy+0xc>
 8008e0a:	4770      	bx	lr
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e16:	4291      	cmp	r1, r2
 8008e18:	d1f9      	bne.n	8008e0e <memcpy+0xe>
 8008e1a:	bd10      	pop	{r4, pc}

08008e1c <_init>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr

08008e28 <_fini>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr
