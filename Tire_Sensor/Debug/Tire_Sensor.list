
Tire_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e04  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08008f40  08008f40  00009f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091b4  080091b4  0000a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091bc  080091bc  0000a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000048  20000008  080091c4  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000050  0800920c  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000088  08009241  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000009c  08009252  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08009252  0000b410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08009252  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00026b51  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005b0b  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000022c8  00000000  00000000  000380f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a50  00000000  00000000  0003a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026657  00000000  00000000  0003be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000279e5  00000000  00000000  00062467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ce632  00000000  00000000  00089e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0015847e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008ecc  00000000  00000000  001584c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000063  00000000  00000000  00161390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000009c 	.word	0x2000009c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008f28 	.word	0x08008f28

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a0 	.word	0x200000a0
 8000178:	08008f28 	.word	0x08008f28

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f007 f963 	bl	800749c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f006 fbf4 	bl	80069c6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000016 	.word	0x20000016
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	20000018 	.word	0x20000018
 80001f4:	2000001a 	.word	0x2000001a
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	2000001e 	.word	0x2000001e
 8000200:	08008f40 	.word	0x08008f40

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fe:	f023 0304 	bic.w	r3, r3, #4
 8000302:	6113      	str	r3, [r2, #16]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	22ff      	movs	r2, #255	@ 0xff
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	22ca      	movs	r2, #202	@ 0xca
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2253      	movs	r2, #83	@ 0x53
 8000340:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f023 0207 	bic.w	r2, r3, #7
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	431a      	orrs	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <MX_APPE_Config+0x18>)
 800037a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800037e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000380:	f000 f826 	bl	80003d0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000384:	f000 f82b 	bl	80003de <Config_HSE>

  return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	58004000 	.word	0x58004000

08000390 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000394:	f000 f837 	bl	8000406 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000398:	f000 f850 	bl	800043c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800039c:	4904      	ldr	r1, [pc, #16]	@ (80003b0 <MX_APPE_Init+0x20>)
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fd90 	bl	8000ec4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80003a4:	f000 f85a 	bl	800045c <appe_Tl_Init>
   * From now, the application is waiting for the ready event (VS_HCI_C2_Ready)
   * received on the system channel before starting the Stack
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */
  Sleep_RegisterTasks();
 80003a8:	f001 fc48 	bl	8001c3c <Sleep_RegisterTasks>
/* USER CODE END APPE_Init_2 */

   return;
 80003ac:	bf00      	nop
}
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000194 	.word	0x20000194

080003b4 <Init_Smps>:

void Init_Smps(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80003b8:	bf00      	nop
}
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <Init_Exti>:

void Init_Exti(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80003c6:	2050      	movs	r0, #80	@ 0x50
 80003c8:	f7ff ff32 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 80003cc:	bf00      	nop
}
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003d4:	bf00      	nop
}
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f007 f8e5 	bl	80075b4 <OTP_Read>
 80003ea:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d005      	beq.n	80003fe <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	799b      	ldrb	r3, [r3, #6]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff2e 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
}
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <System_Init>:

static void System_Init(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  Init_Smps();
 800040a:	f7ff ffd3 	bl	80003b4 <Init_Smps>

  Init_Exti();
 800040e:	f7ff ffd8 	bl	80003c2 <Init_Exti>

  Init_Rtc();
 8000412:	f000 f803 	bl	800041c <Init_Rtc>

  return;
 8000416:	bf00      	nop
}
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <Init_Rtc>:

static void Init_Rtc(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <Init_Rtc+0x1c>)
 8000422:	f7ff ff84 	bl	800032e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000426:	2100      	movs	r1, #0
 8000428:	4803      	ldr	r0, [pc, #12]	@ (8000438 <Init_Rtc+0x1c>)
 800042a:	f7ff ff90 	bl	800034e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800042e:	4802      	ldr	r0, [pc, #8]	@ (8000438 <Init_Rtc+0x1c>)
 8000430:	f7ff ff70 	bl	8000314 <LL_RTC_EnableWriteProtection>

  return;
 8000434:	bf00      	nop
}
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40002800 	.word	0x40002800

0800043c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000440:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000444:	f7ff ff26 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000448:	f008 fa64 	bl	8008914 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800044c:	2004      	movs	r0, #4
 800044e:	f7ff fed9 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8000452:	f002 fc51 	bl	8002cf8 <HAL_PWREx_EnableSRAMRetention>

  return;
 8000456:	bf00      	nop
}
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000462:	f006 fe65 	bl	8007130 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000466:	4a11      	ldr	r2, [pc, #68]	@ (80004ac <appe_Tl_Init+0x50>)
 8000468:	2100      	movs	r1, #0
 800046a:	2004      	movs	r0, #4
 800046c:	f008 fbf6 	bl	8008c5c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <appe_Tl_Init+0x54>)
 8000472:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <appe_Tl_Init+0x58>)
 8000476:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	480e      	ldr	r0, [pc, #56]	@ (80004b8 <appe_Tl_Init+0x5c>)
 800047e:	f006 fd19 	bl	8006eb4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <appe_Tl_Init+0x60>)
 8000484:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <appe_Tl_Init+0x64>)
 8000488:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <appe_Tl_Init+0x68>)
 800048c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800048e:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000492:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	4618      	mov	r0, r3
 800049a:	f006 ff8b 	bl	80073b4 <TL_MM_Init>

  TL_Enable();
 800049e:	f006 fe41 	bl	8007124 <TL_Enable>

  return;
 80004a2:	bf00      	nop
}
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	08006eed 	.word	0x08006eed
 80004b0:	20030734 	.word	0x20030734
 80004b4:	080004c9 	.word	0x080004c9
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	2003094c 	.word	0x2003094c
 80004c0:	20030840 	.word	0x20030840
 80004c4:	200301f8 	.word	0x200301f8

080004c8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004d2:	bf00      	nop
}
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	330b      	adds	r3, #11
 80004ee:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004f0:	69fb      	ldr	r3, [r7, #28]
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	d81f      	bhi.n	800053e <APPE_SysUserEvtRx+0x5e>
 80004fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000504 <APPE_SysUserEvtRx+0x24>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000525 	.word	0x08000525
 8000508:	08000537 	.word	0x08000537
 800050c:	0800053f 	.word	0x0800053f
 8000510:	0800053f 	.word	0x0800053f
 8000514:	0800053f 	.word	0x0800053f
 8000518:	0800053f 	.word	0x0800053f
 800051c:	0800053f 	.word	0x0800053f
 8000520:	0800053f 	.word	0x0800053f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4618      	mov	r0, r3
 800052a:	f006 fa79 	bl	8006a20 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f81b 	bl	800056a <APPE_SysEvtReadyProcessing>
    break;
 8000534:	e004      	b.n	8000540 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f806 	bl	8000548 <APPE_SysEvtError>
    break;
 800053c:	e000      	b.n	8000540 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800053e:	bf00      	nop
  }

  return;
 8000540:	bf00      	nop
}
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	330b      	adds	r3, #11
 8000556:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3302      	adds	r3, #2
 800055c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800055e:	bf00      	nop
}
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b08a      	sub	sp, #40	@ 0x28
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	330b      	adds	r3, #11
 800058e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	3302      	adds	r3, #2
 8000594:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d11d      	bne.n	80005da <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800059e:	f7ff fdf5 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80005a2:	230f      	movs	r3, #15
 80005a4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80005a6:	237f      	movs	r3, #127	@ 0x7f
 80005a8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80005aa:	f7ff fe95 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 80005ae:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80005b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80005b6:	f7ff fe81 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 80005ba:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4618      	mov	r0, r3
 80005c8:	f006 fa14 	bl	80069f4 <SHCI_C2_Config>

    APP_BLE_Init();
 80005cc:	f007 f904 	bl	80077d8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005d0:	2100      	movs	r1, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	f008 f9e0 	bl	8008998 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005d8:	e007      	b.n	80005ea <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d103      	bne.n	80005ea <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
  return;
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
}
 80005ec:	3728      	adds	r7, #40	@ 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fa:	f001 ff55 	bl	80024a8 <HAL_GetTick>
 80005fe:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060a:	d00a      	beq.n	8000622 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800060c:	f001 ff64 	bl	80024d8 <HAL_GetTickFreq>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	e002      	b.n	8000622 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800061c:	f7ff fe6a 	bl	80002f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000620:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000622:	f001 ff41 	bl	80024a8 <HAL_GetTick>
 8000626:	4602      	mov	r2, r0
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	429a      	cmp	r2, r3
 8000630:	d8f4      	bhi.n	800061c <HAL_Delay+0x2a>
  }
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f008 fa0e 	bl	8008a64 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000650:	f008 f9d2 	bl	80089f8 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000654:	bf00      	nop
}
 8000656:	bd80      	pop	{r7, pc}

08000658 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000660:	2100      	movs	r1, #0
 8000662:	2004      	movs	r0, #4
 8000664:	f008 fb1c 	bl	8008ca0 <UTIL_SEQ_SetTask>
  return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000678:	2002      	movs	r0, #2
 800067a:	f008 fb7d 	bl	8008d78 <UTIL_SEQ_SetEvt>
  return;
 800067e:	bf00      	nop
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800068e:	2002      	movs	r0, #2
 8000690:	f008 fb92 	bl	8008db8 <UTIL_SEQ_WaitEvt>
  return;
 8000694:	bf00      	nop
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <LL_EXTI_EnableIT_0_31>:
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80006a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80006aa:	4905      	ldr	r1, [pc, #20]	@ (80006c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	58000800 	.word	0x58000800

080006c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4904      	ldr	r1, [pc, #16]	@ (80006e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	600b      	str	r3, [r1, #0]

}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	58000800 	.word	0x58000800

080006e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <ReadRtcSsrValue+0x3c>)
 80006f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <ReadRtcSsrValue+0x3c>)
 80006f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006fe:	e005      	b.n	800070c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <ReadRtcSsrValue+0x3c>)
 8000706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000708:	b29b      	uxth	r3, r3
 800070a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d1f5      	bne.n	8000700 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000714:	683b      	ldr	r3, [r7, #0]
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40002800 	.word	0x40002800

08000728 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	491d      	ldr	r1, [pc, #116]	@ (80007b0 <LinkTimerAfter+0x88>)
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	3315      	adds	r3, #21
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2b06      	cmp	r3, #6
 8000750:	d009      	beq.n	8000766 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	4916      	ldr	r1, [pc, #88]	@ (80007b0 <LinkTimerAfter+0x88>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3314      	adds	r3, #20
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	4911      	ldr	r1, [pc, #68]	@ (80007b0 <LinkTimerAfter+0x88>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3315      	adds	r3, #21
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <LinkTimerAfter+0x88>)
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	3314      	adds	r3, #20
 800078a:	79ba      	ldrb	r2, [r7, #6]
 800078c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	4907      	ldr	r1, [pc, #28]	@ (80007b0 <LinkTimerAfter+0x88>)
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	440b      	add	r3, r1
 800079c:	3315      	adds	r3, #21
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	701a      	strb	r2, [r3, #0]

  return;
 80007a2:	bf00      	nop
}
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	200000b8 	.word	0x200000b8

080007b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <LinkTimerBefore+0xb8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d032      	beq.n	8000836 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	4927      	ldr	r1, [pc, #156]	@ (8000870 <LinkTimerBefore+0xbc>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3314      	adds	r3, #20
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	4922      	ldr	r1, [pc, #136]	@ (8000870 <LinkTimerBefore+0xbc>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	3315      	adds	r3, #21
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	491d      	ldr	r1, [pc, #116]	@ (8000870 <LinkTimerBefore+0xbc>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	3315      	adds	r3, #21
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	4918      	ldr	r1, [pc, #96]	@ (8000870 <LinkTimerBefore+0xbc>)
 8000810:	4613      	mov	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	440b      	add	r3, r1
 800081a:	3314      	adds	r3, #20
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	4913      	ldr	r1, [pc, #76]	@ (8000870 <LinkTimerBefore+0xbc>)
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	440b      	add	r3, r1
 800082e:	3314      	adds	r3, #20
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000834:	e014      	b.n	8000860 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LinkTimerBefore+0xbc>)
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	440b      	add	r3, r1
 8000844:	3315      	adds	r3, #21
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800084a:	79ba      	ldrb	r2, [r7, #6]
 800084c:	4908      	ldr	r1, [pc, #32]	@ (8000870 <LinkTimerBefore+0xbc>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	440b      	add	r3, r1
 8000858:	3314      	adds	r3, #20
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	701a      	strb	r2, [r3, #0]
  return;
 800085e:	bf00      	nop
}
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000148 	.word	0x20000148
 8000870:	200000b8 	.word	0x200000b8

08000874 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800087e:	4b4e      	ldr	r3, [pc, #312]	@ (80009b8 <linkTimer+0x144>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b06      	cmp	r3, #6
 8000886:	d118      	bne.n	80008ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000888:	4b4b      	ldr	r3, [pc, #300]	@ (80009b8 <linkTimer+0x144>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b4b      	ldr	r3, [pc, #300]	@ (80009bc <linkTimer+0x148>)
 8000890:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000892:	4a49      	ldr	r2, [pc, #292]	@ (80009b8 <linkTimer+0x144>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	4949      	ldr	r1, [pc, #292]	@ (80009c0 <linkTimer+0x14c>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3315      	adds	r3, #21
 80008a8:	2206      	movs	r2, #6
 80008aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008ac:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <linkTimer+0x150>)
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295
 80008b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	81fb      	strh	r3, [r7, #14]
 80008b8:	e078      	b.n	80009ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008ba:	f000 f909 	bl	8000ad0 <ReturnTimeElapsed>
 80008be:	4603      	mov	r3, r0
 80008c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	493e      	ldr	r1, [pc, #248]	@ (80009c0 <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	79fa      	ldrb	r2, [r7, #7]
 80008d8:	4419      	add	r1, r3
 80008da:	4839      	ldr	r0, [pc, #228]	@ (80009c0 <linkTimer+0x14c>)
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4403      	add	r3, r0
 80008e6:	3308      	adds	r3, #8
 80008e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	4934      	ldr	r1, [pc, #208]	@ (80009c0 <linkTimer+0x14c>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	3308      	adds	r3, #8
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <linkTimer+0x144>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	4a2e      	ldr	r2, [pc, #184]	@ (80009c0 <linkTimer+0x14c>)
 8000908:	460b      	mov	r3, r1
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	440b      	add	r3, r1
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	4413      	add	r3, r2
 8000912:	3308      	adds	r3, #8
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	429a      	cmp	r2, r3
 800091a:	d337      	bcc.n	800098c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <linkTimer+0x144>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000922:	7b7a      	ldrb	r2, [r7, #13]
 8000924:	4926      	ldr	r1, [pc, #152]	@ (80009c0 <linkTimer+0x14c>)
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	440b      	add	r3, r1
 8000930:	3315      	adds	r3, #21
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000936:	e013      	b.n	8000960 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000938:	7b7a      	ldrb	r2, [r7, #13]
 800093a:	4921      	ldr	r1, [pc, #132]	@ (80009c0 <linkTimer+0x14c>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800094c:	7b7a      	ldrb	r2, [r7, #13]
 800094e:	491c      	ldr	r1, [pc, #112]	@ (80009c0 <linkTimer+0x14c>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3315      	adds	r3, #21
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	2b06      	cmp	r3, #6
 8000964:	d00b      	beq.n	800097e <linkTimer+0x10a>
 8000966:	7b3a      	ldrb	r2, [r7, #12]
 8000968:	4915      	ldr	r1, [pc, #84]	@ (80009c0 <linkTimer+0x14c>)
 800096a:	4613      	mov	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4413      	add	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	440b      	add	r3, r1
 8000974:	3308      	adds	r3, #8
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	429a      	cmp	r2, r3
 800097c:	d2dc      	bcs.n	8000938 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800097e:	7b7a      	ldrb	r2, [r7, #13]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fecf 	bl	8000728 <LinkTimerAfter>
 800098a:	e00f      	b.n	80009ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <linkTimer+0x144>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff0c 	bl	80007b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <linkTimer+0x144>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <linkTimer+0x148>)
 80009a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80009a6:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <linkTimer+0x144>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80009ac:	89fb      	ldrh	r3, [r7, #14]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000148 	.word	0x20000148
 80009bc:	20000149 	.word	0x20000149
 80009c0:	200000b8 	.word	0x200000b8
 80009c4:	2000014c 	.word	0x2000014c

080009c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009d8:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <UnlinkTimer+0xf8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d111      	bne.n	8000a08 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009e4:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <UnlinkTimer+0xf8>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b36      	ldr	r3, [pc, #216]	@ (8000ac4 <UnlinkTimer+0xfc>)
 80009ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	4935      	ldr	r1, [pc, #212]	@ (8000ac8 <UnlinkTimer+0x100>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	3315      	adds	r3, #21
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <UnlinkTimer+0xf8>)
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e03e      	b.n	8000a86 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	492f      	ldr	r1, [pc, #188]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	3314      	adds	r3, #20
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	492a      	ldr	r1, [pc, #168]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3315      	adds	r3, #21
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a30:	79f9      	ldrb	r1, [r7, #7]
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	4824      	ldr	r0, [pc, #144]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a36:	460b      	mov	r3, r1
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	440b      	add	r3, r1
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4403      	add	r3, r0
 8000a40:	3315      	adds	r3, #21
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2d8      	uxtb	r0, r3
 8000a46:	4920      	ldr	r1, [pc, #128]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	3315      	adds	r3, #21
 8000a54:	4602      	mov	r2, r0
 8000a56:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d013      	beq.n	8000a86 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a5e:	79f9      	ldrb	r1, [r7, #7]
 8000a60:	7bba      	ldrb	r2, [r7, #14]
 8000a62:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a64:	460b      	mov	r3, r1
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	440b      	add	r3, r1
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3314      	adds	r3, #20
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2d8      	uxtb	r0, r3
 8000a74:	4914      	ldr	r1, [pc, #80]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	4602      	mov	r2, r0
 8000a84:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	490f      	ldr	r1, [pc, #60]	@ (8000ac8 <UnlinkTimer+0x100>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	330c      	adds	r3, #12
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <UnlinkTimer+0xf8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d107      	bne.n	8000ab4 <UnlinkTimer+0xec>
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <UnlinkTimer+0x104>)
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
}
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20000148 	.word	0x20000148
 8000ac4:	20000149 	.word	0x20000149
 8000ac8:	200000b8 	.word	0x200000b8
 8000acc:	2000014c 	.word	0x2000014c

08000ad0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ade:	d026      	beq.n	8000b2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ae0:	f7ff fe02 	bl	80006e8 <ReadRtcSsrValue>
 8000ae4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d805      	bhi.n	8000afc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e00a      	b.n	8000b12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <ReturnTimeElapsed+0x74>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <ReturnTimeElapsed+0x70>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <ReturnTimeElapsed+0x78>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <ReturnTimeElapsed+0x7c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	40d3      	lsrs	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	e001      	b.n	8000b32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	b29b      	uxth	r3, r3
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000014c 	.word	0x2000014c
 8000b44:	20000154 	.word	0x20000154
 8000b48:	20000152 	.word	0x20000152
 8000b4c:	20000151 	.word	0x20000151

08000b50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d108      	bne.n	8000b72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b60:	f7ff fdc2 	bl	80006e8 <ReadRtcSsrValue>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <RestartWakeupCounter+0x9c>)
 8000b68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f001 fe5d 	bl	800282a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b70:	e039      	b.n	8000be6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d803      	bhi.n	8000b80 <RestartWakeupCounter+0x30>
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <RestartWakeupCounter+0xa0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d002      	beq.n	8000b86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b86:	bf00      	nop
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ba6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <RestartWakeupCounter+0xa8>)
 8000baa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f001 fe48 	bl	8002846 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <RestartWakeupCounter+0xac>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	041b      	lsls	r3, r3, #16
 8000bbe:	88fa      	ldrh	r2, [r7, #6]
 8000bc0:	490e      	ldr	r1, [pc, #56]	@ (8000bfc <RestartWakeupCounter+0xac>)
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bc6:	f7ff fd8f 	bl	80006e8 <ReadRtcSsrValue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <RestartWakeupCounter+0x9c>)
 8000bce:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <RestartWakeupCounter+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bde:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000be0:	f3af 8000 	nop.w
  return ;
 8000be4:	bf00      	nop
}
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000014c 	.word	0x2000014c
 8000bf0:	20000151 	.word	0x20000151
 8000bf4:	20000194 	.word	0x20000194
 8000bf8:	58000800 	.word	0x58000800
 8000bfc:	40002800 	.word	0x40002800

08000c00 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c06:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <RescheduleTimerList+0x11c>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c12:	d107      	bne.n	8000c24 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000c14:	bf00      	nop
 8000c16:	4b42      	ldr	r3, [pc, #264]	@ (8000d20 <RescheduleTimerList+0x120>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f8      	bne.n	8000c16 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000c24:	4b3e      	ldr	r3, [pc, #248]	@ (8000d20 <RescheduleTimerList+0x120>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <RescheduleTimerList+0x120>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c32:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c34:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <RescheduleTimerList+0x124>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	493a      	ldr	r1, [pc, #232]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3308      	adds	r3, #8
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c4e:	f7ff ff3f 	bl	8000ad0 <ReturnTimeElapsed>
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d205      	bcs.n	8000c6a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <RescheduleTimerList+0x12c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e04d      	b.n	8000d06 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4a30      	ldr	r2, [pc, #192]	@ (8000d30 <RescheduleTimerList+0x130>)
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	4413      	add	r3, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d906      	bls.n	8000c8a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <RescheduleTimerList+0x130>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <RescheduleTimerList+0x12c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e03d      	b.n	8000d06 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c94:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <RescheduleTimerList+0x12c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c9a:	e034      	b.n	8000d06 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	4922      	ldr	r1, [pc, #136]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	3308      	adds	r3, #8
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d20a      	bcs.n	8000cca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	491c      	ldr	r1, [pc, #112]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3308      	adds	r3, #8
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e013      	b.n	8000cf2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	4916      	ldr	r1, [pc, #88]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3308      	adds	r3, #8
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4403      	add	r3, r0
 8000cee:	3308      	adds	r3, #8
 8000cf0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <RescheduleTimerList+0x128>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3315      	adds	r3, #21
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d1c7      	bne.n	8000c9c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff1e 	bl	8000b50 <RestartWakeupCounter>

  return ;
 8000d14:	bf00      	nop
}
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40002800 	.word	0x40002800
 8000d20:	20000194 	.word	0x20000194
 8000d24:	20000148 	.word	0x20000148
 8000d28:	200000b8 	.word	0x200000b8
 8000d2c:	20000150 	.word	0x20000150
 8000d30:	20000156 	.word	0x20000156

08000d34 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8000d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8000d40:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d48:	4b59      	ldr	r3, [pc, #356]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	22ca      	movs	r2, #202	@ 0xca
 8000d4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d50:	4b57      	ldr	r3, [pc, #348]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2253      	movs	r2, #83	@ 0x53
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d58:	4b55      	ldr	r3, [pc, #340]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	4b54      	ldr	r3, [pc, #336]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d66:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d68:	4b52      	ldr	r3, [pc, #328]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d74:	4950      	ldr	r1, [pc, #320]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	330c      	adds	r3, #12
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d16e      	bne.n	8000e68 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d8e:	494a      	ldr	r1, [pc, #296]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000da2:	4945      	ldr	r1, [pc, #276]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3310      	adds	r3, #16
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000db4:	4b41      	ldr	r3, [pc, #260]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d04c      	beq.n	8000e58 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000dbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dc2:	493d      	ldr	r1, [pc, #244]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	330d      	adds	r3, #13
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d124      	bne.n	8000e22 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdf2 	bl	80009c8 <UnlinkTimer>
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	f383 8810 	msr	PRIMASK, r3
}
 8000dee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000df0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000df4:	4930      	ldr	r1, [pc, #192]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	3304      	adds	r3, #4
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fa32 	bl	8001274 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	22ca      	movs	r2, #202	@ 0xca
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e18:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2253      	movs	r2, #83	@ 0x53
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e20:	e012      	b.n	8000e48 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f383 8810 	msr	PRIMASK, r3
}
 8000e2c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f99a 	bl	800116c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	22ca      	movs	r2, #202	@ 0xca
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2253      	movs	r2, #83	@ 0x53
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	69b8      	ldr	r0, [r7, #24]
 8000e52:	f000 fa95 	bl	8001380 <HW_TS_RTC_Int_AppNot>
 8000e56:	e022      	b.n	8000e9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e58:	f7ff fed2 	bl	8000c00 <RescheduleTimerList>
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f383 8810 	msr	PRIMASK, r3
}
 8000e66:	e01a      	b.n	8000e9e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e68:	bf00      	nop
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f8      	beq.n	8000e6a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f383 8810 	msr	PRIMASK, r3
}
 8000e9c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	22ff      	movs	r2, #255	@ 0xff
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000194 	.word	0x20000194
 8000eb4:	20000148 	.word	0x20000148
 8000eb8:	200000b8 	.word	0x200000b8
 8000ebc:	20000150 	.word	0x20000150
 8000ec0:	58000800 	.word	0x58000800

08000ec4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800104c <HW_TS_Init+0x188>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	22ca      	movs	r2, #202	@ 0xca
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800104c <HW_TS_Init+0x188>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2253      	movs	r2, #83	@ 0x53
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8001050 <HW_TS_Init+0x18c>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a5a      	ldr	r2, [pc, #360]	@ (8001050 <HW_TS_Init+0x18c>)
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000eec:	4b58      	ldr	r3, [pc, #352]	@ (8001050 <HW_TS_Init+0x18c>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f1c3 0304 	rsb	r3, r3, #4
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b55      	ldr	r3, [pc, #340]	@ (8001054 <HW_TS_Init+0x190>)
 8000f00:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <HW_TS_Init+0x18c>)
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000f0a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000f0e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	fa92 f2a2 	rbit	r2, r2
 8000f16:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d101      	bne.n	8000f26 <HW_TS_Init+0x62>
  {
    return 32U;
 8000f22:	2220      	movs	r2, #32
 8000f24:	e003      	b.n	8000f2e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	fab2 f282 	clz	r2, r2
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	40d3      	lsrs	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b48      	ldr	r3, [pc, #288]	@ (8001058 <HW_TS_Init+0x194>)
 8000f38:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f3a:	4b45      	ldr	r3, [pc, #276]	@ (8001050 <HW_TS_Init+0x18c>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b44      	ldr	r3, [pc, #272]	@ (800105c <HW_TS_Init+0x198>)
 8000f4c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f4e:	4b43      	ldr	r3, [pc, #268]	@ (800105c <HW_TS_Init+0x198>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a40      	ldr	r2, [pc, #256]	@ (8001058 <HW_TS_Init+0x194>)
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f60:	4a3c      	ldr	r2, [pc, #240]	@ (8001054 <HW_TS_Init+0x190>)
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	40d3      	lsrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d904      	bls.n	8000f7c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <HW_TS_Init+0x19c>)
 8000f74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f78:	801a      	strh	r2, [r3, #0]
 8000f7a:	e003      	b.n	8000f84 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <HW_TS_Init+0x19c>)
 8000f82:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f84:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f88:	f7ff fb9c 	bl	80006c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f90:	f7ff fb84 	bl	800069c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d13d      	bne.n	8001016 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <HW_TS_Init+0x1a0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fa0:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <HW_TS_Init+0x1a4>)
 8000fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	77fb      	strb	r3, [r7, #31]
 8000fac:	e00c      	b.n	8000fc8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fae:	7ffa      	ldrb	r2, [r7, #31]
 8000fb0:	492e      	ldr	r1, [pc, #184]	@ (800106c <HW_TS_Init+0x1a8>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	77fb      	strb	r3, [r7, #31]
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d9ef      	bls.n	8000fae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <HW_TS_Init+0x1ac>)
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <HW_TS_Init+0x188>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HW_TS_Init+0x188>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fe2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HW_TS_Init+0x188>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HW_TS_Init+0x188>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ff4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <HW_TS_Init+0x1b0>)
 8000ff8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ffc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ffe:	2003      	movs	r0, #3
 8001000:	f001 fc21 	bl	8002846 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HW_TS_Init+0x188>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HW_TS_Init+0x188>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	e009      	b.n	800102a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HW_TS_Init+0x188>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001024:	2003      	movs	r0, #3
 8001026:	f001 fc00 	bl	800282a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HW_TS_Init+0x188>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	22ff      	movs	r2, #255	@ 0xff
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001032:	2200      	movs	r2, #0
 8001034:	2103      	movs	r1, #3
 8001036:	2003      	movs	r0, #3
 8001038:	f001 fbb5 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800103c:	2003      	movs	r0, #3
 800103e:	f001 fbcc 	bl	80027da <HAL_NVIC_EnableIRQ>

  return;
 8001042:	bf00      	nop
}
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000194 	.word	0x20000194
 8001050:	40002800 	.word	0x40002800
 8001054:	20000151 	.word	0x20000151
 8001058:	20000152 	.word	0x20000152
 800105c:	20000154 	.word	0x20000154
 8001060:	20000156 	.word	0x20000156
 8001064:	20000150 	.word	0x20000150
 8001068:	2000014c 	.word	0x2000014c
 800106c:	200000b8 	.word	0x200000b8
 8001070:	20000148 	.word	0x20000148
 8001074:	58000800 	.word	0x58000800

08001078 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	@ 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108e:	f3ef 8310 	mrs	r3, PRIMASK
 8001092:	61fb      	str	r3, [r7, #28]
  return(result);
 8001094:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800109c:	e004      	b.n	80010a8 <HW_TS_Create+0x30>
  {
    loop++;
 800109e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d80c      	bhi.n	80010ca <HW_TS_Create+0x52>
 80010b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010b4:	492c      	ldr	r1, [pc, #176]	@ (8001168 <HW_TS_Create+0xf0>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	330c      	adds	r3, #12
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e9      	bne.n	800109e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d038      	beq.n	8001144 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010d6:	4924      	ldr	r1, [pc, #144]	@ (8001168 <HW_TS_Create+0xf0>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	330c      	adds	r3, #12
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f383 8810 	msr	PRIMASK, r3
}
 80010f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010f8:	491b      	ldr	r1, [pc, #108]	@ (8001168 <HW_TS_Create+0xf0>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	3310      	adds	r3, #16
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800110a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800110e:	4916      	ldr	r1, [pc, #88]	@ (8001168 <HW_TS_Create+0xf0>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	330d      	adds	r3, #13
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001120:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001124:	4910      	ldr	r1, [pc, #64]	@ (8001168 <HW_TS_Create+0xf0>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800113a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001142:	e008      	b.n	8001156 <HW_TS_Create+0xde>
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f383 8810 	msr	PRIMASK, r3
}
 800114e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800115a:	4618      	mov	r0, r3
 800115c:	372c      	adds	r7, #44	@ 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200000b8 	.word	0x200000b8

0800116c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001176:	f3ef 8310 	mrs	r3, PRIMASK
 800117a:	60fb      	str	r3, [r7, #12]
  return(result);
 800117c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800117e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001184:	2003      	movs	r0, #3
 8001186:	f001 fb36 	bl	80027f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800118a:	4b34      	ldr	r3, [pc, #208]	@ (800125c <HW_TS_Stop+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	22ca      	movs	r2, #202	@ 0xca
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <HW_TS_Stop+0xf0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2253      	movs	r2, #83	@ 0x53
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4930      	ldr	r1, [pc, #192]	@ (8001260 <HW_TS_Stop+0xf4>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	330c      	adds	r3, #12
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d142      	bne.n	8001238 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc06 	bl	80009c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HW_TS_Stop+0xf8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011c2:	7cfb      	ldrb	r3, [r7, #19]
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d12f      	bne.n	8001228 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <HW_TS_Stop+0xfc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d4:	d107      	bne.n	80011e6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80011d6:	bf00      	nop
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HW_TS_Stop+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f8      	bne.n	80011d8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HW_TS_Stop+0xf0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <HW_TS_Stop+0xf0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011f4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011f6:	bf00      	nop
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <HW_TS_Stop+0xf0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f8      	beq.n	80011f8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HW_TS_Stop+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HW_TS_Stop+0xf0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001216:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HW_TS_Stop+0x100>)
 800121a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800121e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001220:	2003      	movs	r0, #3
 8001222:	f001 fb10 	bl	8002846 <HAL_NVIC_ClearPendingIRQ>
 8001226:	e007      	b.n	8001238 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HW_TS_Stop+0x104>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	7cfa      	ldrb	r2, [r7, #19]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001234:	f7ff fce4 	bl	8000c00 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HW_TS_Stop+0xf0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	22ff      	movs	r2, #255	@ 0xff
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001240:	2003      	movs	r0, #3
 8001242:	f001 faca 	bl	80027da <HAL_NVIC_EnableIRQ>
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f383 8810 	msr	PRIMASK, r3
}
 8001250:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001252:	bf00      	nop
}
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000194 	.word	0x20000194
 8001260:	200000b8 	.word	0x200000b8
 8001264:	20000148 	.word	0x20000148
 8001268:	40002800 	.word	0x40002800
 800126c:	58000800 	.word	0x58000800
 8001270:	20000149 	.word	0x20000149

08001274 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	493b      	ldr	r1, [pc, #236]	@ (8001370 <HW_TS_Start+0xfc>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	330c      	adds	r3, #12
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d103      	bne.n	80012a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff66 	bl	800116c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012a0:	f3ef 8310 	mrs	r3, PRIMASK
 80012a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80012a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012aa:	b672      	cpsid	i
}
 80012ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ae:	2003      	movs	r0, #3
 80012b0:	f001 faa1 	bl	80027f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HW_TS_Start+0x100>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	22ca      	movs	r2, #202	@ 0xca
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80012bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <HW_TS_Start+0x100>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2253      	movs	r2, #83	@ 0x53
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	492a      	ldr	r1, [pc, #168]	@ (8001370 <HW_TS_Start+0xfc>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	330c      	adds	r3, #12
 80012d4:	2202      	movs	r2, #2
 80012d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	4925      	ldr	r1, [pc, #148]	@ (8001370 <HW_TS_Start+0xfc>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3308      	adds	r3, #8
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	4920      	ldr	r1, [pc, #128]	@ (8001370 <HW_TS_Start+0xfc>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	3304      	adds	r3, #4
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fab6 	bl	8000874 <linkTimer>
 8001308:	4603      	mov	r3, r0
 800130a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <HW_TS_Start+0x104>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HW_TS_Start+0x108>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	7c7a      	ldrb	r2, [r7, #17]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800131e:	f7ff fc6f 	bl	8000c00 <RescheduleTimerList>
 8001322:	e013      	b.n	800134c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4912      	ldr	r1, [pc, #72]	@ (8001370 <HW_TS_Start+0xfc>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3308      	adds	r3, #8
 8001334:	6819      	ldr	r1, [r3, #0]
 8001336:	8a7b      	ldrh	r3, [r7, #18]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	1ac9      	subs	r1, r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <HW_TS_Start+0xfc>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4403      	add	r3, r0
 8001348:	3308      	adds	r3, #8
 800134a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HW_TS_Start+0x100>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	22ff      	movs	r2, #255	@ 0xff
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001354:	2003      	movs	r0, #3
 8001356:	f001 fa40 	bl	80027da <HAL_NVIC_EnableIRQ>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f383 8810 	msr	PRIMASK, r3
}
 8001364:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001366:	bf00      	nop
}
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000b8 	.word	0x200000b8
 8001374:	20000194 	.word	0x20000194
 8001378:	20000148 	.word	0x20000148
 800137c:	20000149 	.word	0x20000149

08001380 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	460b      	mov	r3, r1
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4798      	blx	r3

  return;
 8001392:	bf00      	nop
}
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <LL_RCC_LSE_SetDriveCapability>:
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013aa:	f023 0218 	bic.w	r2, r3, #24
 80013ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4013      	ands	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f000 ffe6 	bl	80023cc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001400:	f7fe ffb8 	bl	8000374 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 fafa 	bl	80019fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001408:	f000 fb44 	bl	8001a94 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800140c:	f000 fb62 	bl	8001ad4 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001410:	4bb5      	ldr	r3, [pc, #724]	@ (80016e8 <main+0x2f0>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88

   }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f000 fbe5 	bl	8001be4 <MX_GPIO_Init>
  MX_RTC_Init();
 800141a:	f000 fb77 	bl	8001b0c <MX_RTC_Init>
  MX_SPI1_Init();
 800141e:	f000 fba3 	bl	8001b68 <MX_SPI1_Init>
  MX_RF_Init();
 8001422:	f000 fb6b 	bl	8001afc <MX_RF_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001426:	2064      	movs	r0, #100	@ 0x64
 8001428:	f7ff f8e3 	bl	80005f2 <HAL_Delay>
	TX_BUFFER[0] = reset_cmd;
 800142c:	4baf      	ldr	r3, [pc, #700]	@ (80016ec <main+0x2f4>)
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	4baf      	ldr	r3, [pc, #700]	@ (80016f0 <main+0x2f8>)
 8001432:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2110      	movs	r1, #16
 8001438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143c:	f001 fb7a 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 1000);
 8001440:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001444:	2201      	movs	r2, #1
 8001446:	49aa      	ldr	r1, [pc, #680]	@ (80016f0 <main+0x2f8>)
 8001448:	48aa      	ldr	r0, [pc, #680]	@ (80016f4 <main+0x2fc>)
 800144a:	f003 f8f6 	bl	800463a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2110      	movs	r1, #16
 8001452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001456:	f001 fb6d 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800145a:	2064      	movs	r0, #100	@ 0x64
 800145c:	f7ff f8c9 	bl	80005f2 <HAL_Delay>

	TX_BUFFER[0] = read_c1_cmd;
 8001460:	4ba5      	ldr	r3, [pc, #660]	@ (80016f8 <main+0x300>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4ba2      	ldr	r3, [pc, #648]	@ (80016f0 <main+0x2f8>)
 8001466:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2110      	movs	r1, #16
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f001 fb60 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001474:	2364      	movs	r3, #100	@ 0x64
 8001476:	2201      	movs	r2, #1
 8001478:	499d      	ldr	r1, [pc, #628]	@ (80016f0 <main+0x2f8>)
 800147a:	489e      	ldr	r0, [pc, #632]	@ (80016f4 <main+0x2fc>)
 800147c:	f003 f8dd 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001480:	2364      	movs	r3, #100	@ 0x64
 8001482:	2202      	movs	r2, #2
 8001484:	499d      	ldr	r1, [pc, #628]	@ (80016fc <main+0x304>)
 8001486:	489b      	ldr	r0, [pc, #620]	@ (80016f4 <main+0x2fc>)
 8001488:	f003 fa4d 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001494:	f001 fb4e 	bl	8002b34 <HAL_GPIO_WritePin>
	C1 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001498:	4b98      	ldr	r3, [pc, #608]	@ (80016fc <main+0x304>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b21b      	sxth	r3, r3
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b96      	ldr	r3, [pc, #600]	@ (80016fc <main+0x304>)
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b94      	ldr	r3, [pc, #592]	@ (8001700 <main+0x308>)
 80014b0:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c2_cmd;
 80014b2:	4b94      	ldr	r3, [pc, #592]	@ (8001704 <main+0x30c>)
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	4b8e      	ldr	r3, [pc, #568]	@ (80016f0 <main+0x2f8>)
 80014b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2110      	movs	r1, #16
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f001 fb37 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80014c6:	2364      	movs	r3, #100	@ 0x64
 80014c8:	2201      	movs	r2, #1
 80014ca:	4989      	ldr	r1, [pc, #548]	@ (80016f0 <main+0x2f8>)
 80014cc:	4889      	ldr	r0, [pc, #548]	@ (80016f4 <main+0x2fc>)
 80014ce:	f003 f8b4 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80014d2:	2364      	movs	r3, #100	@ 0x64
 80014d4:	2202      	movs	r2, #2
 80014d6:	4989      	ldr	r1, [pc, #548]	@ (80016fc <main+0x304>)
 80014d8:	4886      	ldr	r0, [pc, #536]	@ (80016f4 <main+0x2fc>)
 80014da:	f003 fa24 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2110      	movs	r1, #16
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e6:	f001 fb25 	bl	8002b34 <HAL_GPIO_WritePin>
	C2 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80014ea:	4b84      	ldr	r3, [pc, #528]	@ (80016fc <main+0x304>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b81      	ldr	r3, [pc, #516]	@ (80016fc <main+0x304>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b81      	ldr	r3, [pc, #516]	@ (8001708 <main+0x310>)
 8001502:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c3_cmd;
 8001504:	4b81      	ldr	r3, [pc, #516]	@ (800170c <main+0x314>)
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4b79      	ldr	r3, [pc, #484]	@ (80016f0 <main+0x2f8>)
 800150a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001514:	f001 fb0e 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001518:	2364      	movs	r3, #100	@ 0x64
 800151a:	2201      	movs	r2, #1
 800151c:	4974      	ldr	r1, [pc, #464]	@ (80016f0 <main+0x2f8>)
 800151e:	4875      	ldr	r0, [pc, #468]	@ (80016f4 <main+0x2fc>)
 8001520:	f003 f88b 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	2202      	movs	r2, #2
 8001528:	4974      	ldr	r1, [pc, #464]	@ (80016fc <main+0x304>)
 800152a:	4872      	ldr	r0, [pc, #456]	@ (80016f4 <main+0x2fc>)
 800152c:	f003 f9fb 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001538:	f001 fafc 	bl	8002b34 <HAL_GPIO_WritePin>
	C3 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800153c:	4b6f      	ldr	r3, [pc, #444]	@ (80016fc <main+0x304>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b21b      	sxth	r3, r3
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b6d      	ldr	r3, [pc, #436]	@ (80016fc <main+0x304>)
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b6f      	ldr	r3, [pc, #444]	@ (8001710 <main+0x318>)
 8001554:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c4_cmd;
 8001556:	4b6f      	ldr	r3, [pc, #444]	@ (8001714 <main+0x31c>)
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <main+0x2f8>)
 800155c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2110      	movs	r1, #16
 8001562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001566:	f001 fae5 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800156a:	2364      	movs	r3, #100	@ 0x64
 800156c:	2201      	movs	r2, #1
 800156e:	4960      	ldr	r1, [pc, #384]	@ (80016f0 <main+0x2f8>)
 8001570:	4860      	ldr	r0, [pc, #384]	@ (80016f4 <main+0x2fc>)
 8001572:	f003 f862 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001576:	2364      	movs	r3, #100	@ 0x64
 8001578:	2202      	movs	r2, #2
 800157a:	4960      	ldr	r1, [pc, #384]	@ (80016fc <main+0x304>)
 800157c:	485d      	ldr	r0, [pc, #372]	@ (80016f4 <main+0x2fc>)
 800157e:	f003 f9d2 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2110      	movs	r1, #16
 8001586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158a:	f001 fad3 	bl	8002b34 <HAL_GPIO_WritePin>
	C4 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800158e:	4b5b      	ldr	r3, [pc, #364]	@ (80016fc <main+0x304>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b21b      	sxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <main+0x304>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <main+0x320>)
 80015a6:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c5_cmd;
 80015a8:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <main+0x324>)
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	4b50      	ldr	r3, [pc, #320]	@ (80016f0 <main+0x2f8>)
 80015ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2110      	movs	r1, #16
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b8:	f001 fabc 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80015bc:	2364      	movs	r3, #100	@ 0x64
 80015be:	2201      	movs	r2, #1
 80015c0:	494b      	ldr	r1, [pc, #300]	@ (80016f0 <main+0x2f8>)
 80015c2:	484c      	ldr	r0, [pc, #304]	@ (80016f4 <main+0x2fc>)
 80015c4:	f003 f839 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80015c8:	2364      	movs	r3, #100	@ 0x64
 80015ca:	2202      	movs	r2, #2
 80015cc:	494b      	ldr	r1, [pc, #300]	@ (80016fc <main+0x304>)
 80015ce:	4849      	ldr	r0, [pc, #292]	@ (80016f4 <main+0x2fc>)
 80015d0:	f003 f9a9 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2110      	movs	r1, #16
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f001 faaa 	bl	8002b34 <HAL_GPIO_WritePin>
	C5 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80015e0:	4b46      	ldr	r3, [pc, #280]	@ (80016fc <main+0x304>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <main+0x304>)
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <main+0x328>)
 80015f8:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c6_cmd;
 80015fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001724 <main+0x32c>)
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <main+0x2f8>)
 8001600:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2110      	movs	r1, #16
 8001606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160a:	f001 fa93 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800160e:	2364      	movs	r3, #100	@ 0x64
 8001610:	2201      	movs	r2, #1
 8001612:	4937      	ldr	r1, [pc, #220]	@ (80016f0 <main+0x2f8>)
 8001614:	4837      	ldr	r0, [pc, #220]	@ (80016f4 <main+0x2fc>)
 8001616:	f003 f810 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 800161a:	2364      	movs	r3, #100	@ 0x64
 800161c:	2202      	movs	r2, #2
 800161e:	4937      	ldr	r1, [pc, #220]	@ (80016fc <main+0x304>)
 8001620:	4834      	ldr	r0, [pc, #208]	@ (80016f4 <main+0x2fc>)
 8001622:	f003 f980 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001626:	2201      	movs	r2, #1
 8001628:	2110      	movs	r1, #16
 800162a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162e:	f001 fa81 	bl	8002b34 <HAL_GPIO_WritePin>
	C6 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001632:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <main+0x304>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b21b      	sxth	r3, r3
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <main+0x304>)
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <main+0x330>)
 800164a:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c7_cmd;
 800164c:	4b37      	ldr	r3, [pc, #220]	@ (800172c <main+0x334>)
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <main+0x2f8>)
 8001652:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2110      	movs	r1, #16
 8001658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165c:	f001 fa6a 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001660:	2364      	movs	r3, #100	@ 0x64
 8001662:	2201      	movs	r2, #1
 8001664:	4922      	ldr	r1, [pc, #136]	@ (80016f0 <main+0x2f8>)
 8001666:	4823      	ldr	r0, [pc, #140]	@ (80016f4 <main+0x2fc>)
 8001668:	f002 ffe7 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 800166c:	2364      	movs	r3, #100	@ 0x64
 800166e:	2202      	movs	r2, #2
 8001670:	4922      	ldr	r1, [pc, #136]	@ (80016fc <main+0x304>)
 8001672:	4820      	ldr	r0, [pc, #128]	@ (80016f4 <main+0x2fc>)
 8001674:	f003 f957 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001680:	f001 fa58 	bl	8002b34 <HAL_GPIO_WritePin>
	C7 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <main+0x304>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b21b      	sxth	r3, r3
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b21a      	sxth	r2, r3
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <main+0x304>)
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	b29a      	uxth	r2, r3
 800169a:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <main+0x338>)
 800169c:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c8_cmd;
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <main+0x33c>)
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <main+0x2f8>)
 80016a4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2110      	movs	r1, #16
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ae:	f001 fa41 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80016b2:	2364      	movs	r3, #100	@ 0x64
 80016b4:	2201      	movs	r2, #1
 80016b6:	490e      	ldr	r1, [pc, #56]	@ (80016f0 <main+0x2f8>)
 80016b8:	480e      	ldr	r0, [pc, #56]	@ (80016f4 <main+0x2fc>)
 80016ba:	f002 ffbe 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80016be:	2364      	movs	r3, #100	@ 0x64
 80016c0:	2202      	movs	r2, #2
 80016c2:	490e      	ldr	r1, [pc, #56]	@ (80016fc <main+0x304>)
 80016c4:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <main+0x2fc>)
 80016c6:	f003 f92e 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2110      	movs	r1, #16
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d2:	f001 fa2f 	bl	8002b34 <HAL_GPIO_WritePin>
	C8 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <main+0x304>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <main+0x304>)
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	e028      	b.n	8001738 <main+0x340>
 80016e6:	bf00      	nop
 80016e8:	58000400 	.word	0x58000400
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000248 	.word	0x20000248
 80016f4:	200001b8 	.word	0x200001b8
 80016f8:	20000009 	.word	0x20000009
 80016fc:	2000024c 	.word	0x2000024c
 8001700:	2000021c 	.word	0x2000021c
 8001704:	2000000a 	.word	0x2000000a
 8001708:	2000021e 	.word	0x2000021e
 800170c:	2000000b 	.word	0x2000000b
 8001710:	20000220 	.word	0x20000220
 8001714:	2000000c 	.word	0x2000000c
 8001718:	20000222 	.word	0x20000222
 800171c:	2000000d 	.word	0x2000000d
 8001720:	20000224 	.word	0x20000224
 8001724:	2000000e 	.word	0x2000000e
 8001728:	20000226 	.word	0x20000226
 800172c:	2000000f 	.word	0x2000000f
 8001730:	20000228 	.word	0x20000228
 8001734:	20000010 	.word	0x20000010
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21b      	sxth	r3, r3
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b94      	ldr	r3, [pc, #592]	@ (8001994 <main+0x59c>)
 8001742:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c9_cmd;
 8001744:	4b94      	ldr	r3, [pc, #592]	@ (8001998 <main+0x5a0>)
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	4b94      	ldr	r3, [pc, #592]	@ (800199c <main+0x5a4>)
 800174a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2110      	movs	r1, #16
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f001 f9ee 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001758:	2364      	movs	r3, #100	@ 0x64
 800175a:	2201      	movs	r2, #1
 800175c:	498f      	ldr	r1, [pc, #572]	@ (800199c <main+0x5a4>)
 800175e:	4890      	ldr	r0, [pc, #576]	@ (80019a0 <main+0x5a8>)
 8001760:	f002 ff6b 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001764:	2364      	movs	r3, #100	@ 0x64
 8001766:	2202      	movs	r2, #2
 8001768:	498e      	ldr	r1, [pc, #568]	@ (80019a4 <main+0x5ac>)
 800176a:	488d      	ldr	r0, [pc, #564]	@ (80019a0 <main+0x5a8>)
 800176c:	f003 f8db 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001778:	f001 f9dc 	bl	8002b34 <HAL_GPIO_WritePin>
	C9 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800177c:	4b89      	ldr	r3, [pc, #548]	@ (80019a4 <main+0x5ac>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b21b      	sxth	r3, r3
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b87      	ldr	r3, [pc, #540]	@ (80019a4 <main+0x5ac>)
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b85      	ldr	r3, [pc, #532]	@ (80019a8 <main+0x5b0>)
 8001794:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c10_cmd;
 8001796:	4b85      	ldr	r3, [pc, #532]	@ (80019ac <main+0x5b4>)
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	4b80      	ldr	r3, [pc, #512]	@ (800199c <main+0x5a4>)
 800179c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2110      	movs	r1, #16
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a6:	f001 f9c5 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80017aa:	2364      	movs	r3, #100	@ 0x64
 80017ac:	2201      	movs	r2, #1
 80017ae:	497b      	ldr	r1, [pc, #492]	@ (800199c <main+0x5a4>)
 80017b0:	487b      	ldr	r0, [pc, #492]	@ (80019a0 <main+0x5a8>)
 80017b2:	f002 ff42 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80017b6:	2364      	movs	r3, #100	@ 0x64
 80017b8:	2202      	movs	r2, #2
 80017ba:	497a      	ldr	r1, [pc, #488]	@ (80019a4 <main+0x5ac>)
 80017bc:	4878      	ldr	r0, [pc, #480]	@ (80019a0 <main+0x5a8>)
 80017be:	f003 f8b2 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2110      	movs	r1, #16
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ca:	f001 f9b3 	bl	8002b34 <HAL_GPIO_WritePin>
	C10 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80017ce:	4b75      	ldr	r3, [pc, #468]	@ (80019a4 <main+0x5ac>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <main+0x5ac>)
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b72      	ldr	r3, [pc, #456]	@ (80019b0 <main+0x5b8>)
 80017e6:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = start_conversion_cmd;
 80017e8:	4b72      	ldr	r3, [pc, #456]	@ (80019b4 <main+0x5bc>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b6b      	ldr	r3, [pc, #428]	@ (800199c <main+0x5a4>)
 80017ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2110      	movs	r1, #16
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f8:	f001 f99c 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80017fc:	2364      	movs	r3, #100	@ 0x64
 80017fe:	2201      	movs	r2, #1
 8001800:	4966      	ldr	r1, [pc, #408]	@ (800199c <main+0x5a4>)
 8001802:	4867      	ldr	r0, [pc, #412]	@ (80019a0 <main+0x5a8>)
 8001804:	f002 ff19 	bl	800463a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2110      	movs	r1, #16
 800180c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001810:	f001 f990 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001814:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001818:	f7fe feeb 	bl	80005f2 <HAL_Delay>

	TX_BUFFER[0] = read_adc_cmd;
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <main+0x5c0>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b5e      	ldr	r3, [pc, #376]	@ (800199c <main+0x5a4>)
 8001822:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2110      	movs	r1, #16
 8001828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182c:	f001 f982 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	2201      	movs	r2, #1
 8001834:	4959      	ldr	r1, [pc, #356]	@ (800199c <main+0x5a4>)
 8001836:	485a      	ldr	r0, [pc, #360]	@ (80019a0 <main+0x5a8>)
 8001838:	f002 feff 	bl	800463a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, 100);
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	2206      	movs	r2, #6
 8001840:	4958      	ldr	r1, [pc, #352]	@ (80019a4 <main+0x5ac>)
 8001842:	4857      	ldr	r0, [pc, #348]	@ (80019a0 <main+0x5a8>)
 8001844:	f003 f86f 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	2110      	movs	r1, #16
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f001 f970 	bl	8002b34 <HAL_GPIO_WritePin>
	raw_temp = (RX_BUFFER[0] << 16) | (RX_BUFFER[1] << 8) | (RX_BUFFER[2]);
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <main+0x5ac>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	4b52      	ldr	r3, [pc, #328]	@ (80019a4 <main+0x5ac>)
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4313      	orrs	r3, r2
 8001862:	4a50      	ldr	r2, [pc, #320]	@ (80019a4 <main+0x5ac>)
 8001864:	7892      	ldrb	r2, [r2, #2]
 8001866:	4313      	orrs	r3, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <main+0x5c4>)
 800186c:	601a      	str	r2, [r3, #0]
	raw_pressure = (RX_BUFFER[3] << 16) | (RX_BUFFER[4] << 8) | (RX_BUFFER[5]);
 800186e:	4b4d      	ldr	r3, [pc, #308]	@ (80019a4 <main+0x5ac>)
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <main+0x5ac>)
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	4313      	orrs	r3, r2
 800187c:	4a49      	ldr	r2, [pc, #292]	@ (80019a4 <main+0x5ac>)
 800187e:	7952      	ldrb	r2, [r2, #5]
 8001880:	4313      	orrs	r3, r2
 8001882:	461a      	mov	r2, r3
 8001884:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <main+0x5c8>)
 8001886:	601a      	str	r2, [r3, #0]
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 8001888:	4b4e      	ldr	r3, [pc, #312]	@ (80019c4 <main+0x5cc>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <main+0x5c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80019c8 <main+0x5d0>
 80018a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / (float) 34359738368)
 80018ac:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <main+0x5d4>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018b8:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <main+0x5c8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c8:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 80019d0 <main+0x5d8>
 80018cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018d0:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / (float) 64));
 80018d4:	4b3f      	ldr	r3, [pc, #252]	@ (80019d4 <main+0x5dc>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018e0:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 80019d8 <main+0x5e0>
 80018e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <main+0x5e4>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	offset = (float) C6 + (float) C7 * temperature / (float) 512;
 80018f2:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <main+0x5e8>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018fe:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <main+0x5ec>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800190a:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <main+0x5e4>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001914:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80019e8 <main+0x5f0>
 8001918:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <main+0x5f4>)
 8001922:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + (float) C9 * temperature / (float) 512;
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <main+0x59c>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <main+0x5b0>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <main+0x5e4>)
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001948:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 80019e8 <main+0x5f0>
 800194c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <main+0x5f8>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
	pressure = (float) raw_pressure * sensitivity / (float) 4194304 - offset;
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <main+0x5c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001966:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <main+0x5f8>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001970:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80019f4 <main+0x5fc>
 8001974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <main+0x5f4>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <main+0x600>)
 8001984:	edc3 7a00 	vstr	s15, [r3]

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001988:	f7fe fd02 	bl	8000390 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800198c:	f7fe fe56 	bl	800063c <MX_APPE_Process>
 8001990:	e7fc      	b.n	800198c <main+0x594>
 8001992:	bf00      	nop
 8001994:	2000022a 	.word	0x2000022a
 8001998:	20000011 	.word	0x20000011
 800199c:	20000248 	.word	0x20000248
 80019a0:	200001b8 	.word	0x200001b8
 80019a4:	2000024c 	.word	0x2000024c
 80019a8:	2000022c 	.word	0x2000022c
 80019ac:	20000012 	.word	0x20000012
 80019b0:	2000022e 	.word	0x2000022e
 80019b4:	20000013 	.word	0x20000013
 80019b8:	20000014 	.word	0x20000014
 80019bc:	20000234 	.word	0x20000234
 80019c0:	20000230 	.word	0x20000230
 80019c4:	2000021c 	.word	0x2000021c
 80019c8:	4e000000 	.word	0x4e000000
 80019cc:	20000220 	.word	0x20000220
 80019d0:	51000000 	.word	0x51000000
 80019d4:	2000021e 	.word	0x2000021e
 80019d8:	42800000 	.word	0x42800000
 80019dc:	20000238 	.word	0x20000238
 80019e0:	20000226 	.word	0x20000226
 80019e4:	20000228 	.word	0x20000228
 80019e8:	44000000 	.word	0x44000000
 80019ec:	2000023c 	.word	0x2000023c
 80019f0:	20000240 	.word	0x20000240
 80019f4:	4a800000 	.word	0x4a800000
 80019f8:	20000244 	.word	0x20000244

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b098      	sub	sp, #96	@ 0x60
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2244      	movs	r2, #68	@ 0x44
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f007 fa52 	bl	8008eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a22:	f001 f949 	bl	8002cb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001a26:	2010      	movs	r0, #16
 8001a28:	f7ff fcb7 	bl	800139a <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a36:	2301      	movs	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a40:	2340      	movs	r3, #64	@ 0x40
 8001a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fc83 	bl	8003358 <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001a58:	f000 f8e9 	bl	8001c2e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a5c:	236f      	movs	r3, #111	@ 0x6f
 8001a5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a60:	2302      	movs	r3, #2
 8001a62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 ffa1 	bl	80039c4 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a88:	f000 f8d1 	bl	8001c2e <Error_Handler>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3760      	adds	r7, #96	@ 0x60
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	@ 0x30
 8001a98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2230      	movs	r2, #48	@ 0x30
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 fa07 	bl	8008eb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001aa6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001aaa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fb17 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001ac8:	f000 f8b1 	bl	8001c2e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001acc:	bf00      	nop
 8001ace:	3730      	adds	r7, #48	@ 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_IPCC_Init+0x20>)
 8001ada:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <MX_IPCC_Init+0x24>)
 8001adc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_IPCC_Init+0x20>)
 8001ae0:	f001 f864 	bl	8002bac <HAL_IPCC_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001aea:	f000 f8a0 	bl	8001c2e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000158 	.word	0x20000158
 8001af8:	58000c00 	.word	0x58000c00

08001afc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b12:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <MX_RTC_Init+0x58>)
 8001b14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b1e:	220f      	movs	r2, #15
 8001b20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001b28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b3c:	4808      	ldr	r0, [pc, #32]	@ (8001b60 <MX_RTC_Init+0x54>)
 8001b3e:	f002 fbcd 	bl	80042dc <HAL_RTC_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001b48:	f000 f871 	bl	8001c2e <Error_Handler>

  /** Enable the WakeUp
  */
  /* USER CODE BEGIN RTC_Init 2 */
  // Allow Stop mode for the App (so idle can drop to Stop2)
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f006 fef2 	bl	8008938 <UTIL_LPM_SetStopMode>

  // Disallow Off/Standby for now (we’ll enable later)
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001b54:	2101      	movs	r1, #1
 8001b56:	2001      	movs	r0, #1
 8001b58:	f006 ff1e 	bl	8008998 <UTIL_LPM_SetOffMode>
  /* USER CODE END RTC_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000194 	.word	0x20000194
 8001b64:	40002800 	.word	0x40002800

08001b68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001be0 <MX_SPI1_Init+0x78>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <MX_SPI1_Init+0x74>)
 8001bc8:	f002 fc94 	bl	80044f4 <HAL_SPI_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bd2:	f000 f82c 	bl	8001c2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200001b8 	.word	0x200001b8
 8001be0:	40013000 	.word	0x40013000

08001be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff fbe4 	bl	80013c6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2110      	movs	r1, #16
 8001c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c06:	f000 ff95 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c22:	f000 fe1f 	bl	8002864 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c32:	b672      	cpsid	i
}
 8001c34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c36:	bf00      	nop
 8001c38:	e7fd      	b.n	8001c36 <Error_Handler+0x8>
	...

08001c3c <Sleep_RegisterTasks>:
// Forward decl
static void StartAdvertisingTask(void);
static void Sleep_WakeCb(void);

void Sleep_RegisterTasks(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  // Post-wake task (sequencer)
  UTIL_SEQ_RegTask(1 << CFG_TASK_ADV_ON_WAKE_ID, UTIL_SEQ_RFU, StartAdvertisingTask);
 8001c40:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <Sleep_RegisterTasks+0x20>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	2008      	movs	r0, #8
 8001c46:	f007 f809 	bl	8008c5c <UTIL_SEQ_RegTask>

  // Create a one-shot Timer Server timer that will wake us from Stop2
  HW_TS_Create(0, &s_sleepTimerId, hw_ts_SingleShot, Sleep_WakeCb);
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <Sleep_RegisterTasks+0x24>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4905      	ldr	r1, [pc, #20]	@ (8001c64 <Sleep_RegisterTasks+0x28>)
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff fa11 	bl	8001078 <HW_TS_Create>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	08001cbd 	.word	0x08001cbd
 8001c60:	08001cad 	.word	0x08001cad
 8001c64:	20000254 	.word	0x20000254

08001c68 <Sleep_ArmWakeupAndIdle>:

void Sleep_ArmWakeupAndIdle(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  // Convert seconds to Timer Server ticks (tick period is CFG_TS_TICK_VAL microseconds)
  const uint32_t us = WAKE_PERIOD_SEC * 1000000UL;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <Sleep_ArmWakeupAndIdle+0x38>)
 8001c70:	607b      	str	r3, [r7, #4]
  const uint32_t ticks = (us + (CFG_TS_TICK_VAL - 1)) / CFG_TS_TICK_VAL; // ceil div, avoid 0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f203 13e7 	addw	r3, r3, #487	@ 0x1e7
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <Sleep_ArmWakeupAndIdle+0x3c>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	09db      	lsrs	r3, r3, #7
 8001c80:	603b      	str	r3, [r7, #0]

  HW_TS_Stop(s_sleepTimerId);
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <Sleep_ArmWakeupAndIdle+0x40>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fa70 	bl	800116c <HW_TS_Stop>
  HW_TS_Start(s_sleepTimerId, ticks);
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <Sleep_ArmWakeupAndIdle+0x40>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff faee 	bl	8001274 <HW_TS_Start>

  // return to main; UTIL_SEQ_Idle() will enter Stop2
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	00989680 	.word	0x00989680
 8001ca4:	4325c53f 	.word	0x4325c53f
 8001ca8:	20000254 	.word	0x20000254

08001cac <Sleep_WakeCb>:
{
  HW_TS_Stop(s_sleepTimerId);
}

static void Sleep_WakeCb(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  // We’re in Timer Server context; just post a task
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_ON_WAKE_ID, CFG_SCH_PRIO_0);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2008      	movs	r0, #8
 8001cb4:	f006 fff4 	bl	8008ca0 <UTIL_SEQ_SetTask>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <StartAdvertisingTask>:

static void StartAdvertisingTask(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  // Start advertising after wake
  APP_BLE_StartAdvertising();
 8001cc0:	f005 fd82 	bl	80077c8 <APP_BLE_StartAdvertising>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LL_PWR_SetPowerMode>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <LL_PWR_SetPowerMode+0x24>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4904      	ldr	r1, [pc, #16]	@ (8001cec <LL_PWR_SetPowerMode+0x24>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	58000400 	.word	0x58000400

08001cf0 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <LL_PWR_ClearFlag_WU+0x14>)
 8001cf6:	2209      	movs	r2, #9
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	58000400 	.word	0x58000400

08001d08 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1a:	d101      	bne.n	8001d20 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	58000400 	.word	0x58000400

08001d30 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d42:	d101      	bne.n	8001d48 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	58000400 	.word	0x58000400

08001d58 <LL_RCC_HSI_Enable>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_HSI_IsReady>:
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d88:	d101      	bne.n	8001d8e <LL_RCC_HSI_IsReady+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_RCC_HSI_IsReady+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_RCC_SetSysClkSource>:
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 0203 	bic.w	r2, r3, #3
 8001dac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_GetSysClkSource>:
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	f023 0203 	bic.w	r2, r3, #3
 8001dec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_LPM_EnableSleep>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <LL_LPM_EnableSleep+0x1c>)
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <LL_LPM_EnableSleep+0x1c>)
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	6113      	str	r3, [r2, #16]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6113      	str	r3, [r2, #16]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	3220      	adds	r2, #32
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <LL_HSEM_1StepLock+0x2c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d001      	beq.n	8001e82 <LL_HSEM_1StepLock+0x1e>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_HSEM_1StepLock+0x20>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	80000400 	.word	0x80000400

08001e94 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001ebe:	f000 fb17 	bl	80024f0 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001ec2:	f7ff ff9e 	bl	8001e02 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001ec6:	f000 f835 	bl	8001f34 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001eca:	f7ff ff11 	bl	8001cf0 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f7ff fefa 	bl	8001cc8 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ed4:	f7ff ffb6 	bl	8001e44 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001ed8:	bf00      	nop
}
 8001eda:	bd80      	pop	{r7, pc}

08001edc <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001ee0:	bf00      	nop
}
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001eee:	f000 faff 	bl	80024f0 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001ef2:	f000 f81f 	bl	8001f34 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff fee6 	bl	8001cc8 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001efc:	f7ff ffa2 	bl	8001e44 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001f00:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001f02:	bf00      	nop
}
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001f0a:	f000 f84f 	bl	8001fac <ExitLowPower>

  HAL_ResumeTick();
 8001f0e:	f000 faff 	bl	8002510 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001f12:	bf00      	nop
}
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001f1a:	f000 fae9 	bl	80024f0 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001f1e:	f7ff ff81 	bl	8001e24 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001f22:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001f24:	bf00      	nop
}
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001f2c:	f000 faf0 	bl	8002510 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001f30:	bf00      	nop
}
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001f38:	bf00      	nop
 8001f3a:	2103      	movs	r1, #3
 8001f3c:	4819      	ldr	r0, [pc, #100]	@ (8001fa4 <EnterLowPower+0x70>)
 8001f3e:	f7ff ff91 	bl	8001e64 <LL_HSEM_1StepLock>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f8      	bne.n	8001f3a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4816      	ldr	r0, [pc, #88]	@ (8001fa4 <EnterLowPower+0x70>)
 8001f4c:	f7ff ff8a 	bl	8001e64 <LL_HSEM_1StepLock>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d117      	bne.n	8001f86 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001f56:	f7ff feeb 	bl	8001d30 <LL_PWR_IsActiveFlag_C2DS>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d104      	bne.n	8001f6a <EnterLowPower+0x36>
 8001f60:	f7ff fed2 	bl	8001d08 <LL_PWR_IsActiveFlag_C2SB>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d015      	beq.n	8001f96 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <EnterLowPower+0x70>)
 8001f70:	f7ff ff90 	bl	8001e94 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001f74:	f000 f834 	bl	8001fe0 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <EnterLowPower+0x74>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <EnterLowPower+0x74>)
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e007      	b.n	8001f96 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001f86:	f000 f82b 	bl	8001fe0 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <EnterLowPower+0x74>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <EnterLowPower+0x74>)
 8001f90:	f023 0307 	bic.w	r3, r3, #7
 8001f94:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2103      	movs	r1, #3
 8001f9a:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <EnterLowPower+0x70>)
 8001f9c:	f7ff ff7a 	bl	8001e94 <LL_HSEM_ReleaseLock>

  return;
 8001fa0:	bf00      	nop
}
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	58001400 	.word	0x58001400
 8001fa8:	58004000 	.word	0x58004000

08001fac <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4809      	ldr	r0, [pc, #36]	@ (8001fdc <ExitLowPower+0x30>)
 8001fb6:	f7ff ff6d 	bl	8001e94 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001fba:	bf00      	nop
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	4807      	ldr	r0, [pc, #28]	@ (8001fdc <ExitLowPower+0x30>)
 8001fc0:	f7ff ff50 	bl	8001e64 <LL_HSEM_1StepLock>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f8      	bne.n	8001fbc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001fca:	f7ff fefa 	bl	8001dc2 <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2103      	movs	r1, #3
 8001fd2:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <ExitLowPower+0x30>)
 8001fd4:	f7ff ff5e 	bl	8001e94 <LL_HSEM_ReleaseLock>

  return;
 8001fd8:	bf00      	nop
}
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58001400 	.word	0x58001400

08001fe0 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001fe4:	f7ff feb8 	bl	8001d58 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001fe8:	bf00      	nop
 8001fea:	f7ff fec4 	bl	8001d76 <LL_RCC_HSI_IsReady>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0fa      	beq.n	8001fea <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff fed0 	bl	8001d9a <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff feed 	bl	8001dda <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002000:	bf00      	nop
 8002002:	f7ff fede 	bl	8001dc2 <LL_RCC_GetSysClkSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b04      	cmp	r3, #4
 800200a:	d1fa      	bne.n	8002002 <Switch_On_HSI+0x22>
  return;
 800200c:	bf00      	nop
}
 800200e:	bd80      	pop	{r7, pc}

08002010 <LL_RCC_EnableRTC>:
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_AHB2_GRP1_EnableClock>:
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002040:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4313      	orrs	r3, r2
 8002048:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4313      	orrs	r3, r2
 800207a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002088:	68fb      	ldr	r3, [r7, #12]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80020a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4313      	orrs	r3, r2
 80020de:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80020fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002102:	f7ff ffaf 	bl	8002064 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	202e      	movs	r0, #46	@ 0x2e
 800210c:	f000 fb4b 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002110:	202e      	movs	r0, #46	@ 0x2e
 8002112:	f000 fb62 	bl	80027da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_IPCC_MspInit+0x44>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d113      	bne.n	8002156 <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800212e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002132:	f7ff ff97 	bl	8002064 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	202c      	movs	r0, #44	@ 0x2c
 800213c:	f000 fb33 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002140:	202c      	movs	r0, #44	@ 0x2c
 8002142:	f000 fb4a 	bl	80027da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	202d      	movs	r0, #45	@ 0x2d
 800214c:	f000 fb2b 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002150:	202d      	movs	r0, #45	@ 0x2d
 8002152:	f000 fb42 	bl	80027da <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	58000c00 	.word	0x58000c00

08002164 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	@ 0x38
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	2230      	movs	r2, #48	@ 0x30
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f006 fe9d 	bl	8008eb4 <memset>
  if(hrtc->Instance==RTC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <HAL_RTC_MspInit+0x64>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d11d      	bne.n	80021c0 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002184:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002188:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800218a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800218e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f001 ffab 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021a0:	f7ff fd45 	bl	8001c2e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a4:	f7ff ff34 	bl	8002010 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80021ac:	f7ff ff73 	bl	8002096 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 faf6 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f000 fb0d 	bl	80027da <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80021c0:	bf00      	nop
 80021c2:	3738      	adds	r7, #56	@ 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40002800 	.word	0x40002800

080021cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <HAL_SPI_MspInit+0x5c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d117      	bne.n	800221e <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80021f2:	f7ff ff69 	bl	80020c8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7ff ff1b 	bl	8002032 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 80021fc:	23e0      	movs	r3, #224	@ 0xe0
 80021fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220c:	2305      	movs	r3, #5
 800220e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221a:	f000 fb23 	bl	8002864 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800221e:	bf00      	nop
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40013000 	.word	0x40013000

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <NMI_Handler+0x4>

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <MemManage_Handler+0x4>

08002244 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <UsageFault_Handler+0x4>

08002254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002282:	f000 f8fd 	bl	8002480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}

0800228a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800228e:	f7fe fd51 	bl	8000d34 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}

08002296 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800229a:	f006 f981 	bl	80085a0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80022a6:	f006 f9b1 	bl	800860c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80022b2:	f000 fc57 	bl	8002b64 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <SystemInit+0x90>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	4a21      	ldr	r2, [pc, #132]	@ (800234c <SystemInit+0x90>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80022e8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022f4:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <SystemInit+0x94>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002306:	f023 0305 	bic.w	r3, r3, #5
 800230a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	4a0b      	ldr	r2, [pc, #44]	@ (8002354 <SystemInit+0x98>)
 8002328:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002338:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00
 8002350:	faf6fefb 	.word	0xfaf6fefb
 8002354:	22041000 	.word	0x22041000

08002358 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002358:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235c:	3304      	adds	r3, #4

0800235e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002360:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002362:	d3f9      	bcc.n	8002358 <CopyDataInit>
  bx lr
 8002364:	4770      	bx	lr

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002366:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002368:	3004      	adds	r0, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800236a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>
  bx lr
 800236e:	4770      	bx	lr

08002370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002374:	f7ff ffa2 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002378:	480b      	ldr	r0, [pc, #44]	@ (80023a8 <LoopForever+0x6>)
 800237a:	490c      	ldr	r1, [pc, #48]	@ (80023ac <LoopForever+0xa>)
 800237c:	4a0c      	ldr	r2, [pc, #48]	@ (80023b0 <LoopForever+0xe>)
 800237e:	2300      	movs	r3, #0
 8002380:	f7ff ffed 	bl	800235e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002384:	480b      	ldr	r0, [pc, #44]	@ (80023b4 <LoopForever+0x12>)
 8002386:	490c      	ldr	r1, [pc, #48]	@ (80023b8 <LoopForever+0x16>)
 8002388:	4a0c      	ldr	r2, [pc, #48]	@ (80023bc <LoopForever+0x1a>)
 800238a:	2300      	movs	r3, #0
 800238c:	f7ff ffe7 	bl	800235e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002390:	480b      	ldr	r0, [pc, #44]	@ (80023c0 <LoopForever+0x1e>)
 8002392:	490c      	ldr	r1, [pc, #48]	@ (80023c4 <LoopForever+0x22>)
 8002394:	2300      	movs	r3, #0
 8002396:	f7ff ffe8 	bl	800236a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800239a:	f006 fd93 	bl	8008ec4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800239e:	f7ff f82b 	bl	80013f8 <main>

080023a2 <LoopForever>:

LoopForever:
  b LoopForever
 80023a2:	e7fe      	b.n	80023a2 <LoopForever>
  ldr   r0, =_estack
 80023a4:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000050 	.word	0x20000050
 80023b0:	080091c4 	.word	0x080091c4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023b4:	200301e4 	.word	0x200301e4
 80023b8:	20030a67 	.word	0x20030a67
 80023bc:	08009252 	.word	0x08009252
  INIT_BSS _sbss, _ebss
 80023c0:	2000009c 	.word	0x2000009c
 80023c4:	20000410 	.word	0x20000410

080023c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC1_IRQHandler>
	...

080023cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_Init+0x3c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a0b      	ldr	r2, [pc, #44]	@ (8002408 <HAL_Init+0x3c>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e2:	2003      	movs	r0, #3
 80023e4:	f000 f9d4 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e8:	200f      	movs	r0, #15
 80023ea:	f000 f80f 	bl	800240c <HAL_InitTick>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	e001      	b.n	80023fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023fa:	f7ff fe7e 	bl	80020fa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	58004000 	.word	0x58004000

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002418:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <HAL_InitTick+0x6c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d024      	beq.n	800246a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002420:	f001 fc7c 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <HAL_InitTick+0x6c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002430:	fbb3 f3f1 	udiv	r3, r3, r1
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f9ea 	bl	8002812 <HAL_SYSTICK_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	d809      	bhi.n	800245e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244a:	2200      	movs	r2, #0
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	f04f 30ff 	mov.w	r0, #4294967295
 8002452:	f000 f9a8 	bl	80027a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002456:	4a09      	ldr	r2, [pc, #36]	@ (800247c <HAL_InitTick+0x70>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e007      	b.n	800246e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e004      	b.n	800246e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e001      	b.n	800246e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000028 	.word	0x20000028
 800247c:	20000024 	.word	0x20000024

08002480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x20>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <HAL_IncTick+0x24>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000028 	.word	0x20000028
 80024a4:	20000258 	.word	0x20000258

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000258 	.word	0x20000258

080024c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <HAL_GetTickPrio+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000024 	.word	0x20000024

080024d8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_GetTickFreq+0x14>)
 80024de:	781b      	ldrb	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000028 	.word	0x20000028

080024f0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_SuspendTick+0x1c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_SuspendTick+0x1c>)
 80024fa:	f023 0302 	bic.w	r3, r3, #2
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_ResumeTick+0x1c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_ResumeTick+0x1c>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	@ (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db12      	blt.n	8002608 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	490a      	ldr	r1, [pc, #40]	@ (8002614 <__NVIC_DisableIRQ+0x44>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	3320      	adds	r3, #32
 80025f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025fc:	f3bf 8f4f 	dsb	sy
}
 8002600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002602:	f3bf 8f6f 	isb	sy
}
 8002606:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0c      	blt.n	8002644 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	@ (8002650 <__NVIC_SetPendingIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	3340      	adds	r3, #64	@ 0x40
 8002640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0c      	blt.n	8002680 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	@ (800268c <__NVIC_ClearPendingIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	3360      	adds	r3, #96	@ 0x60
 800267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	@ (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	@ (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	@ (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fec9 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff fee0 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff90 	bl	80026e4 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5f 	bl	8002690 <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fed3 	bl	8002594 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fee3 	bl	80025d0 <__NVIC_DisableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ff96 	bl	800274c <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff feed 	bl	8002618 <__NVIC_SetPendingIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fefd 	bl	8002654 <__NVIC_ClearPendingIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	e146      	b.n	8002b02 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8138 	beq.w	8002afc <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_GPIO_Init+0x40>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d017      	beq.n	8002942 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8092 	beq.w	8002afc <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80029d8:	4a51      	ldr	r2, [pc, #324]	@ (8002b20 <HAL_GPIO_Init+0x2bc>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a02:	d013      	beq.n	8002a2c <HAL_GPIO_Init+0x1c8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a47      	ldr	r2, [pc, #284]	@ (8002b24 <HAL_GPIO_Init+0x2c0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1c4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	@ (8002b28 <HAL_GPIO_Init+0x2c4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1c0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a45      	ldr	r2, [pc, #276]	@ (8002b2c <HAL_GPIO_Init+0x2c8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1bc>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1ca>
 8002a20:	2307      	movs	r3, #7
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1ca>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1ca>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1ca>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a3e:	4938      	ldr	r1, [pc, #224]	@ (8002b20 <HAL_GPIO_Init+0x2bc>)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a4c:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a70:	4a2f      	ldr	r2, [pc, #188]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a76:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a9a:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aa0:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002ace:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002af4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b30 <HAL_GPIO_Init+0x2cc>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f aeb1 	bne.w	8002874 <HAL_GPIO_Init+0x10>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40010000 	.word	0x40010000
 8002b24:	48000400 	.word	0x48000400
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	48001000 	.word	0x48001000
 8002b30:	58000800 	.word	0x58000800

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_HSEM_IRQHandler+0x30>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_HSEM_IRQHandler+0x30>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4906      	ldr	r1, [pc, #24]	@ (8002b94 <HAL_HSEM_IRQHandler+0x30>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <HAL_HSEM_IRQHandler+0x30>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f807 	bl	8002b98 <HAL_HSEM_FreeCallback>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	58001500 	.word	0x58001500

08002b98 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01e      	beq.n	8002bfc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_IPCC_Init+0x60>)
 8002bc0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff faa4 	bl	800211c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002bd4:	68b8      	ldr	r0, [r7, #8]
 8002bd6:	f000 f85b 	bl	8002c90 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f82c 	bl	8002c44 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002bfa:	e001      	b.n	8002c00 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	58000c00 	.word	0x58000c00

08002c10 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e00f      	b.n	8002c72 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c88 <IPCC_SetDefaultCallbacks+0x44>)
 8002c5c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3306      	adds	r3, #6
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	4a08      	ldr	r2, [pc, #32]	@ (8002c8c <IPCC_SetDefaultCallbacks+0x48>)
 8002c6a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d9ec      	bls.n	8002c52 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08002c11 	.word	0x08002c11
 8002c8c:	08002c2b 	.word	0x08002c2b

08002c90 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223f      	movs	r2, #63	@ 0x3f
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	58000400 	.word	0x58000400

08002cd8 <LL_PWR_EnableSRAM2Retention>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce6:	6093      	str	r3, [r2, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	58000400 	.word	0x58000400

08002cf8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002cfc:	f7ff ffec 	bl	8002cd8 <LL_PWR_EnableSRAM2Retention>
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d16:	d101      	bne.n	8002d1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_RCC_HSE_Enable>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_HSE_Disable>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_RCC_HSE_IsReady>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d76:	d101      	bne.n	8002d7c <LL_RCC_HSE_IsReady+0x18>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <LL_RCC_HSE_IsReady+0x1a>
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_RCC_HSI_Enable>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_HSI_Disable>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002db8:	6013      	str	r3, [r2, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_HSI_IsReady>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d101      	bne.n	8002ddc <LL_RCC_HSI_IsReady+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_RCC_HSI_IsReady+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_LSE_Enable>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_LSE_Disable>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_LSE_EnableBypass>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_LSE_DisableBypass>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_RCC_LSE_IsReady>:
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d101      	bne.n	8002eb2 <LL_RCC_LSE_IsReady+0x18>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <LL_RCC_LSE_IsReady+0x1a>
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_LSI1_Enable>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_LSI1_Disable>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_LSI1_IsReady>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d101      	bne.n	8002f1a <LL_RCC_LSI1_IsReady+0x18>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <LL_RCC_LSI1_IsReady+0x1a>
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_LSI2_Enable>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_LSI2_Disable>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f58:	f023 0304 	bic.w	r3, r3, #4
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_LSI2_IsReady>:
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d101      	bne.n	8002f82 <LL_RCC_LSI2_IsReady+0x18>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_RCC_LSI2_IsReady+0x1a>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_LSI2_SetTrimming>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_MSI_Enable>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_MSI_Disable>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_MSI_IsReady>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d101      	bne.n	800300e <LL_RCC_MSI_IsReady+0x16>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <LL_RCC_MSI_IsReady+0x18>
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_MSI_SetRange>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_RCC_MSI_GetRange>:
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003052:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2bb0      	cmp	r3, #176	@ 0xb0
 8003058:	d901      	bls.n	800305e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800305a:	23b0      	movs	r3, #176	@ 0xb0
 800305c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800305e:	687b      	ldr	r3, [r7, #4]
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_MSI_SetCalibTrimming>:
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_SetSysClkSource>:
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 0203 	bic.w	r2, r3, #3
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_RCC_GetSysClkSource>:
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_RCC_SetAHBPrescaler>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_C2_RCC_SetAHBPrescaler>:
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800310e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_RCC_SetAHB4Prescaler>:
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800313a:	f023 020f 	bic.w	r2, r3, #15
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_RCC_SetAPB1Prescaler>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_RCC_SetAPB2Prescaler>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_RCC_GetAHBPrescaler>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_GetAHB4Prescaler>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_RCC_PLL_Enable>:
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ee:	6013      	str	r3, [r2, #0]
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_RCC_PLL_Disable>:
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_PLL_IsReady>:
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800322a:	d101      	bne.n	8003230 <LL_RCC_PLL_IsReady+0x18>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_RCC_PLL_IsReady+0x1a>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_RCC_PLL_GetN>:
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_RCC_PLL_GetR>:
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_RCC_PLL_GetDivider>:
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_RCC_PLL_GetMainSource>:
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0303 	and.w	r3, r3, #3
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_RCC_IsActiveFlag_HPRE>:
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d101      	bne.n	80032b6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032d6:	d101      	bne.n	80032dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fc:	d101      	bne.n	8003302 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003320:	d101      	bne.n	8003326 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003344:	d101      	bne.n	800334a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b08d      	sub	sp, #52	@ 0x34
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e324      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 808d 	beq.w	8003492 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003378:	f7ff fea1 	bl	80030be <LL_RCC_GetSysClkSource>
 800337c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337e:	f7ff ff82 	bl	8003286 <LL_RCC_PLL_GetMainSource>
 8003382:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x3e>
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d147      	bne.n	8003420 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003392:	2b01      	cmp	r3, #1
 8003394:	d144      	bne.n	8003420 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e308      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80033a6:	f7ff fe4c 	bl	8003042 <LL_RCC_MSI_GetRange>
 80033aa:	4603      	mov	r3, r0
 80033ac:	429c      	cmp	r4, r3
 80033ae:	d914      	bls.n	80033da <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fcc5 	bl	8003d44 <RCC_SetFlashLatencyFromMSIRange>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e2f7      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fe26 	bl	800301a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fe4a 	bl	800306c <LL_RCC_MSI_SetCalibTrimming>
 80033d8:	e013      	b.n	8003402 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fe1b 	bl	800301a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fe3f 	bl	800306c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fca6 	bl	8003d44 <RCC_SetFlashLatencyFromMSIRange>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e2d8      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003402:	f000 fc8b 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003406:	4603      	mov	r3, r0
 8003408:	4aa4      	ldr	r2, [pc, #656]	@ (800369c <HAL_RCC_OscConfig+0x344>)
 800340a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800340c:	4ba4      	ldr	r3, [pc, #656]	@ (80036a0 <HAL_RCC_OscConfig+0x348>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fffb 	bl	800240c <HAL_InitTick>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d039      	beq.n	8003490 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e2c9      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01e      	beq.n	8003466 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003428:	f7ff fdc8 	bl	8002fbc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800342c:	f7ff f83c 	bl	80024a8 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003434:	f7ff f838 	bl	80024a8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2b6      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003446:	f7ff fdd7 	bl	8002ff8 <LL_RCC_MSI_IsReady>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f1      	beq.n	8003434 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fde0 	bl	800301a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fe04 	bl	800306c <LL_RCC_MSI_SetCalibTrimming>
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003466:	f7ff fdb8 	bl	8002fda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800346a:	f7ff f81d 	bl	80024a8 <HAL_GetTick>
 800346e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003472:	f7ff f819 	bl	80024a8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e297      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003484:	f7ff fdb8 	bl	8002ff8 <LL_RCC_MSI_IsReady>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f1      	bne.n	8003472 <HAL_RCC_OscConfig+0x11a>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003490:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d047      	beq.n	800352e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349e:	f7ff fe0e 	bl	80030be <LL_RCC_GetSysClkSource>
 80034a2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a4:	f7ff feef 	bl	8003286 <LL_RCC_PLL_GetMainSource>
 80034a8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_OscConfig+0x164>
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d134      	bne.n	800352e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e275      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_OscConfig+0x180>
 80034d2:	f7ff fc29 	bl	8002d28 <LL_RCC_HSE_Enable>
 80034d6:	e001      	b.n	80034dc <HAL_RCC_OscConfig+0x184>
 80034d8:	f7ff fc35 	bl	8002d46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe ffe0 	bl	80024a8 <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe ffdc 	bl	80024a8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	@ 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e25a      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034fe:	f7ff fc31 	bl	8002d64 <LL_RCC_HSE_IsReady>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f1      	beq.n	80034ec <HAL_RCC_OscConfig+0x194>
 8003508:	e011      	b.n	800352e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe ffcd 	bl	80024a8 <HAL_GetTick>
 800350e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003512:	f7fe ffc9 	bl	80024a8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	@ 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e247      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003524:	f7ff fc1e 	bl	8002d64 <LL_RCC_HSE_IsReady>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f1      	bne.n	8003512 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d04c      	beq.n	80035d4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353a:	f7ff fdc0 	bl	80030be <LL_RCC_GetSysClkSource>
 800353e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003540:	f7ff fea1 	bl	8003286 <LL_RCC_PLL_GetMainSource>
 8003544:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d005      	beq.n	8003558 <HAL_RCC_OscConfig+0x200>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	d10e      	bne.n	8003570 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e227      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fc3d 	bl	8002de8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800356e:	e031      	b.n	80035d4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d019      	beq.n	80035ac <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003578:	f7ff fc06 	bl	8002d88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe ff94 	bl	80024a8 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003584:	f7fe ff90 	bl	80024a8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e20e      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003596:	f7ff fc15 	bl	8002dc4 <LL_RCC_HSI_IsReady>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f1      	beq.n	8003584 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fc1f 	bl	8002de8 <LL_RCC_HSI_SetCalibTrimming>
 80035aa:	e013      	b.n	80035d4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ac:	f7ff fbfb 	bl	8002da6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe ff7a 	bl	80024a8 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe ff76 	bl	80024a8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1f4      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035ca:	f7ff fbfb 	bl	8002dc4 <LL_RCC_HSI_IsReady>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f1      	bne.n	80035b8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a3 	beq.w	8003734 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d076      	beq.n	80036e4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d046      	beq.n	8003690 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003602:	f7ff fc7e 	bl	8002f02 <LL_RCC_LSI1_IsReady>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d113      	bne.n	8003634 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800360c:	f7ff fc57 	bl	8002ebe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003610:	f7fe ff4a 	bl	80024a8 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003618:	f7fe ff46 	bl	80024a8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1c4      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800362a:	f7ff fc6a 	bl	8002f02 <LL_RCC_LSI1_IsReady>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f1      	beq.n	8003618 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003634:	f7ff fc77 	bl	8002f26 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe ff36 	bl	80024a8 <HAL_GetTick>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003640:	f7fe ff32 	bl	80024a8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b03      	cmp	r3, #3
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1b0      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003652:	f7ff fc8a 	bl	8002f6a <LL_RCC_LSI2_IsReady>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f1      	beq.n	8003640 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fc94 	bl	8002f8e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003666:	f7ff fc3b 	bl	8002ee0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fe ff1d 	bl	80024a8 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003672:	f7fe ff19 	bl	80024a8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e197      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003684:	f7ff fc3d 	bl	8002f02 <LL_RCC_LSI1_IsReady>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f1      	bne.n	8003672 <HAL_RCC_OscConfig+0x31a>
 800368e:	e051      	b.n	8003734 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003690:	f7ff fc15 	bl	8002ebe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe ff08 	bl	80024a8 <HAL_GetTick>
 8003698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800369a:	e00c      	b.n	80036b6 <HAL_RCC_OscConfig+0x35e>
 800369c:	20000020 	.word	0x20000020
 80036a0:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036a4:	f7fe ff00 	bl	80024a8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e17e      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036b6:	f7ff fc24 	bl	8002f02 <LL_RCC_LSI1_IsReady>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f1      	beq.n	80036a4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036c0:	f7ff fc42 	bl	8002f48 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036c6:	f7fe feef 	bl	80024a8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e16d      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036d8:	f7ff fc47 	bl	8002f6a <LL_RCC_LSI2_IsReady>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f1      	bne.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 80036e2:	e027      	b.n	8003734 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80036e4:	f7ff fc30 	bl	8002f48 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe fede 	bl	80024a8 <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036f0:	f7fe feda 	bl	80024a8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e158      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003702:	f7ff fc32 	bl	8002f6a <LL_RCC_LSI2_IsReady>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f1      	bne.n	80036f0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800370c:	f7ff fbe8 	bl	8002ee0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe feca 	bl	80024a8 <HAL_GetTick>
 8003714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003718:	f7fe fec6 	bl	80024a8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e144      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800372a:	f7ff fbea 	bl	8002f02 <LL_RCC_LSI1_IsReady>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f1      	bne.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d05b      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003740:	4b9e      	ldr	r3, [pc, #632]	@ (80039bc <HAL_RCC_OscConfig+0x664>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d114      	bne.n	8003776 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800374c:	f7ff fab4 	bl	8002cb8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003750:	f7fe feaa 	bl	80024a8 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fe fea6 	bl	80024a8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e124      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376a:	4b94      	ldr	r3, [pc, #592]	@ (80039bc <HAL_RCC_OscConfig+0x664>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x42c>
 800377e:	f7ff fb48 	bl	8002e12 <LL_RCC_LSE_Enable>
 8003782:	e00c      	b.n	800379e <HAL_RCC_OscConfig+0x446>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d104      	bne.n	8003796 <HAL_RCC_OscConfig+0x43e>
 800378c:	f7ff fb63 	bl	8002e56 <LL_RCC_LSE_EnableBypass>
 8003790:	f7ff fb3f 	bl	8002e12 <LL_RCC_LSE_Enable>
 8003794:	e003      	b.n	800379e <HAL_RCC_OscConfig+0x446>
 8003796:	f7ff fb4d 	bl	8002e34 <LL_RCC_LSE_Disable>
 800379a:	f7ff fb6d 	bl	8002e78 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fe fe7f 	bl	80024a8 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fe fe7b 	bl	80024a8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0f7      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037c4:	f7ff fb69 	bl	8002e9a <LL_RCC_LSE_IsReady>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <HAL_RCC_OscConfig+0x456>
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fe fe6a 	bl	80024a8 <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7fe fe66 	bl	80024a8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0e2      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037ee:	f7ff fb54 	bl	8002e9a <LL_RCC_LSE_IsReady>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ef      	bne.n	80037d8 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80d8 	beq.w	80039b2 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003802:	f7ff fc5c 	bl	80030be <LL_RCC_GetSysClkSource>
 8003806:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 80a6 	bne.w	8003966 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d123      	bne.n	8003870 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d11c      	bne.n	8003870 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d114      	bne.n	8003870 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d10d      	bne.n	8003870 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d106      	bne.n	8003870 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d054      	beq.n	800391a <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d04f      	beq.n	8003916 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003876:	f7ff fcc0 	bl	80031fa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800387a:	f7fe fe15 	bl	80024a8 <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fe fe11 	bl	80024a8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e08f      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ef      	bne.n	8003882 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	4b45      	ldr	r3, [pc, #276]	@ (80039c0 <HAL_RCC_OscConfig+0x668>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038ba:	0212      	lsls	r2, r2, #8
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038ce:	430a      	orrs	r2, r1
 80038d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038d8:	f7ff fc80 	bl	80031dc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ec:	f7fe fddc 	bl	80024a8 <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fdd8 	bl	80024a8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e056      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003914:	e04d      	b.n	80039b2 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e04c      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d144      	bne.n	80039b2 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003928:	f7ff fc58 	bl	80031dc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800393c:	f7fe fdb4 	bl	80024a8 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fdb0 	bl	80024a8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e02e      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ef      	beq.n	8003944 <HAL_RCC_OscConfig+0x5ec>
 8003964:	e025      	b.n	80039b2 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b0c      	cmp	r3, #12
 800396a:	d020      	beq.n	80039ae <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	f7ff fc45 	bl	80031fa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fd9a 	bl	80024a8 <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe fd96 	bl	80024a8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ef      	bne.n	8003978 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	60d3      	str	r3, [r2, #12]
 80039ac:	e001      	b.n	80039b2 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3734      	adds	r7, #52	@ 0x34
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	58000400 	.word	0x58000400
 80039c0:	11c1808c 	.word	0x11c1808c

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e12d      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b98      	ldr	r3, [pc, #608]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d91b      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b95      	ldr	r3, [pc, #596]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4993      	ldr	r1, [pc, #588]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f6:	f7fe fd57 	bl	80024a8 <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039fe:	f7fe fd53 	bl	80024a8 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e111      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a10:	4b8a      	ldr	r3, [pc, #552]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d1ef      	bne.n	80039fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fb51 	bl	80030d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a34:	f7fe fd38 	bl	80024a8 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a3c:	f7fe fd34 	bl	80024a8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0f2      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a4e:	f7ff fc26 	bl	800329e <LL_RCC_IsActiveFlag_HPRE>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f1      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fb48 	bl	80030fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe fd1b 	bl	80024a8 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a76:	f7fe fd17 	bl	80024a8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0d5      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a88:	f7ff fc1b 	bl	80032c2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f1      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fb41 	bl	800312a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fcfe 	bl	80024a8 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab0:	f7fe fcfa 	bl	80024a8 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0b8      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ac2:	f7ff fc11 	bl	80032e8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f1      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d016      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fb3b 	bl	8003158 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fce1 	bl	80024a8 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aea:	f7fe fcdd 	bl	80024a8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e09b      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003afc:	f7ff fc07 	bl	800330e <LL_RCC_IsActiveFlag_PPRE1>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f1      	beq.n	8003aea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fb31 	bl	8003180 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b1e:	f7fe fcc3 	bl	80024a8 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b26:	f7fe fcbf 	bl	80024a8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e07d      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b38:	f7ff fbfb 	bl	8003332 <LL_RCC_IsActiveFlag_PPRE2>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f1      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d043      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b56:	f7ff f905 	bl	8002d64 <LL_RCC_HSE_IsReady>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11e      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e067      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b6c:	f7ff fb54 	bl	8003218 <LL_RCC_PLL_IsReady>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d113      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e05c      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b82:	f7ff fa39 	bl	8002ff8 <LL_RCC_MSI_IsReady>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e051      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b90:	f7ff f918 	bl	8002dc4 <LL_RCC_HSI_IsReady>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e04a      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fa77 	bl	8003096 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fe fc7e 	bl	80024a8 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	f7fe fc7a 	bl	80024a8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e036      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	f7ff fa7a 	bl	80030be <LL_RCC_GetSysClkSource>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d1ec      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd6:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d21b      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be4:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 0207 	bic.w	r2, r3, #7
 8003bec:	4913      	ldr	r1, [pc, #76]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fe fc58 	bl	80024a8 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bfc:	f7fe fc54 	bl	80024a8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e012      	b.n	8003c34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCC_ClockConfig+0x278>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1ef      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c1c:	f000 f87e 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4a07      	ldr	r2, [pc, #28]	@ (8003c40 <HAL_RCC_ClockConfig+0x27c>)
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c26:	f7fe fc4b 	bl	80024c0 <HAL_GetTickPrio>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fbed 	bl	800240c <HAL_InitTick>
 8003c32:	4603      	mov	r3, r0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	58004000 	.word	0x58004000
 8003c40:	20000020 	.word	0x20000020

08003c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4a:	f7ff fa38 	bl	80030be <LL_RCC_GetSysClkSource>
 8003c4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c56:	f7ff f9f4 	bl	8003042 <LL_RCC_MSI_GetRange>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e04b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c72:	4b28      	ldr	r3, [pc, #160]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e045      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d10a      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c7e:	f7ff f841 	bl	8002d04 <LL_RCC_HSE_IsEnabledDiv2>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c88:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e03a      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c8e:	4b22      	ldr	r3, [pc, #136]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e037      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c94:	f7ff faf7 	bl	8003286 <LL_RCC_PLL_GetMainSource>
 8003c98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d003      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x64>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x6a>
 8003ca6:	e00d      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003caa:	60bb      	str	r3, [r7, #8]
        break;
 8003cac:	e015      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cae:	f7ff f829 	bl	8002d04 <LL_RCC_HSE_IsEnabledDiv2>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cbc:	e00d      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003cbe:	4b16      	ldr	r3, [pc, #88]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cc0:	60bb      	str	r3, [r7, #8]
        break;
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cc4:	f7ff f9bd 	bl	8003042 <LL_RCC_MSI_GetRange>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd6:	60bb      	str	r3, [r7, #8]
        break;
 8003cd8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003cda:	f7ff faaf 	bl	800323c <LL_RCC_PLL_GetN>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	fb03 f402 	mul.w	r4, r3, r2
 8003ce6:	f7ff fac2 	bl	800326e <LL_RCC_PLL_GetDivider>
 8003cea:	4603      	mov	r3, r0
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	3301      	adds	r3, #1
 8003cf0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cf4:	f7ff faaf 	bl	8003256 <LL_RCC_PLL_GetR>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	0f5b      	lsrs	r3, r3, #29
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	0800914c 	.word	0x0800914c
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	01e84800 	.word	0x01e84800

08003d1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b598      	push	{r3, r4, r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d20:	f7ff ff90 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003d24:	4604      	mov	r4, r0
 8003d26:	f7ff fa3f 	bl	80031a8 <LL_RCC_GetAHBPrescaler>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	4a03      	ldr	r2, [pc, #12]	@ (8003d40 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd98      	pop	{r3, r4, r7, pc}
 8003d40:	0800910c 	.word	0x0800910c

08003d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d50:	d903      	bls.n	8003d5a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d52:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e007      	b.n	8003d6a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a10      	ldr	r2, [pc, #64]	@ (8003da4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d6a:	f7ff fa29 	bl	80031c0 <LL_RCC_GetAHB4Prescaler>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	4a0c      	ldr	r2, [pc, #48]	@ (8003da8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a09      	ldr	r2, [pc, #36]	@ (8003dac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	0c9b      	lsrs	r3, r3, #18
 8003d8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f80c 	bl	8003db0 <RCC_SetFlashLatency>
 8003d98:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	0800914c 	.word	0x0800914c
 8003da8:	0800910c 	.word	0x0800910c
 8003dac:	431bde83 	.word	0x431bde83

08003db0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b08f      	sub	sp, #60	@ 0x3c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003dba:	4b24      	ldr	r3, [pc, #144]	@ (8003e4c <RCC_SetFlashLatency+0x9c>)
 8003dbc:	f107 041c 	add.w	r4, r7, #28
 8003dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003dc6:	4b22      	ldr	r3, [pc, #136]	@ (8003e50 <RCC_SetFlashLatency+0xa0>)
 8003dc8:	f107 040c 	add.w	r4, r7, #12
 8003dcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dda:	e013      	b.n	8003e04 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	3338      	adds	r3, #56	@ 0x38
 8003de2:	443b      	add	r3, r7
 8003de4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d807      	bhi.n	8003dfe <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3338      	adds	r3, #56	@ 0x38
 8003df4:	443b      	add	r3, r7
 8003df6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003dfc:	e005      	b.n	8003e0a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	3301      	adds	r3, #1
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d9e8      	bls.n	8003ddc <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003e0a:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <RCC_SetFlashLatency+0xa4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 0207 	bic.w	r2, r3, #7
 8003e12:	4910      	ldr	r1, [pc, #64]	@ (8003e54 <RCC_SetFlashLatency+0xa4>)
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e1a:	f7fe fb45 	bl	80024a8 <HAL_GetTick>
 8003e1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e20:	e008      	b.n	8003e34 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e22:	f7fe fb41 	bl	80024a8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e007      	b.n	8003e44 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e34:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <RCC_SetFlashLatency+0xa4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d1ef      	bne.n	8003e22 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	373c      	adds	r7, #60	@ 0x3c
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	08008f5c 	.word	0x08008f5c
 8003e50:	08008f6c 	.word	0x08008f6c
 8003e54:	58004000 	.word	0x58004000

08003e58 <LL_RCC_LSE_IsEnabled>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <LL_RCC_LSE_IsEnabled+0x18>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <LL_RCC_LSE_IsEnabled+0x1a>
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_RCC_LSE_IsReady>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d101      	bne.n	8003e94 <LL_RCC_LSE_IsReady+0x18>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_RCC_LSE_IsReady+0x1a>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_RCC_SetRFWKPClockSource>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_SetSMPSClockSource>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_SetSMPSPrescaler>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_SetUSARTClockSource>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f023 0203 	bic.w	r2, r3, #3
 8003f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_SetLPUARTClockSource>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_SetI2CClockSource>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f80:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	401a      	ands	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_RCC_SetLPTIMClockSource>:
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_RCC_SetRNGClockSource>:
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ff6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_RCC_SetCLK48ClockSource>:
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_SetADCClockSource>:
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800404e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_SetRTCClockSource>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800407a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_GetRTCClockSource>:
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_RCC_ForceBackupDomainReset>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040fc:	2300      	movs	r3, #0
 80040fe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004108:	2b00      	cmp	r3, #0
 800410a:	d046      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800410c:	f7ff ffc1 	bl	8004092 <LL_RCC_GetRTCClockSource>
 8004110:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	d03c      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800411c:	f7fe fdcc 	bl	8002cb8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff9b 	bl	8004066 <LL_RCC_SetRTCClockSource>
 8004130:	e02e      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800413c:	f7ff ffb6 	bl	80040ac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004140:	f7ff ffc5 	bl	80040ce <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800415c:	f7ff fe7c 	bl	8003e58 <LL_RCC_LSE_IsEnabled>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d114      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004166:	f7fe f99f 	bl	80024a8 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800416c:	e00b      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fe f99b 	bl	80024a8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d902      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	77fb      	strb	r3, [r7, #31]
              break;
 8004184:	e004      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004186:	f7ff fe79 	bl	8003e7c <LL_RCC_LSE_IsReady>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d1ee      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004190:	7ffb      	ldrb	r3, [r7, #31]
 8004192:	77bb      	strb	r3, [r7, #30]
 8004194:	e001      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	7ffb      	ldrb	r3, [r7, #31]
 8004198:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff feb6 	bl	8003f1c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fec1 	bl	8003f48 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fee9 	bl	8003fae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fede 	bl	8003fae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff feb6 	bl	8003f74 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004226:	d003      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fed4 	bl	8003fe2 <LL_RCC_SetRNGClockSource>
 800423a:	e00a      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	2000      	movs	r0, #0
 8004248:	f7ff fecb 	bl	8003fe2 <LL_RCC_SetRNGClockSource>
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fede 	bl	800400e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800425a:	d107      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800426a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d011      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fedc 	bl	800403a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800428a:	d107      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429a:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fdf7 	bl	8003ea0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fe16 	bl	8003ef4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fdfd 	bl	8003ecc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80042d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e077      	b.n	80043e2 <HAL_RTC_Init+0x106>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd ff2c 	bl	8002164 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b10      	cmp	r3, #16
 8004320:	d055      	beq.n	80043ce <HAL_RTC_Init+0xf2>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	22ca      	movs	r2, #202	@ 0xca
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2253      	movs	r2, #83	@ 0x53
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f880 	bl	8004438 <RTC_EnterInitMode>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d12c      	bne.n	800439c <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004354:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68d2      	ldr	r2, [r2, #12]
 800437c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6919      	ldr	r1, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	041a      	lsls	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f888 	bl	80044a8 <RTC_ExitInitMode>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d110      	bne.n	80043c4 <HAL_RTC_Init+0xe8>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_REMAP_POS1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0202 	bic.w	r2, r2, #2
 80043b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	22ff      	movs	r2, #255	@ 0xff
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80043cc:	e001      	b.n	80043d2 <HAL_RTC_Init+0xf6>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_RTC_Init+0x104>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004434 <HAL_RTC_WaitForSynchro+0x48>)
 80043fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004400:	f7fe f852 	bl	80024a8 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004406:	e009      	b.n	800441c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004408:	f7fe f84e 	bl	80024a8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004416:	d901      	bls.n	800441c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e007      	b.n	800442c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0ee      	beq.n	8004408 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	00015f5f 	.word	0x00015f5f

08004438 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d123      	bne.n	800449e <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004464:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004466:	f7fe f81f 	bl	80024a8 <HAL_GetTick>
 800446a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800446c:	e00d      	b.n	800448a <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800446e:	f7fe f81b 	bl	80024a8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800447c:	d905      	bls.n	800448a <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <RTC_EnterInitMode+0x66>
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d1e7      	bne.n	800446e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044c2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff8a 	bl	80043ec <HAL_RTC_WaitForSynchro>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2204      	movs	r2, #4
 80044e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e095      	b.n	8004632 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004516:	d009      	beq.n	800452c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
 800451e:	e005      	b.n	800452c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fd fe40 	bl	80021cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004562:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800456c:	d902      	bls.n	8004574 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e002      	b.n	800457a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004578:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004582:	d007      	beq.n	8004594 <HAL_SPI_Init+0xa0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800458c:	d002      	beq.n	8004594 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d6:	ea42 0103 	orr.w	r1, r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	f003 0204 	and.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004610:	ea42 0103 	orr.w	r1, r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b088      	sub	sp, #32
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800464a:	f7fd ff2d 	bl	80024a8 <HAL_GetTick>
 800464e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
 8004662:	e15c      	b.n	800491e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_SPI_Transmit+0x36>
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e154      	b.n	800491e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_SPI_Transmit+0x48>
 800467e:	2302      	movs	r3, #2
 8004680:	e14d      	b.n	800491e <HAL_SPI_Transmit+0x2e4>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2203      	movs	r2, #3
 800468e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d4:	d10f      	bne.n	80046f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d007      	beq.n	8004714 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800471c:	d952      	bls.n	80047c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0xf2>
 8004726:	8b7b      	ldrh	r3, [r7, #26]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d145      	bne.n	80047b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004750:	e032      	b.n	80047b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d112      	bne.n	8004786 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004784:	e018      	b.n	80047b8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fd fe8f 	bl	80024a8 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_Transmit+0x164>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x16a>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0b2      	b.n	800491e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1c7      	bne.n	8004752 <HAL_SPI_Transmit+0x118>
 80047c2:	e083      	b.n	80048cc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_SPI_Transmit+0x198>
 80047cc:	8b7b      	ldrh	r3, [r7, #26]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d177      	bne.n	80048c2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d912      	bls.n	8004802 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b02      	subs	r3, #2
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004800:	e05f      	b.n	80048c2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004828:	e04b      	b.n	80048c2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d12b      	bne.n	8004890 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d912      	bls.n	8004868 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b02      	subs	r3, #2
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004866:	e02c      	b.n	80048c2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800488e:	e018      	b.n	80048c2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004890:	f7fd fe0a 	bl	80024a8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d803      	bhi.n	80048a8 <HAL_SPI_Transmit+0x26e>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Transmit+0x274>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e02d      	b.n	800491e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ae      	bne.n	800482a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fcf5 	bl	80052c0 <SPI_EndRxTxTransaction>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800491c:	2300      	movs	r3, #0
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af02      	add	r7, sp, #8
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
 8004944:	e123      	b.n	8004b8e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_SPI_Receive+0x2c>
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e11b      	b.n	8004b8e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495e:	d112      	bne.n	8004986 <HAL_SPI_Receive+0x60>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10e      	bne.n	8004986 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2204      	movs	r2, #4
 800496c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f90a 	bl	8004b96 <HAL_SPI_TransmitReceive>
 8004982:	4603      	mov	r3, r0
 8004984:	e103      	b.n	8004b8e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004986:	f7fd fd8f 	bl	80024a8 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_SPI_Receive+0x74>
 8004996:	2302      	movs	r3, #2
 8004998:	e0f9      	b.n	8004b8e <HAL_SPI_Receive+0x268>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2204      	movs	r2, #4
 80049a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	88fa      	ldrh	r2, [r7, #6]
 80049ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049ec:	d908      	bls.n	8004a00 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	e007      	b.n	8004a10 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a0e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a18:	d10f      	bne.n	8004a3a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d007      	beq.n	8004a58 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a60:	d875      	bhi.n	8004b4e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a62:	e037      	b.n	8004ad4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d117      	bne.n	8004aa2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f103 020c 	add.w	r2, r3, #12
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004aa0:	e018      	b.n	8004ad4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa2:	f7fd fd01 	bl	80024a8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d803      	bhi.n	8004aba <HAL_SPI_Receive+0x194>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d102      	bne.n	8004ac0 <HAL_SPI_Receive+0x19a>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e05c      	b.n	8004b8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1c1      	bne.n	8004a64 <HAL_SPI_Receive+0x13e>
 8004ae0:	e03b      	b.n	8004b5a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d115      	bne.n	8004b1c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	b292      	uxth	r2, r2
 8004afc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	1c9a      	adds	r2, r3, #2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004b1a:	e018      	b.n	8004b4e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b1c:	f7fd fcc4 	bl	80024a8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d803      	bhi.n	8004b34 <HAL_SPI_Receive+0x20e>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_Receive+0x214>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e01f      	b.n	8004b8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1c3      	bne.n	8004ae2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fb56 	bl	8005210 <SPI_EndRxTransaction>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b08a      	sub	sp, #40	@ 0x28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba8:	f7fd fc7e 	bl	80024a8 <HAL_GetTick>
 8004bac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bb4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc4:	7ffb      	ldrb	r3, [r7, #31]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d00c      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x4e>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd0:	d106      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x4a>
 8004bda:	7ffb      	ldrb	r3, [r7, #31]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d001      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	e1f3      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x60>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x60>
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e1e8      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x72>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e1e1      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d003      	beq.n	8004c24 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2205      	movs	r2, #5
 8004c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	887a      	ldrh	r2, [r7, #2]
 8004c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c66:	d802      	bhi.n	8004c6e <HAL_SPI_TransmitReceive+0xd8>
 8004c68:	8abb      	ldrh	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d908      	bls.n	8004c80 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	e007      	b.n	8004c90 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d007      	beq.n	8004cae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cb6:	f240 8083 	bls.w	8004dc0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x132>
 8004cc2:	8afb      	ldrh	r3, [r7, #22]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d16f      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd8:	1c9a      	adds	r2, r3, #2
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cec:	e05c      	b.n	8004da8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d11b      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x19e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x19e>
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d113      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d11c      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x1e6>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	b292      	uxth	r2, r2
 8004d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d7c:	f7fd fb94 	bl	80024a8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d80d      	bhi.n	8004da8 <HAL_SPI_TransmitReceive+0x212>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d009      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e111      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d19d      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x158>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d197      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x158>
 8004dbe:	e0e5      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_SPI_TransmitReceive+0x23a>
 8004dc8:	8afb      	ldrh	r3, [r7, #22]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	f040 80d1 	bne.w	8004f72 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d912      	bls.n	8004e00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	881a      	ldrh	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b02      	subs	r3, #2
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dfe:	e0b8      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e26:	e0a4      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d134      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x30a>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02f      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x30a>
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d12c      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d912      	bls.n	8004e76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b02      	subs	r3, #2
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e74:	e012      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d148      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x3aa>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d042      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d923      	bls.n	8004f0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b02      	subs	r3, #2
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d81f      	bhi.n	8004f3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	e016      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f103 020c 	add.w	r2, r3, #12
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	7812      	ldrb	r2, [r2, #0]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f40:	f7fd fab2 	bl	80024a8 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d803      	bhi.n	8004f58 <HAL_SPI_TransmitReceive+0x3c2>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x3c8>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e02c      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af55 	bne.w	8004e28 <HAL_SPI_TransmitReceive+0x292>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f47f af4e 	bne.w	8004e28 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f8c:	6a3a      	ldr	r2, [r7, #32]
 8004f8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f995 	bl	80052c0 <SPI_EndRxTxTransaction>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e00e      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	@ 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fe4:	f7fd fa60 	bl	80024a8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ff4:	f7fd fa58 	bl	80024a8 <HAL_GetTick>
 8004ff8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ffa:	4b39      	ldr	r3, [pc, #228]	@ (80050e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	015b      	lsls	r3, r3, #5
 8005000:	0d1b      	lsrs	r3, r3, #20
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	fb02 f303 	mul.w	r3, r2, r3
 8005008:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800500a:	e054      	b.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d050      	beq.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005014:	f7fd fa48 	bl	80024a8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	429a      	cmp	r2, r3
 8005022:	d902      	bls.n	800502a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d13d      	bne.n	80050a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005042:	d111      	bne.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504c:	d004      	beq.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005056:	d107      	bne.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005070:	d10f      	bne.n	8005092 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e017      	b.n	80050d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d19b      	bne.n	800500c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000020 	.word	0x20000020

080050e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	@ 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050f6:	f7fd f9d7 	bl	80024a8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	4413      	add	r3, r2
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005106:	f7fd f9cf 	bl	80024a8 <HAL_GetTick>
 800510a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005114:	4b3d      	ldr	r3, [pc, #244]	@ (800520c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	00da      	lsls	r2, r3, #3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	0d1b      	lsrs	r3, r3, #20
 8005124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800512c:	e060      	b.n	80051f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005134:	d107      	bne.n	8005146 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005144:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d050      	beq.n	80051f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800514e:	f7fd f9ab 	bl	80024a8 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515a:	429a      	cmp	r2, r3
 800515c:	d902      	bls.n	8005164 <SPI_WaitFifoStateUntilTimeout+0x80>
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d13d      	bne.n	80051e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005172:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517c:	d111      	bne.n	80051a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005186:	d004      	beq.n	8005192 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005190:	d107      	bne.n	80051a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051aa:	d10f      	bne.n	80051cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e010      	b.n	8005202 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d196      	bne.n	800512e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3728      	adds	r7, #40	@ 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000020 	.word	0x20000020

08005210 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005224:	d111      	bne.n	800524a <SPI_EndRxTransaction+0x3a>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800522e:	d004      	beq.n	800523a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005238:	d107      	bne.n	800524a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005248:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	@ 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff febd 	bl	8004fd4 <SPI_WaitFlagStateUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e023      	b.n	80052b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005278:	d11d      	bne.n	80052b6 <SPI_EndRxTransaction+0xa6>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005282:	d004      	beq.n	800528e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528c:	d113      	bne.n	80052b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff ff22 	bl	80050e4 <SPI_WaitFifoStateUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e000      	b.n	80052b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff ff03 	bl	80050e4 <SPI_WaitFifoStateUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e027      	b.n	8005344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2180      	movs	r1, #128	@ 0x80
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff fe68 	bl	8004fd4 <SPI_WaitFlagStateUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e014      	b.n	8005344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff fedc 	bl	80050e4 <SPI_WaitFifoStateUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e000      	b.n	8005344 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	2218      	movs	r2, #24
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f9ec 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005364:	233f      	movs	r3, #63	@ 0x3f
 8005366:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005368:	2381      	movs	r3, #129	@ 0x81
 800536a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800536c:	1dfb      	adds	r3, r7, #7
 800536e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005370:	2301      	movs	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fc68 	bl	8006c50 <hci_send_req>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	da01      	bge.n	800538a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005386:	23ff      	movs	r3, #255	@ 0xff
 8005388:	e000      	b.n	800538c <aci_gap_set_non_discoverable+0x40>
  return status;
 800538a:	79fb      	ldrb	r3, [r7, #7]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005394:	b5b0      	push	{r4, r5, r7, lr}
 8005396:	b0ce      	sub	sp, #312	@ 0x138
 8005398:	af00      	add	r7, sp, #0
 800539a:	4605      	mov	r5, r0
 800539c:	460c      	mov	r4, r1
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80053a6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80053aa:	462a      	mov	r2, r5
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80053b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80053b6:	4622      	mov	r2, r4
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80053be:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80053c2:	4602      	mov	r2, r0
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80053ca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80053ce:	460a      	mov	r2, r1
 80053d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80053d2:	f107 0310 	add.w	r3, r7, #16
 80053d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80053da:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80053de:	3308      	adds	r3, #8
 80053e0:	f107 0210 	add.w	r2, r7, #16
 80053e4:	4413      	add	r3, r2
 80053e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80053ea:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80053ee:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80053f2:	4413      	add	r3, r2
 80053f4:	3309      	adds	r3, #9
 80053f6:	f107 0210 	add.w	r2, r7, #16
 80053fa:	4413      	add	r3, r2
 80053fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005400:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005404:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005416:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800541a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005426:	3301      	adds	r3, #1
 8005428:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800542c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005430:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005434:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005438:	8812      	ldrh	r2, [r2, #0]
 800543a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800543e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005442:	3302      	adds	r3, #2
 8005444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005448:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800544c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005450:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800545a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800545e:	3302      	adds	r3, #2
 8005460:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005464:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005468:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800546c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005474:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005478:	3301      	adds	r3, #1
 800547a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800547e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005482:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005486:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005488:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800548c:	3301      	adds	r3, #1
 800548e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005492:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005496:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800549a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800549c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80054a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80054aa:	3308      	adds	r3, #8
 80054ac:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80054b0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 f931 	bl	800671c <Osal_MemCpy>
    index_input += Local_Name_Length;
 80054ba:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80054be:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80054c2:	4413      	add	r3, r2
 80054c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80054c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054cc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80054d0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80054d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054d6:	3301      	adds	r3, #1
 80054d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80054dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054e0:	3301      	adds	r3, #1
 80054e2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80054e6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f916 	bl	800671c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80054f0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80054f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80054f8:	4413      	add	r3, r2
 80054fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80054fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005502:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005506:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005508:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800550c:	3302      	adds	r3, #2
 800550e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005512:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005516:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800551a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800551c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005520:	3302      	adds	r3, #2
 8005522:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800552a:	2218      	movs	r2, #24
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f001 f904 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005534:	233f      	movs	r3, #63	@ 0x3f
 8005536:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800553a:	2383      	movs	r3, #131	@ 0x83
 800553c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005540:	f107 0310 	add.w	r3, r7, #16
 8005544:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005548:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800554c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005550:	f107 030f 	add.w	r3, r7, #15
 8005554:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005558:	2301      	movs	r3, #1
 800555a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800555e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f001 fb73 	bl	8006c50 <hci_send_req>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	da01      	bge.n	8005574 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005570:	23ff      	movs	r3, #255	@ 0xff
 8005572:	e004      	b.n	800557e <aci_gap_set_discoverable+0x1ea>
  return status;
 8005574:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005578:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800557c:	781b      	ldrb	r3, [r3, #0]
}
 800557e:	4618      	mov	r0, r3
 8005580:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005584:	46bd      	mov	sp, r7
 8005586:	bdb0      	pop	{r4, r5, r7, pc}

08005588 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b0cc      	sub	sp, #304	@ 0x130
 800558c:	af00      	add	r7, sp, #0
 800558e:	4602      	mov	r2, r0
 8005590:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005594:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005598:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800559a:	f107 0310 	add.w	r3, r7, #16
 800559e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80055a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80055b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055bc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80055c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055d2:	2218      	movs	r2, #24
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f8b0 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 80055dc:	233f      	movs	r3, #63	@ 0x3f
 80055de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80055e2:	2385      	movs	r3, #133	@ 0x85
 80055e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80055e8:	f107 0310 	add.w	r3, r7, #16
 80055ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80055f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80055f8:	f107 030f 	add.w	r3, r7, #15
 80055fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005600:	2301      	movs	r3, #1
 8005602:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005606:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fb1f 	bl	8006c50 <hci_send_req>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	da01      	bge.n	800561c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005618:	23ff      	movs	r3, #255	@ 0xff
 800561a:	e004      	b.n	8005626 <aci_gap_set_io_capability+0x9e>
  return status;
 800561c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005620:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005624:	781b      	ldrb	r3, [r3, #0]
}
 8005626:	4618      	mov	r0, r3
 8005628:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b0cc      	sub	sp, #304	@ 0x130
 8005634:	af00      	add	r7, sp, #0
 8005636:	4605      	mov	r5, r0
 8005638:	460c      	mov	r4, r1
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005642:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005646:	462a      	mov	r2, r5
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800564e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005652:	4622      	mov	r2, r4
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800565a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800565e:	4602      	mov	r2, r0
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005666:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800566a:	460a      	mov	r2, r1
 800566c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800566e:	f107 0310 	add.w	r3, r7, #16
 8005672:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800567a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005688:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800568c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005690:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005694:	7812      	ldrb	r2, [r2, #0]
 8005696:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005698:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80056a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80056ae:	7812      	ldrb	r2, [r2, #0]
 80056b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80056b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056b6:	3301      	adds	r3, #1
 80056b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80056bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056c4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80056cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056d0:	3301      	adds	r3, #1
 80056d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056de:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80056e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056ea:	3301      	adds	r3, #1
 80056ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80056f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056f4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80056f8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80056fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056fe:	3301      	adds	r3, #1
 8005700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005708:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800570c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800570e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005712:	3301      	adds	r3, #1
 8005714:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005718:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800571c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005720:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005722:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005726:	3301      	adds	r3, #1
 8005728:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800572c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005730:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005734:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005738:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800573c:	3304      	adds	r3, #4
 800573e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005746:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800574a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800574c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005750:	3301      	adds	r3, #1
 8005752:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800575a:	2218      	movs	r2, #24
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f000 ffec 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005764:	233f      	movs	r3, #63	@ 0x3f
 8005766:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800576a:	2386      	movs	r3, #134	@ 0x86
 800576c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005770:	f107 0310 	add.w	r3, r7, #16
 8005774:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005778:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800577c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005780:	f107 030f 	add.w	r3, r7, #15
 8005784:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005788:	2301      	movs	r3, #1
 800578a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800578e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f001 fa5b 	bl	8006c50 <hci_send_req>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	da01      	bge.n	80057a4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80057a0:	23ff      	movs	r3, #255	@ 0xff
 80057a2:	e004      	b.n	80057ae <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80057a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057ac:	781b      	ldrb	r3, [r3, #0]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bdb0      	pop	{r4, r5, r7, pc}

080057b8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b0cc      	sub	sp, #304	@ 0x130
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4602      	mov	r2, r0
 80057c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80057c8:	6019      	str	r1, [r3, #0]
 80057ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80057d2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80057d4:	f107 0310 	add.w	r3, r7, #16
 80057d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80057dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80057ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80057fa:	8812      	ldrh	r2, [r2, #0]
 80057fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80057fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005802:	3302      	adds	r3, #2
 8005804:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005808:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800580c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005810:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800581a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800581e:	3304      	adds	r3, #4
 8005820:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005828:	2218      	movs	r2, #24
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f000 ff85 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005832:	233f      	movs	r3, #63	@ 0x3f
 8005834:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005838:	2388      	movs	r3, #136	@ 0x88
 800583a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800583e:	f107 0310 	add.w	r3, r7, #16
 8005842:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005846:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800584a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800584e:	f107 030f 	add.w	r3, r7, #15
 8005852:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800585c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f001 f9f4 	bl	8006c50 <hci_send_req>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	da01      	bge.n	8005872 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800586e:	23ff      	movs	r3, #255	@ 0xff
 8005870:	e004      	b.n	800587c <aci_gap_pass_key_resp+0xc4>
  return status;
 8005872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005876:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800587a:	781b      	ldrb	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005886:	b590      	push	{r4, r7, lr}
 8005888:	b0cd      	sub	sp, #308	@ 0x134
 800588a:	af00      	add	r7, sp, #0
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005896:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058a0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80058a4:	4622      	mov	r2, r4
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80058b0:	4602      	mov	r2, r0
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058b8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80058bc:	460a      	mov	r2, r1
 80058be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80058c8:	f107 0308 	add.w	r3, r7, #8
 80058cc:	2207      	movs	r2, #7
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 ff33 	bl	800673c <Osal_MemSet>
  int index_input = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80058dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058e4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80058f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005902:	7812      	ldrb	r2, [r2, #0]
 8005904:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005914:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005918:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800591c:	7812      	ldrb	r2, [r2, #0]
 800591e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005924:	3301      	adds	r3, #1
 8005926:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800592a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800592e:	2218      	movs	r2, #24
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f000 ff02 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005938:	233f      	movs	r3, #63	@ 0x3f
 800593a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800593e:	238a      	movs	r3, #138	@ 0x8a
 8005940:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800594c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005950:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005954:	f107 0308 	add.w	r3, r7, #8
 8005958:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800595c:	2307      	movs	r3, #7
 800595e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005962:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f971 	bl	8006c50 <hci_send_req>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	da01      	bge.n	8005978 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005974:	23ff      	movs	r3, #255	@ 0xff
 8005976:	e02e      	b.n	80059d6 <aci_gap_init+0x150>
  if ( resp.Status )
 8005978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800597c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <aci_gap_init+0x10c>
    return resp.Status;
 8005986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800598a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	e021      	b.n	80059d6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005992:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005996:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800599a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059a4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80059ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80059b4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80059be:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80059c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80059c8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80059d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd90      	pop	{r4, r7, pc}

080059e0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b0cc      	sub	sp, #304	@ 0x130
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4602      	mov	r2, r0
 80059e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059f0:	6019      	str	r1, [r3, #0]
 80059f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059f6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80059fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80059fc:	f107 0310 	add.w	r3, r7, #16
 8005a00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005a04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a1e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a34:	1c58      	adds	r0, r3, #1
 8005a36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a3a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	f000 fe67 	bl	800671c <Osal_MemCpy>
  index_input += AdvDataLen;
 8005a4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a52:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a66:	2218      	movs	r2, #24
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fe66 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a70:	233f      	movs	r3, #63	@ 0x3f
 8005a72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005a76:	238e      	movs	r3, #142	@ 0x8e
 8005a78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a8c:	f107 030f 	add.w	r3, r7, #15
 8005a90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 f8d5 	bl	8006c50 <hci_send_req>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da01      	bge.n	8005ab0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005aac:	23ff      	movs	r3, #255	@ 0xff
 8005aae:	e004      	b.n	8005aba <aci_gap_update_adv_data+0xda>
  return status;
 8005ab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ab4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ab8:	781b      	ldrb	r3, [r3, #0]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	2218      	movs	r2, #24
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fe30 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005adc:	233f      	movs	r3, #63	@ 0x3f
 8005ade:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005ae0:	2392      	movs	r3, #146	@ 0x92
 8005ae2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005ae4:	1dfb      	adds	r3, r7, #7
 8005ae6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 f8ac 	bl	8006c50 <hci_send_req>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da01      	bge.n	8005b02 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005afe:	23ff      	movs	r3, #255	@ 0xff
 8005b00:	e000      	b.n	8005b04 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8005b02:	79fb      	ldrb	r3, [r7, #7]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <aci_gap_terminate>:

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b0cc      	sub	sp, #304	@ 0x130
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4602      	mov	r2, r0
 8005b14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b18:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b22:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005b26:	460a      	mov	r2, r1
 8005b28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 8005b2a:	f107 0310 	add.w	r3, r7, #16
 8005b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005b32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b4c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005b50:	8812      	ldrh	r2, [r2, #0]
 8005b52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b58:	3302      	adds	r3, #2
 8005b5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b66:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005b6a:	7812      	ldrb	r2, [r2, #0]
 8005b6c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b72:	3301      	adds	r3, #1
 8005b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b7c:	2218      	movs	r2, #24
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fddb 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b86:	233f      	movs	r3, #63	@ 0x3f
 8005b88:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 8005b8c:	2393      	movs	r3, #147	@ 0x93
 8005b8e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8005b92:	230f      	movs	r3, #15
 8005b94:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ba4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005ba8:	f107 030f 	add.w	r3, r7, #15
 8005bac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005bb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f847 	bl	8006c50 <hci_send_req>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da01      	bge.n	8005bcc <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8005bc8:	23ff      	movs	r3, #255	@ 0xff
 8005bca:	e004      	b.n	8005bd6 <aci_gap_terminate+0xca>
  return status;
 8005bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bd0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005bd4:	781b      	ldrb	r3, [r3, #0]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b0cc      	sub	sp, #304	@ 0x130
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4602      	mov	r2, r0
 8005be8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bf6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005bfe:	f107 0310 	add.w	r3, r7, #16
 8005c02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005c06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c0a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c20:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005c24:	8812      	ldrh	r2, [r2, #0]
 8005c26:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c3a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c50:	2218      	movs	r2, #24
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fd71 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c5a:	233f      	movs	r3, #63	@ 0x3f
 8005c5c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8005c60:	23a5      	movs	r3, #165	@ 0xa5
 8005c62:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005c66:	f107 0310 	add.w	r3, r7, #16
 8005c6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005c76:	f107 030f 	add.w	r3, r7, #15
 8005c7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ffe0 	bl	8006c50 <hci_send_req>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da01      	bge.n	8005c9a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005c96:	23ff      	movs	r3, #255	@ 0xff
 8005c98:	e004      	b.n	8005ca4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005c9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ca2:	781b      	ldrb	r3, [r3, #0]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b088      	sub	sp, #32
 8005cb2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	2218      	movs	r2, #24
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fd3b 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cc6:	233f      	movs	r3, #63	@ 0x3f
 8005cc8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005cca:	f240 1301 	movw	r3, #257	@ 0x101
 8005cce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005cd0:	1dfb      	adds	r3, r7, #7
 8005cd2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cd8:	f107 0308 	add.w	r3, r7, #8
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 ffb6 	bl	8006c50 <hci_send_req>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da01      	bge.n	8005cee <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005cea:	23ff      	movs	r3, #255	@ 0xff
 8005cec:	e000      	b.n	8005cf0 <aci_gatt_init+0x42>
  return status;
 8005cee:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b0cf      	sub	sp, #316	@ 0x13c
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005d04:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005d08:	6001      	str	r1, [r0, #0]
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d12:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005d16:	4622      	mov	r2, r4
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d1e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005d22:	4602      	mov	r2, r0
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d2a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005d2e:	460a      	mov	r2, r1
 8005d30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005d32:	f107 0310 	add.w	r3, r7, #16
 8005d36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005d3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d3e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d00a      	beq.n	8005d5e <aci_gatt_add_service+0x66>
 8005d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d4c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d101      	bne.n	8005d5a <aci_gatt_add_service+0x62>
 8005d56:	2311      	movs	r3, #17
 8005d58:	e002      	b.n	8005d60 <aci_gatt_add_service+0x68>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <aci_gatt_add_service+0x68>
 8005d5e:	2303      	movs	r3, #3
 8005d60:	f107 0210 	add.w	r2, r7, #16
 8005d64:	4413      	add	r3, r2
 8005d66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005d6a:	f107 030c 	add.w	r3, r7, #12
 8005d6e:	2203      	movs	r2, #3
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fce2 	bl	800673c <Osal_MemSet>
  int index_input = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d82:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005d86:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d92:	3301      	adds	r3, #1
 8005d94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005d98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d9c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d002      	beq.n	8005dac <aci_gatt_add_service+0xb4>
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d004      	beq.n	8005db4 <aci_gatt_add_service+0xbc>
 8005daa:	e007      	b.n	8005dbc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005dac:	2302      	movs	r3, #2
 8005dae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005db2:	e005      	b.n	8005dc0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005dba:	e001      	b.n	8005dc0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005dbc:	2397      	movs	r3, #151	@ 0x97
 8005dbe:	e06c      	b.n	8005e9a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005dc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005dc4:	1c58      	adds	r0, r3, #1
 8005dc6:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005dca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005dce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	f000 fca2 	bl	800671c <Osal_MemCpy>
    index_input += size;
 8005dd8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005ddc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005de0:	4413      	add	r3, r2
 8005de2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005dea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005dee:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e04:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005e08:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e14:	3301      	adds	r3, #1
 8005e16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e1e:	2218      	movs	r2, #24
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fc8a 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e28:	233f      	movs	r3, #63	@ 0x3f
 8005e2a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005e2e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005e32:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e36:	f107 0310 	add.w	r3, r7, #16
 8005e3a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005e4e:	2303      	movs	r3, #3
 8005e50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fef8 	bl	8006c50 <hci_send_req>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da01      	bge.n	8005e6a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005e66:	23ff      	movs	r3, #255	@ 0xff
 8005e68:	e017      	b.n	8005e9a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005e6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005e78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	e00a      	b.n	8005e9a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005e84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005e96:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd90      	pop	{r4, r7, pc}

08005ea4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b0d1      	sub	sp, #324	@ 0x144
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005eb2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005eb6:	600a      	str	r2, [r1, #0]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ebe:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005eca:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005ece:	4602      	mov	r2, r0
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ed6:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005eda:	460a      	mov	r2, r1
 8005edc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005ee6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005eea:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d00a      	beq.n	8005f0a <aci_gatt_add_char+0x66>
 8005ef4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ef8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d101      	bne.n	8005f06 <aci_gatt_add_char+0x62>
 8005f02:	2313      	movs	r3, #19
 8005f04:	e002      	b.n	8005f0c <aci_gatt_add_char+0x68>
 8005f06:	2303      	movs	r3, #3
 8005f08:	e000      	b.n	8005f0c <aci_gatt_add_char+0x68>
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	f107 0218 	add.w	r2, r7, #24
 8005f10:	4413      	add	r3, r2
 8005f12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005f16:	f107 0314 	add.w	r3, r7, #20
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fc0c 	bl	800673c <Osal_MemSet>
  int index_input = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8005f2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005f2e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005f32:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005f36:	8812      	ldrh	r2, [r2, #0]
 8005f38:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f3e:	3302      	adds	r3, #2
 8005f40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005f44:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005f48:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005f4c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f58:	3301      	adds	r3, #1
 8005f5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005f5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f62:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d002      	beq.n	8005f72 <aci_gatt_add_char+0xce>
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d004      	beq.n	8005f7a <aci_gatt_add_char+0xd6>
 8005f70:	e007      	b.n	8005f82 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005f72:	2302      	movs	r3, #2
 8005f74:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005f78:	e005      	b.n	8005f86 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005f80:	e001      	b.n	8005f86 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005f82:	2397      	movs	r3, #151	@ 0x97
 8005f84:	e091      	b.n	80060aa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005f86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005f8a:	1cd8      	adds	r0, r3, #3
 8005f8c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005f90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f94:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f98:	6819      	ldr	r1, [r3, #0]
 8005f9a:	f000 fbbf 	bl	800671c <Osal_MemCpy>
    index_input += size;
 8005f9e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005fa2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005fac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005fb0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005fb4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005fb8:	8812      	ldrh	r2, [r2, #0]
 8005fba:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005fc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005fca:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005fce:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005fd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005fda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005fde:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005fe2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ff2:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005ff6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005ff8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006002:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006006:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800600a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800600c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006010:	3301      	adds	r3, #1
 8006012:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006016:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800601a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800601e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006020:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006024:	3301      	adds	r3, #1
 8006026:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800602a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800602e:	2218      	movs	r2, #24
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fb82 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006038:	233f      	movs	r3, #63	@ 0x3f
 800603a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800603e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006042:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800604e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006052:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800605e:	2303      	movs	r3, #3
 8006060:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006064:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fdf0 	bl	8006c50 <hci_send_req>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006076:	23ff      	movs	r3, #255	@ 0xff
 8006078:	e017      	b.n	80060aa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800607a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800607e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006088:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800608c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	e00a      	b.n	80060aa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006094:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006098:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800609c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80060a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd90      	pop	{r4, r7, pc}

080060b4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80060b4:	b5b0      	push	{r4, r5, r7, lr}
 80060b6:	b0cc      	sub	sp, #304	@ 0x130
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4605      	mov	r5, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060c6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80060ca:	462a      	mov	r2, r5
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80060d6:	4622      	mov	r2, r4
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060de:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80060e2:	4602      	mov	r2, r0
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060ea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80060ee:	460a      	mov	r2, r1
 80060f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80060f2:	f107 0310 	add.w	r3, r7, #16
 80060f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80060fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006110:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006114:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800611c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006120:	3302      	adds	r3, #2
 8006122:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800612a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800612e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800613a:	3302      	adds	r3, #2
 800613c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006144:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006148:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006150:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006154:	3301      	adds	r3, #1
 8006156:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800615a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800615e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006162:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800616a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800616e:	3301      	adds	r3, #1
 8006170:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006174:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006178:	1d98      	adds	r0, r3, #6
 800617a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800617e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800618a:	f000 fac7 	bl	800671c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800618e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006192:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800619c:	4413      	add	r3, r2
 800619e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061a6:	2218      	movs	r2, #24
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fac6 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 80061b0:	233f      	movs	r3, #63	@ 0x3f
 80061b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80061b6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80061ba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80061be:	f107 0310 	add.w	r3, r7, #16
 80061c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80061c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80061ce:	f107 030f 	add.w	r3, r7, #15
 80061d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fd34 	bl	8006c50 <hci_send_req>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da01      	bge.n	80061f2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80061ee:	23ff      	movs	r3, #255	@ 0xff
 80061f0:	e004      	b.n	80061fc <aci_gatt_update_char_value+0x148>
  return status;
 80061f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061fa:	781b      	ldrb	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006202:	46bd      	mov	sp, r7
 8006204:	bdb0      	pop	{r4, r5, r7, pc}

08006206 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b0cc      	sub	sp, #304	@ 0x130
 800620a:	af00      	add	r7, sp, #0
 800620c:	4602      	mov	r2, r0
 800620e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006212:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006216:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006220:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006224:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006232:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006236:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800623a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800623e:	8812      	ldrh	r2, [r2, #0]
 8006240:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006242:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006246:	3302      	adds	r3, #2
 8006248:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800624c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006250:	2218      	movs	r2, #24
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fa71 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 800625a:	233f      	movs	r3, #63	@ 0x3f
 800625c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8006260:	f240 1325 	movw	r3, #293	@ 0x125
 8006264:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006268:	f107 0310 	add.w	r3, r7, #16
 800626c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006270:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006274:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006278:	f107 030f 	add.w	r3, r7, #15
 800627c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006280:	2301      	movs	r3, #1
 8006282:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800628a:	2100      	movs	r1, #0
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fcdf 	bl	8006c50 <hci_send_req>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	da01      	bge.n	800629c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006298:	23ff      	movs	r3, #255	@ 0xff
 800629a:	e004      	b.n	80062a6 <aci_gatt_confirm_indication+0xa0>
  return status;
 800629c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062a4:	781b      	ldrb	r3, [r3, #0]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b0cc      	sub	sp, #304	@ 0x130
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4602      	mov	r2, r0
 80062b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062bc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80062c0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80062c2:	f107 0310 	add.w	r3, r7, #16
 80062c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80062ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80062dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80062e4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062f0:	3302      	adds	r3, #2
 80062f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062fa:	2218      	movs	r2, #24
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fa1c 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006304:	233f      	movs	r3, #63	@ 0x3f
 8006306:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800630a:	f240 1327 	movw	r3, #295	@ 0x127
 800630e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800631a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800631e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006322:	f107 030f 	add.w	r3, r7, #15
 8006326:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006330:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fc8a 	bl	8006c50 <hci_send_req>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	da01      	bge.n	8006346 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8006342:	23ff      	movs	r3, #255	@ 0xff
 8006344:	e004      	b.n	8006350 <aci_gatt_allow_read+0xa0>
  return status;
 8006346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800634a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800634e:	781b      	ldrb	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b0cc      	sub	sp, #304	@ 0x130
 800635e:	af00      	add	r7, sp, #0
 8006360:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800636e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006372:	4602      	mov	r2, r0
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800637a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800637e:	460a      	mov	r2, r1
 8006380:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006382:	f107 0310 	add.w	r3, r7, #16
 8006386:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800638a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800638e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800639c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80063ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063b0:	3301      	adds	r3, #1
 80063b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80063c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063ca:	3301      	adds	r3, #1
 80063cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80063d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063d4:	1c98      	adds	r0, r3, #2
 80063d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063da:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80063de:	781a      	ldrb	r2, [r3, #0]
 80063e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	f000 f997 	bl	800671c <Osal_MemCpy>
  index_input += Length;
 80063ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80063fc:	4413      	add	r3, r2
 80063fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006402:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006406:	2218      	movs	r2, #24
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f996 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006410:	233f      	movs	r3, #63	@ 0x3f
 8006412:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006416:	230c      	movs	r3, #12
 8006418:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006424:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006428:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800642c:	f107 030f 	add.w	r3, r7, #15
 8006430:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006434:	2301      	movs	r3, #1
 8006436:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800643a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fc05 	bl	8006c50 <hci_send_req>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	da01      	bge.n	8006450 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800644c:	23ff      	movs	r3, #255	@ 0xff
 800644e:	e004      	b.n	800645a <aci_hal_write_config_data+0x100>
  return status;
 8006450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006454:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006458:	781b      	ldrb	r3, [r3, #0]
}
 800645a:	4618      	mov	r0, r3
 800645c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b0cc      	sub	sp, #304	@ 0x130
 8006468:	af00      	add	r7, sp, #0
 800646a:	4602      	mov	r2, r0
 800646c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006470:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800647a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800647e:	460a      	mov	r2, r1
 8006480:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800648a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800648e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800649c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80064b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80064c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064ca:	3301      	adds	r3, #1
 80064cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064d4:	2218      	movs	r2, #24
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 f92f 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 80064de:	233f      	movs	r3, #63	@ 0x3f
 80064e0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80064e4:	230f      	movs	r3, #15
 80064e6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80064ea:	f107 0310 	add.w	r3, r7, #16
 80064ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80064f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80064fa:	f107 030f 	add.w	r3, r7, #15
 80064fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006502:	2301      	movs	r3, #1
 8006504:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fb9e 	bl	8006c50 <hci_send_req>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	da01      	bge.n	800651e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800651a:	23ff      	movs	r3, #255	@ 0xff
 800651c:	e004      	b.n	8006528 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800651e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006522:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006526:	781b      	ldrb	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b0cc      	sub	sp, #304	@ 0x130
 8006536:	af00      	add	r7, sp, #0
 8006538:	4602      	mov	r2, r0
 800653a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800653e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006542:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006544:	f107 0310 	add.w	r3, r7, #16
 8006548:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800654c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006550:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800655e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006562:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006566:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800656a:	8812      	ldrh	r2, [r2, #0]
 800656c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800656e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006572:	3302      	adds	r3, #2
 8006574:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800657c:	2218      	movs	r2, #24
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f000 f8db 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006586:	233f      	movs	r3, #63	@ 0x3f
 8006588:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800658c:	2318      	movs	r3, #24
 800658e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006592:	f107 0310 	add.w	r3, r7, #16
 8006596:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800659a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800659e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80065a2:	f107 030f 	add.w	r3, r7, #15
 80065a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fb4a 	bl	8006c50 <hci_send_req>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da01      	bge.n	80065c6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80065c2:	23ff      	movs	r3, #255	@ 0xff
 80065c4:	e004      	b.n	80065d0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80065c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065ce:	781b      	ldrb	r3, [r3, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b088      	sub	sp, #32
 80065de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065e4:	f107 0308 	add.w	r3, r7, #8
 80065e8:	2218      	movs	r2, #24
 80065ea:	2100      	movs	r1, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f8a5 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x03;
 80065f2:	2303      	movs	r3, #3
 80065f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80065f6:	2303      	movs	r3, #3
 80065f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80065fa:	1dfb      	adds	r3, r7, #7
 80065fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80065fe:	2301      	movs	r3, #1
 8006600:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006602:	f107 0308 	add.w	r3, r7, #8
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fb21 	bl	8006c50 <hci_send_req>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	da01      	bge.n	8006618 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006614:	23ff      	movs	r3, #255	@ 0xff
 8006616:	e000      	b.n	800661a <hci_reset+0x40>
  return status;
 8006618:	79fb      	ldrb	r3, [r7, #7]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006622:	b590      	push	{r4, r7, lr}
 8006624:	b0cd      	sub	sp, #308	@ 0x134
 8006626:	af00      	add	r7, sp, #0
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006632:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006636:	4622      	mov	r2, r4
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800663e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006642:	4602      	mov	r2, r0
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800664a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800664e:	460a      	mov	r2, r1
 8006650:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006652:	f107 0310 	add.w	r3, r7, #16
 8006656:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800665a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800665e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006670:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006674:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800667c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006680:	3301      	adds	r3, #1
 8006682:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006686:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800668a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800668e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006696:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800669a:	3301      	adds	r3, #1
 800669c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80066a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066a8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80066b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066b4:	3301      	adds	r3, #1
 80066b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066be:	2218      	movs	r2, #24
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f83a 	bl	800673c <Osal_MemSet>
  rq.ogf = 0x08;
 80066c8:	2308      	movs	r3, #8
 80066ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80066ce:	2331      	movs	r3, #49	@ 0x31
 80066d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066d4:	f107 0310 	add.w	r3, r7, #16
 80066d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80066dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80066e4:	f107 030f 	add.w	r3, r7, #15
 80066e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 faa9 	bl	8006c50 <hci_send_req>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	da01      	bge.n	8006708 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006704:	23ff      	movs	r3, #255	@ 0xff
 8006706:	e004      	b.n	8006712 <hci_le_set_default_phy+0xf0>
  return status;
 8006708:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800670c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006710:	781b      	ldrb	r3, [r3, #0]
}
 8006712:	4618      	mov	r0, r3
 8006714:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006718:	46bd      	mov	sp, r7
 800671a:	bd90      	pop	{r4, r7, pc}

0800671c <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f002 fbed 	bl	8008f0c <memcpy>
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f002 fbb1 	bl	8008eb4 <memset>
 8006752:	4603      	mov	r3, r0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return;
 8006760:	bf00      	nop
}
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800676a:	b480      	push	{r7}
 800676c:	af00      	add	r7, sp, #0
  return;
 800676e:	bf00      	nop
}
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return;
 800677c:	bf00      	nop
}
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006786:	b480      	push	{r7}
 8006788:	af00      	add	r7, sp, #0
  return;
 800678a:	bf00      	nop
}
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return;
 8006798:	bf00      	nop
}
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80067a2:	b480      	push	{r7}
 80067a4:	af00      	add	r7, sp, #0
  return;
 80067a6:	bf00      	nop
}
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return;
 80067b4:	bf00      	nop
}
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80067be:	b480      	push	{r7}
 80067c0:	af00      	add	r7, sp, #0
  return;
 80067c2:	bf00      	nop
}
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  return;
 80067d0:	bf00      	nop
}
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80067da:	b480      	push	{r7}
 80067dc:	af00      	add	r7, sp, #0
  return;
 80067de:	bf00      	nop
}
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  return;
 80067ec:	bf00      	nop
}
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0
  return;
 80067fa:	bf00      	nop
}
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return;
 8006808:	bf00      	nop
}
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006812:	b480      	push	{r7}
 8006814:	af00      	add	r7, sp, #0
  return;
 8006816:	bf00      	nop
}
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return;
 8006824:	bf00      	nop
}
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  return;
 8006832:	bf00      	nop
}
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  return;
 8006840:	bf00      	nop
}
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006850:	4b04      	ldr	r3, [pc, #16]	@ (8006864 <SVCCTL_Init+0x18>)
 8006852:	2200      	movs	r2, #0
 8006854:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006856:	4b04      	ldr	r3, [pc, #16]	@ (8006868 <SVCCTL_Init+0x1c>)
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800685c:	f000 f806 	bl	800686c <SVCCTL_SvcInit>

  return;
 8006860:	bf00      	nop
}
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000050 	.word	0x20000050
 8006868:	20000070 	.word	0x20000070

0800686c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  BAS_Init();
 8006870:	f7ff ff74 	bl	800675c <BAS_Init>

  BLS_Init();
 8006874:	f7ff ff79 	bl	800676a <BLS_Init>

  CRS_STM_Init();
 8006878:	f7ff ff7e 	bl	8006778 <CRS_STM_Init>

  DIS_Init();
 800687c:	f7ff ff83 	bl	8006786 <DIS_Init>

  EDS_STM_Init();
 8006880:	f7ff ff88 	bl	8006794 <EDS_STM_Init>

  HIDS_Init();
 8006884:	f7ff ff8d 	bl	80067a2 <HIDS_Init>

  HRS_Init();
 8006888:	f7ff ff92 	bl	80067b0 <HRS_Init>

  HTS_Init();
 800688c:	f7ff ff97 	bl	80067be <HTS_Init>

  IAS_Init();
 8006890:	f7ff ff9c 	bl	80067cc <IAS_Init>

  LLS_Init();
 8006894:	f7ff ffa1 	bl	80067da <LLS_Init>

  TPS_Init();
 8006898:	f7ff ffa6 	bl	80067e8 <TPS_Init>

  MOTENV_STM_Init();
 800689c:	f7ff ffab 	bl	80067f6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80068a0:	f7ff ffb0 	bl	8006804 <P2PS_STM_Init>

  ZDD_STM_Init();
 80068a4:	f7ff ffb5 	bl	8006812 <ZDD_STM_Init>

  OTAS_STM_Init();
 80068a8:	f7ff ffba 	bl	8006820 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80068ac:	f7ff ffc6 	bl	800683c <BVOPUS_STM_Init>

  MESH_Init();
 80068b0:	f7ff ffbd 	bl	800682e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80068b4:	f001 fcce 	bl	8008254 <SVCCTL_InitCustomSvc>
  
  return;
 80068b8:	bf00      	nop
}
 80068ba:	bd80      	pop	{r7, pc}

080068bc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80068c4:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <SVCCTL_RegisterSvcHandler+0x30>)
 80068c6:	7f1b      	ldrb	r3, [r3, #28]
 80068c8:	4619      	mov	r1, r3
 80068ca:	4a08      	ldr	r2, [pc, #32]	@ (80068ec <SVCCTL_RegisterSvcHandler+0x30>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <SVCCTL_RegisterSvcHandler+0x30>)
 80068d4:	7f1b      	ldrb	r3, [r3, #28]
 80068d6:	3301      	adds	r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	4b04      	ldr	r3, [pc, #16]	@ (80068ec <SVCCTL_RegisterSvcHandler+0x30>)
 80068dc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80068de:	bf00      	nop
}
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000050 	.word	0x20000050

080068f0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3301      	adds	r3, #1
 80068fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2bff      	cmp	r3, #255	@ 0xff
 8006908:	d125      	bne.n	8006956 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	3302      	adds	r3, #2
 800690e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800691a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800691e:	d118      	bne.n	8006952 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006920:	2300      	movs	r3, #0
 8006922:	757b      	strb	r3, [r7, #21]
 8006924:	e00d      	b.n	8006942 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006926:	7d7b      	ldrb	r3, [r7, #21]
 8006928:	4a1a      	ldr	r2, [pc, #104]	@ (8006994 <SVCCTL_UserEvtRx+0xa4>)
 800692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d108      	bne.n	800694e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800693c:	7d7b      	ldrb	r3, [r7, #21]
 800693e:	3301      	adds	r3, #1
 8006940:	757b      	strb	r3, [r7, #21]
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <SVCCTL_UserEvtRx+0xa4>)
 8006944:	7f1b      	ldrb	r3, [r3, #28]
 8006946:	7d7a      	ldrb	r2, [r7, #21]
 8006948:	429a      	cmp	r2, r3
 800694a:	d3ec      	bcc.n	8006926 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800694c:	e002      	b.n	8006954 <SVCCTL_UserEvtRx+0x64>
              break;
 800694e:	bf00      	nop
          break;
 8006950:	e000      	b.n	8006954 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006952:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006954:	e000      	b.n	8006958 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006956:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d00f      	beq.n	800697e <SVCCTL_UserEvtRx+0x8e>
 800695e:	2b02      	cmp	r3, #2
 8006960:	dc10      	bgt.n	8006984 <SVCCTL_UserEvtRx+0x94>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <SVCCTL_UserEvtRx+0x7c>
 8006966:	2b01      	cmp	r3, #1
 8006968:	d006      	beq.n	8006978 <SVCCTL_UserEvtRx+0x88>
 800696a:	e00b      	b.n	8006984 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 ff8d 	bl	800788c <SVCCTL_App_Notification>
 8006972:	4603      	mov	r3, r0
 8006974:	75bb      	strb	r3, [r7, #22]
      break;
 8006976:	e008      	b.n	800698a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006978:	2301      	movs	r3, #1
 800697a:	75bb      	strb	r3, [r7, #22]
      break;
 800697c:	e005      	b.n	800698a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800697e:	2300      	movs	r3, #0
 8006980:	75bb      	strb	r3, [r7, #22]
      break;
 8006982:	e002      	b.n	800698a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006984:	2301      	movs	r3, #1
 8006986:	75bb      	strb	r3, [r7, #22]
      break;
 8006988:	bf00      	nop
  }

  return (return_status);
 800698a:	7dbb      	ldrb	r3, [r7, #22]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000050 	.word	0x20000050

08006998 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	212e      	movs	r1, #46	@ 0x2e
 80069b0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80069b4:	f000 fae8 	bl	8006f88 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	330b      	adds	r3, #11
 80069bc:	78db      	ldrb	r3, [r3, #3]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b088      	sub	sp, #32
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	210f      	movs	r1, #15
 80069de:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80069e2:	f000 fad1 	bl	8006f88 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	330b      	adds	r3, #11
 80069ea:	78db      	ldrb	r3, [r3, #3]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80069fc:	f107 030c 	add.w	r3, r7, #12
 8006a00:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	2110      	movs	r1, #16
 8006a08:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006a0c:	f000 fabc 	bl	8006f88 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	330b      	adds	r3, #11
 8006a14:	78db      	ldrb	r3, [r3, #3]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b08b      	sub	sp, #44	@ 0x2c
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006a48:	4b4a      	ldr	r3, [pc, #296]	@ (8006b74 <SHCI_GetWirelessFwInfo+0x154>)
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006a50:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006a5a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a44      	ldr	r2, [pc, #272]	@ (8006b78 <SHCI_GetWirelessFwInfo+0x158>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d10f      	bne.n	8006a8c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e01a      	b.n	8006ac2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006a94:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006a98:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	0e1b      	lsrs	r3, r3, #24
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	0c1b      	lsrs	r3, r3, #16
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	0a1b      	lsrs	r3, r3, #8
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	0e1b      	lsrs	r3, r3, #24
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	0a1b      	lsrs	r3, r3, #8
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	0e1b      	lsrs	r3, r3, #24
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	0e1b      	lsrs	r3, r3, #24
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	372c      	adds	r7, #44	@ 0x2c
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	58004000 	.word	0x58004000
 8006b78:	a94656b9 	.word	0xa94656b9

08006b7c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <hci_init+0x30>)
 8006b8c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006b8e:	4a08      	ldr	r2, [pc, #32]	@ (8006bb0 <hci_init+0x34>)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006b94:	4806      	ldr	r0, [pc, #24]	@ (8006bb0 <hci_init+0x34>)
 8006b96:	f000 f979 	bl	8006e8c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f8da 	bl	8006d58 <TlInit>

  return;
 8006ba4:	bf00      	nop
}
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000284 	.word	0x20000284
 8006bb0:	2000025c 	.word	0x2000025c

08006bb4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006bba:	4822      	ldr	r0, [pc, #136]	@ (8006c44 <hci_user_evt_proc+0x90>)
 8006bbc:	f000 fd32 	bl	8007624 <LST_is_empty>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d12b      	bne.n	8006c1e <hci_user_evt_proc+0x6a>
 8006bc6:	4b20      	ldr	r3, [pc, #128]	@ (8006c48 <hci_user_evt_proc+0x94>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d027      	beq.n	8006c1e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006bce:	f107 030c 	add.w	r3, r7, #12
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	481b      	ldr	r0, [pc, #108]	@ (8006c44 <hci_user_evt_proc+0x90>)
 8006bd6:	f000 fdb4 	bl	8007742 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006bda:	4b1c      	ldr	r3, [pc, #112]	@ (8006c4c <hci_user_evt_proc+0x98>)
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006be6:	2301      	movs	r3, #1
 8006be8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006bea:	4b18      	ldr	r3, [pc, #96]	@ (8006c4c <hci_user_evt_proc+0x98>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	1d3a      	adds	r2, r7, #4
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006bf4:	793a      	ldrb	r2, [r7, #4]
 8006bf6:	4b14      	ldr	r3, [pc, #80]	@ (8006c48 <hci_user_evt_proc+0x94>)
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006bfc:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <hci_user_evt_proc+0x94>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006c02:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <hci_user_evt_proc+0x94>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fc0d 	bl	800742c <TL_MM_EvtDone>
 8006c12:	e004      	b.n	8006c1e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4619      	mov	r1, r3
 8006c18:	480a      	ldr	r0, [pc, #40]	@ (8006c44 <hci_user_evt_proc+0x90>)
 8006c1a:	f000 fd25 	bl	8007668 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006c1e:	4809      	ldr	r0, [pc, #36]	@ (8006c44 <hci_user_evt_proc+0x90>)
 8006c20:	f000 fd00 	bl	8007624 <LST_is_empty>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <hci_user_evt_proc+0x86>
 8006c2a:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <hci_user_evt_proc+0x94>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006c32:	4804      	ldr	r0, [pc, #16]	@ (8006c44 <hci_user_evt_proc+0x90>)
 8006c34:	f001 f860 	bl	8007cf8 <hci_notify_asynch_evt>
  }


  return;
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
}
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000078 	.word	0x20000078
 8006c48:	20000084 	.word	0x20000084
 8006c4c:	2000025c 	.word	0x2000025c

08006c50 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f000 f8d1 	bl	8006e04 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006c62:	2300      	movs	r3, #0
 8006c64:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	885b      	ldrh	r3, [r3, #2]
 8006c6a:	b21b      	sxth	r3, r3
 8006c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c70:	b21a      	sxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b21b      	sxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006c82:	4b33      	ldr	r3, [pc, #204]	@ (8006d50 <hci_send_req+0x100>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	b2d9      	uxtb	r1, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	8bbb      	ldrh	r3, [r7, #28]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 f88f 	bl	8006db8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006c9a:	e04e      	b.n	8006d3a <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006c9c:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006ca0:	f001 f841 	bl	8007d26 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006ca4:	e043      	b.n	8006d2e <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	4619      	mov	r1, r3
 8006cac:	4829      	ldr	r0, [pc, #164]	@ (8006d54 <hci_send_req+0x104>)
 8006cae:	f000 fd48 	bl	8007742 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	7a5b      	ldrb	r3, [r3, #9]
 8006cb6:	2b0f      	cmp	r3, #15
 8006cb8:	d114      	bne.n	8006ce4 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	330b      	adds	r3, #11
 8006cbe:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8bba      	ldrh	r2, [r7, #28]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d104      	bne.n	8006cd6 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	785b      	ldrb	r3, [r3, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d027      	beq.n	8006d2e <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	77fb      	strb	r3, [r7, #31]
 8006ce2:	e024      	b.n	8006d2e <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	330b      	adds	r3, #11
 8006ce8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8bba      	ldrh	r2, [r7, #28]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d114      	bne.n	8006d22 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	7a9b      	ldrb	r3, [r3, #10]
 8006cfc:	3b03      	subs	r3, #3
 8006cfe:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bfa8      	it	ge
 8006d0a:	461a      	movge	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6918      	ldr	r0, [r3, #16]
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	1cd9      	adds	r1, r3, #3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f002 f8f5 	bl	8008f0c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006d2e:	4809      	ldr	r0, [pc, #36]	@ (8006d54 <hci_send_req+0x104>)
 8006d30:	f000 fc78 	bl	8007624 <LST_is_empty>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0b5      	beq.n	8006ca6 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006d3a:	7ffb      	ldrb	r3, [r7, #31]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ad      	beq.n	8006c9c <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006d40:	2001      	movs	r0, #1
 8006d42:	f000 f85f 	bl	8006e04 <NotifyCmdStatus>

  return 0;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000288 	.word	0x20000288
 8006d54:	2000027c 	.word	0x2000027c

08006d58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006d60:	480f      	ldr	r0, [pc, #60]	@ (8006da0 <TlInit+0x48>)
 8006d62:	f000 fc4f 	bl	8007604 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006d66:	4a0f      	ldr	r2, [pc, #60]	@ (8006da4 <TlInit+0x4c>)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006d6c:	480e      	ldr	r0, [pc, #56]	@ (8006da8 <TlInit+0x50>)
 8006d6e:	f000 fc49 	bl	8007604 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006d72:	4b0e      	ldr	r3, [pc, #56]	@ (8006dac <TlInit+0x54>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006d78:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <TlInit+0x58>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006d84:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <TlInit+0x5c>)
 8006d86:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <TlInit+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f107 0208 	add.w	r2, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
  }

  return;
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
}
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	2000027c 	.word	0x2000027c
 8006da4:	20000080 	.word	0x20000080
 8006da8:	20000078 	.word	0x20000078
 8006dac:	20000084 	.word	0x20000084
 8006db0:	2000025c 	.word	0x2000025c
 8006db4:	08006e45 	.word	0x08006e45

08006db8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	603a      	str	r2, [r7, #0]
 8006dc2:	80fb      	strh	r3, [r7, #6]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <SendCmd+0x44>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <SendCmd+0x44>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	797a      	ldrb	r2, [r7, #5]
 8006dd8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006dda:	4b08      	ldr	r3, [pc, #32]	@ (8006dfc <SendCmd+0x44>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	330c      	adds	r3, #12
 8006de0:	797a      	ldrb	r2, [r7, #5]
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f002 f891 	bl	8008f0c <memcpy>

  hciContext.io.Send(0,0);
 8006dea:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <SendCmd+0x48>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2100      	movs	r1, #0
 8006df0:	2000      	movs	r0, #0
 8006df2:	4798      	blx	r3

  return;
 8006df4:	bf00      	nop
}
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000080 	.word	0x20000080
 8006e00:	2000025c 	.word	0x2000025c

08006e04 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006e14:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <NotifyCmdStatus+0x3c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006e1c:	4b08      	ldr	r3, [pc, #32]	@ (8006e40 <NotifyCmdStatus+0x3c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2000      	movs	r0, #0
 8006e22:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006e24:	e008      	b.n	8006e38 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006e26:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <NotifyCmdStatus+0x3c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006e2e:	4b04      	ldr	r3, [pc, #16]	@ (8006e40 <NotifyCmdStatus+0x3c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2001      	movs	r0, #1
 8006e34:	4798      	blx	r3
  return;
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
}
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000284 	.word	0x20000284

08006e44 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7a5b      	ldrb	r3, [r3, #9]
 8006e50:	2b0f      	cmp	r3, #15
 8006e52:	d003      	beq.n	8006e5c <TlEvtReceived+0x18>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7a5b      	ldrb	r3, [r3, #9]
 8006e58:	2b0e      	cmp	r3, #14
 8006e5a:	d107      	bne.n	8006e6c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4809      	ldr	r0, [pc, #36]	@ (8006e84 <TlEvtReceived+0x40>)
 8006e60:	f000 fc28 	bl	80076b4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006e64:	2000      	movs	r0, #0
 8006e66:	f000 ff53 	bl	8007d10 <hci_cmd_resp_release>
 8006e6a:	e006      	b.n	8006e7a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	4806      	ldr	r0, [pc, #24]	@ (8006e88 <TlEvtReceived+0x44>)
 8006e70:	f000 fc20 	bl	80076b4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e74:	4804      	ldr	r0, [pc, #16]	@ (8006e88 <TlEvtReceived+0x44>)
 8006e76:	f000 ff3f 	bl	8007cf8 <hci_notify_asynch_evt>
  }

  return;
 8006e7a:	bf00      	nop
}
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	2000027c 	.word	0x2000027c
 8006e88:	20000078 	.word	0x20000078

08006e8c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a05      	ldr	r2, [pc, #20]	@ (8006eac <hci_register_io_bus+0x20>)
 8006e98:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a04      	ldr	r2, [pc, #16]	@ (8006eb0 <hci_register_io_bus+0x24>)
 8006e9e:	611a      	str	r2, [r3, #16]

  return;
 8006ea0:	bf00      	nop
}
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	080071a5 	.word	0x080071a5
 8006eb0:	0800720d 	.word	0x0800720d

08006eb4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a08      	ldr	r2, [pc, #32]	@ (8006ee4 <shci_init+0x30>)
 8006ec4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006ec6:	4a08      	ldr	r2, [pc, #32]	@ (8006ee8 <shci_init+0x34>)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006ecc:	4806      	ldr	r0, [pc, #24]	@ (8006ee8 <shci_init+0x34>)
 8006ece:	f000 f915 	bl	80070fc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f898 	bl	800700c <TlInit>

  return;
 8006edc:	bf00      	nop
}
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	200002ac 	.word	0x200002ac
 8006ee8:	2000028c 	.word	0x2000028c

08006eec <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ef2:	4822      	ldr	r0, [pc, #136]	@ (8006f7c <shci_user_evt_proc+0x90>)
 8006ef4:	f000 fb96 	bl	8007624 <LST_is_empty>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d12b      	bne.n	8006f56 <shci_user_evt_proc+0x6a>
 8006efe:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <shci_user_evt_proc+0x94>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d027      	beq.n	8006f56 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	481b      	ldr	r0, [pc, #108]	@ (8006f7c <shci_user_evt_proc+0x90>)
 8006f0e:	f000 fc18 	bl	8007742 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006f12:	4b1c      	ldr	r3, [pc, #112]	@ (8006f84 <shci_user_evt_proc+0x98>)
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006f22:	4b18      	ldr	r3, [pc, #96]	@ (8006f84 <shci_user_evt_proc+0x98>)
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	1d3a      	adds	r2, r7, #4
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006f2c:	793a      	ldrb	r2, [r7, #4]
 8006f2e:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <shci_user_evt_proc+0x94>)
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e002      	b.n	8006f3a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006f34:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <shci_user_evt_proc+0x94>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006f3a:	4b11      	ldr	r3, [pc, #68]	@ (8006f80 <shci_user_evt_proc+0x94>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fa71 	bl	800742c <TL_MM_EvtDone>
 8006f4a:	e004      	b.n	8006f56 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	480a      	ldr	r0, [pc, #40]	@ (8006f7c <shci_user_evt_proc+0x90>)
 8006f52:	f000 fb89 	bl	8007668 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006f56:	4809      	ldr	r0, [pc, #36]	@ (8006f7c <shci_user_evt_proc+0x90>)
 8006f58:	f000 fb64 	bl	8007624 <LST_is_empty>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d107      	bne.n	8006f72 <shci_user_evt_proc+0x86>
 8006f62:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <shci_user_evt_proc+0x94>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006f6a:	4804      	ldr	r0, [pc, #16]	@ (8006f7c <shci_user_evt_proc+0x90>)
 8006f6c:	f7f9 fb74 	bl	8000658 <shci_notify_asynch_evt>
  }


  return;
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
}
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000088 	.word	0x20000088
 8006f80:	20000098 	.word	0x20000098
 8006f84:	2000028c 	.word	0x2000028c

08006f88 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60ba      	str	r2, [r7, #8]
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	4603      	mov	r3, r0
 8006f94:	81fb      	strh	r3, [r7, #14]
 8006f96:	460b      	mov	r3, r1
 8006f98:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f000 f868 	bl	8007070 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006fa0:	4b17      	ldr	r3, [pc, #92]	@ (8007000 <shci_send+0x78>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	89fa      	ldrh	r2, [r7, #14]
 8006fa6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006faa:	4b15      	ldr	r3, [pc, #84]	@ (8007000 <shci_send+0x78>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	7b7a      	ldrb	r2, [r7, #13]
 8006fb0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006fb2:	4b13      	ldr	r3, [pc, #76]	@ (8007000 <shci_send+0x78>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	7b7a      	ldrb	r2, [r7, #13]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 ffa5 	bl	8008f0c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006fc2:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <shci_send+0x7c>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007008 <shci_send+0x80>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	2000      	movs	r0, #0
 8006fd0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006fd2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006fd6:	f7f9 fb56 	bl	8000686 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f103 0008 	add.w	r0, r3, #8
 8006fe0:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <shci_send+0x78>)
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <shci_send+0x78>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	789b      	ldrb	r3, [r3, #2]
 8006fea:	3303      	adds	r3, #3
 8006fec:	461a      	mov	r2, r3
 8006fee:	f001 ff8d 	bl	8008f0c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	f000 f83c 	bl	8007070 <Cmd_SetStatus>

  return;
 8006ff8:	bf00      	nop
}
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000094 	.word	0x20000094
 8007004:	200002b0 	.word	0x200002b0
 8007008:	2000028c 	.word	0x2000028c

0800700c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007014:	4a10      	ldr	r2, [pc, #64]	@ (8007058 <TlInit+0x4c>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800701a:	4810      	ldr	r0, [pc, #64]	@ (800705c <TlInit+0x50>)
 800701c:	f000 faf2 	bl	8007604 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007020:	2001      	movs	r0, #1
 8007022:	f000 f825 	bl	8007070 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <TlInit+0x54>)
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800702c:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <TlInit+0x58>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007038:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <TlInit+0x5c>)
 800703a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800703c:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <TlInit+0x60>)
 800703e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007040:	4b08      	ldr	r3, [pc, #32]	@ (8007064 <TlInit+0x58>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f107 020c 	add.w	r2, r7, #12
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
  }

  return;
 800704c:	bf00      	nop
 800704e:	bf00      	nop
}
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000094 	.word	0x20000094
 800705c:	20000088 	.word	0x20000088
 8007060:	20000098 	.word	0x20000098
 8007064:	2000028c 	.word	0x2000028c
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070d9 	.word	0x080070d9

08007070 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10b      	bne.n	8007098 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007080:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <Cmd_SetStatus+0x48>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007088:	4b0b      	ldr	r3, [pc, #44]	@ (80070b8 <Cmd_SetStatus+0x48>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2000      	movs	r0, #0
 800708e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007090:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <Cmd_SetStatus+0x4c>)
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007096:	e00b      	b.n	80070b0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007098:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <Cmd_SetStatus+0x4c>)
 800709a:	2201      	movs	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800709e:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <Cmd_SetStatus+0x48>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80070a6:	4b04      	ldr	r3, [pc, #16]	@ (80070b8 <Cmd_SetStatus+0x48>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2001      	movs	r0, #1
 80070ac:	4798      	blx	r3
  return;
 80070ae:	bf00      	nop
 80070b0:	bf00      	nop
}
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200002ac 	.word	0x200002ac
 80070bc:	20000090 	.word	0x20000090

080070c0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80070c8:	2000      	movs	r0, #0
 80070ca:	f7f9 fad1 	bl	8000670 <shci_cmd_resp_release>

  return;
 80070ce:	bf00      	nop
}
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4805      	ldr	r0, [pc, #20]	@ (80070f8 <TlUserEvtReceived+0x20>)
 80070e4:	f000 fae6 	bl	80076b4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80070e8:	4803      	ldr	r0, [pc, #12]	@ (80070f8 <TlUserEvtReceived+0x20>)
 80070ea:	f7f9 fab5 	bl	8000658 <shci_notify_asynch_evt>

  return;
 80070ee:	bf00      	nop
}
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000088 	.word	0x20000088

080070fc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a05      	ldr	r2, [pc, #20]	@ (800711c <shci_register_io_bus+0x20>)
 8007108:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <shci_register_io_bus+0x24>)
 800710e:	611a      	str	r2, [r3, #16]

  return;
 8007110:	bf00      	nop
}
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	080072b9 	.word	0x080072b9
 8007120:	0800730d 	.word	0x0800730d

08007124 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007128:	f001 faa6 	bl	8008678 <HW_IPCC_Enable>

  return;
 800712c:	bf00      	nop
}
 800712e:	bd80      	pop	{r7, pc}

08007130 <TL_Init>:


void TL_Init( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007134:	4b10      	ldr	r3, [pc, #64]	@ (8007178 <TL_Init+0x48>)
 8007136:	4a11      	ldr	r2, [pc, #68]	@ (800717c <TL_Init+0x4c>)
 8007138:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800713a:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <TL_Init+0x48>)
 800713c:	4a10      	ldr	r2, [pc, #64]	@ (8007180 <TL_Init+0x50>)
 800713e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007140:	4b0d      	ldr	r3, [pc, #52]	@ (8007178 <TL_Init+0x48>)
 8007142:	4a10      	ldr	r2, [pc, #64]	@ (8007184 <TL_Init+0x54>)
 8007144:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007146:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <TL_Init+0x48>)
 8007148:	4a0f      	ldr	r2, [pc, #60]	@ (8007188 <TL_Init+0x58>)
 800714a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800714c:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <TL_Init+0x48>)
 800714e:	4a0f      	ldr	r2, [pc, #60]	@ (800718c <TL_Init+0x5c>)
 8007150:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007152:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <TL_Init+0x48>)
 8007154:	4a0e      	ldr	r2, [pc, #56]	@ (8007190 <TL_Init+0x60>)
 8007156:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007158:	4b07      	ldr	r3, [pc, #28]	@ (8007178 <TL_Init+0x48>)
 800715a:	4a0e      	ldr	r2, [pc, #56]	@ (8007194 <TL_Init+0x64>)
 800715c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800715e:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <TL_Init+0x48>)
 8007160:	4a0d      	ldr	r2, [pc, #52]	@ (8007198 <TL_Init+0x68>)
 8007162:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <TL_Init+0x48>)
 8007166:	4a0d      	ldr	r2, [pc, #52]	@ (800719c <TL_Init+0x6c>)
 8007168:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800716a:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <TL_Init+0x48>)
 800716c:	4a0c      	ldr	r2, [pc, #48]	@ (80071a0 <TL_Init+0x70>)
 800716e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007170:	f001 fa96 	bl	80086a0 <HW_IPCC_Init>

  return;
 8007174:	bf00      	nop
}
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20030000 	.word	0x20030000
 800717c:	20030028 	.word	0x20030028
 8007180:	20030048 	.word	0x20030048
 8007184:	20030058 	.word	0x20030058
 8007188:	20030068 	.word	0x20030068
 800718c:	20030070 	.word	0x20030070
 8007190:	20030078 	.word	0x20030078
 8007194:	20030080 	.word	0x20030080
 8007198:	2003009c 	.word	0x2003009c
 800719c:	200300a0 	.word	0x200300a0
 80071a0:	200300ac 	.word	0x200300ac

080071a4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80071b0:	4811      	ldr	r0, [pc, #68]	@ (80071f8 <TL_BLE_Init+0x54>)
 80071b2:	f000 fa27 	bl	8007604 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80071b6:	4b11      	ldr	r3, [pc, #68]	@ (80071fc <TL_BLE_Init+0x58>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007200 <TL_BLE_Init+0x5c>)
 80071d0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4a08      	ldr	r2, [pc, #32]	@ (80071f8 <TL_BLE_Init+0x54>)
 80071d6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80071d8:	f001 fa78 	bl	80086cc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a08      	ldr	r2, [pc, #32]	@ (8007204 <TL_BLE_Init+0x60>)
 80071e2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a07      	ldr	r2, [pc, #28]	@ (8007208 <TL_BLE_Init+0x64>)
 80071ea:	6013      	str	r3, [r2, #0]

  return 0;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200300c8 	.word	0x200300c8
 80071fc:	20030000 	.word	0x20030000
 8007200:	20030a58 	.word	0x20030a58
 8007204:	200002bc 	.word	0x200002bc
 8007208:	200002c0 	.word	0x200002c0

0800720c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007218:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <TL_BLE_SendCmd+0x34>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2201      	movs	r2, #1
 8007220:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <TL_BLE_SendCmd+0x34>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4619      	mov	r1, r3
 800722a:	2001      	movs	r0, #1
 800722c:	f000 f96c 	bl	8007508 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007230:	f001 fa66 	bl	8008700 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20030000 	.word	0x20030000

08007244 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800724a:	e01c      	b.n	8007286 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4812      	ldr	r0, [pc, #72]	@ (800729c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007252:	f000 fa76 	bl	8007742 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7a5b      	ldrb	r3, [r3, #9]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d003      	beq.n	8007266 <HW_IPCC_BLE_RxEvtNot+0x22>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7a5b      	ldrb	r3, [r3, #9]
 8007262:	2b0e      	cmp	r3, #14
 8007264:	d105      	bne.n	8007272 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4619      	mov	r1, r3
 800726a:	2002      	movs	r0, #2
 800726c:	f000 f94c 	bl	8007508 <OutputDbgTrace>
 8007270:	e004      	b.n	800727c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4619      	mov	r1, r3
 8007276:	2003      	movs	r0, #3
 8007278:	f000 f946 	bl	8007508 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800727c:	4b08      	ldr	r3, [pc, #32]	@ (80072a0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007286:	4805      	ldr	r0, [pc, #20]	@ (800729c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007288:	f000 f9cc 	bl	8007624 <LST_is_empty>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0dc      	beq.n	800724c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007292:	bf00      	nop
}
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200300c8 	.word	0x200300c8
 80072a0:	200002bc 	.word	0x200002bc

080072a4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80072a8:	4b02      	ldr	r3, [pc, #8]	@ (80072b4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4798      	blx	r3

  return;
 80072ae:	bf00      	nop
}
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200002c0 	.word	0x200002c0

080072b8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80072c4:	480d      	ldr	r0, [pc, #52]	@ (80072fc <TL_SYS_Init+0x44>)
 80072c6:	f000 f99d 	bl	8007604 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <TL_SYS_Init+0x48>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <TL_SYS_Init+0x44>)
 80072dc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80072de:	f001 fa41 	bl	8008764 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a07      	ldr	r2, [pc, #28]	@ (8007304 <TL_SYS_Init+0x4c>)
 80072e8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	4a06      	ldr	r2, [pc, #24]	@ (8007308 <TL_SYS_Init+0x50>)
 80072f0:	6013      	str	r3, [r2, #0]

  return 0;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	200300d0 	.word	0x200300d0
 8007300:	20030000 	.word	0x20030000
 8007304:	200002c4 	.word	0x200002c4
 8007308:	200002c8 	.word	0x200002c8

0800730c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <TL_SYS_SendCmd+0x34>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2210      	movs	r2, #16
 8007320:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <TL_SYS_SendCmd+0x34>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4619      	mov	r1, r3
 800732a:	2004      	movs	r0, #4
 800732c:	f000 f8ec 	bl	8007508 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007330:	f001 fa32 	bl	8008798 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20030000 	.word	0x20030000

08007344 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007348:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	2005      	movs	r0, #5
 8007352:	f000 f8d9 	bl	8007508 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007356:	4b05      	ldr	r3, [pc, #20]	@ (800736c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a03      	ldr	r2, [pc, #12]	@ (8007368 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800735c:	68d2      	ldr	r2, [r2, #12]
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3

  return;
 8007364:	bf00      	nop
}
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20030000 	.word	0x20030000
 800736c:	200002c4 	.word	0x200002c4

08007370 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007376:	e00e      	b.n	8007396 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	4619      	mov	r1, r3
 800737c:	480b      	ldr	r0, [pc, #44]	@ (80073ac <HW_IPCC_SYS_EvtNot+0x3c>)
 800737e:	f000 f9e0 	bl	8007742 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4619      	mov	r1, r3
 8007386:	2006      	movs	r0, #6
 8007388:	f000 f8be 	bl	8007508 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800738c:	4b08      	ldr	r3, [pc, #32]	@ (80073b0 <HW_IPCC_SYS_EvtNot+0x40>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4610      	mov	r0, r2
 8007394:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007396:	4805      	ldr	r0, [pc, #20]	@ (80073ac <HW_IPCC_SYS_EvtNot+0x3c>)
 8007398:	f000 f944 	bl	8007624 <LST_is_empty>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0ea      	beq.n	8007378 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80073a2:	bf00      	nop
}
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	200300d0 	.word	0x200300d0
 80073b0:	200002c8 	.word	0x200002c8

080073b4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80073bc:	4817      	ldr	r0, [pc, #92]	@ (800741c <TL_MM_Init+0x68>)
 80073be:	f000 f921 	bl	8007604 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80073c2:	4817      	ldr	r0, [pc, #92]	@ (8007420 <TL_MM_Init+0x6c>)
 80073c4:	f000 f91e 	bl	8007604 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80073c8:	4b16      	ldr	r3, [pc, #88]	@ (8007424 <TL_MM_Init+0x70>)
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	4a16      	ldr	r2, [pc, #88]	@ (8007428 <TL_MM_Init+0x74>)
 80073ce:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80073d0:	4b15      	ldr	r3, [pc, #84]	@ (8007428 <TL_MM_Init+0x74>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6892      	ldr	r2, [r2, #8]
 80073d8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80073da:	4b13      	ldr	r3, [pc, #76]	@ (8007428 <TL_MM_Init+0x74>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	68d2      	ldr	r2, [r2, #12]
 80073e2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80073e4:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <TL_MM_Init+0x74>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a0c      	ldr	r2, [pc, #48]	@ (800741c <TL_MM_Init+0x68>)
 80073ea:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80073ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <TL_MM_Init+0x74>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80073f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <TL_MM_Init+0x74>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6852      	ldr	r2, [r2, #4]
 80073fe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007400:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <TL_MM_Init+0x74>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6912      	ldr	r2, [r2, #16]
 8007408:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800740a:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <TL_MM_Init+0x74>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6952      	ldr	r2, [r2, #20]
 8007412:	619a      	str	r2, [r3, #24]

  return;
 8007414:	bf00      	nop
}
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	200300b8 	.word	0x200300b8
 8007420:	200002b4 	.word	0x200002b4
 8007424:	20030000 	.word	0x20030000
 8007428:	200002cc 	.word	0x200002cc

0800742c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	4807      	ldr	r0, [pc, #28]	@ (8007454 <TL_MM_EvtDone+0x28>)
 8007438:	f000 f93c 	bl	80076b4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	2000      	movs	r0, #0
 8007440:	f000 f862 	bl	8007508 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007444:	4804      	ldr	r0, [pc, #16]	@ (8007458 <TL_MM_EvtDone+0x2c>)
 8007446:	f001 f9ed 	bl	8008824 <HW_IPCC_MM_SendFreeBuf>

  return;
 800744a:	bf00      	nop
}
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	200002b4 	.word	0x200002b4
 8007458:	0800745d 	.word	0x0800745d

0800745c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007462:	e00c      	b.n	800747e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007464:	1d3b      	adds	r3, r7, #4
 8007466:	4619      	mov	r1, r3
 8007468:	480a      	ldr	r0, [pc, #40]	@ (8007494 <SendFreeBuf+0x38>)
 800746a:	f000 f96a 	bl	8007742 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800746e:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <SendFreeBuf+0x3c>)
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f91b 	bl	80076b4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800747e:	4805      	ldr	r0, [pc, #20]	@ (8007494 <SendFreeBuf+0x38>)
 8007480:	f000 f8d0 	bl	8007624 <LST_is_empty>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0ec      	beq.n	8007464 <SendFreeBuf+0x8>
  }

  return;
 800748a:	bf00      	nop
}
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200002b4 	.word	0x200002b4
 8007498:	20030000 	.word	0x20030000

0800749c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80074a0:	4805      	ldr	r0, [pc, #20]	@ (80074b8 <TL_TRACES_Init+0x1c>)
 80074a2:	f000 f8af 	bl	8007604 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80074a6:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <TL_TRACES_Init+0x20>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	4a03      	ldr	r2, [pc, #12]	@ (80074b8 <TL_TRACES_Init+0x1c>)
 80074ac:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80074ae:	f001 fa0b 	bl	80088c8 <HW_IPCC_TRACES_Init>

  return;
 80074b2:	bf00      	nop
}
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	200300c0 	.word	0x200300c0
 80074bc:	20030000 	.word	0x20030000

080074c0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80074c6:	e008      	b.n	80074da <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4808      	ldr	r0, [pc, #32]	@ (80074f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80074ce:	f000 f938 	bl	8007742 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f80d 	bl	80074f4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80074da:	4805      	ldr	r0, [pc, #20]	@ (80074f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80074dc:	f000 f8a2 	bl	8007624 <LST_is_empty>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0f0      	beq.n	80074c8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80074e6:	bf00      	nop
}
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200300c0 	.word	0x200300c0

080074f4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b06      	cmp	r3, #6
 8007518:	d845      	bhi.n	80075a6 <OutputDbgTrace+0x9e>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <OutputDbgTrace+0x18>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	0800753d 	.word	0x0800753d
 8007524:	08007561 	.word	0x08007561
 8007528:	08007567 	.word	0x08007567
 800752c:	0800757b 	.word	0x0800757b
 8007530:	08007587 	.word	0x08007587
 8007534:	0800758d 	.word	0x0800758d
 8007538:	0800759b 	.word	0x0800759b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	7a5b      	ldrb	r3, [r3, #9]
 8007544:	2bff      	cmp	r3, #255	@ 0xff
 8007546:	d005      	beq.n	8007554 <OutputDbgTrace+0x4c>
 8007548:	2bff      	cmp	r3, #255	@ 0xff
 800754a:	dc05      	bgt.n	8007558 <OutputDbgTrace+0x50>
 800754c:	2b0e      	cmp	r3, #14
 800754e:	d005      	beq.n	800755c <OutputDbgTrace+0x54>
 8007550:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007552:	e001      	b.n	8007558 <OutputDbgTrace+0x50>
          break;
 8007554:	bf00      	nop
 8007556:	e027      	b.n	80075a8 <OutputDbgTrace+0xa0>
          break;
 8007558:	bf00      	nop
 800755a:	e025      	b.n	80075a8 <OutputDbgTrace+0xa0>
          break;
 800755c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800755e:	e023      	b.n	80075a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007564:	e020      	b.n	80075a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	7a5b      	ldrb	r3, [r3, #9]
 800756e:	2b0e      	cmp	r3, #14
 8007570:	d001      	beq.n	8007576 <OutputDbgTrace+0x6e>
 8007572:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007574:	e000      	b.n	8007578 <OutputDbgTrace+0x70>
          break;
 8007576:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007578:	e016      	b.n	80075a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	7a5b      	ldrb	r3, [r3, #9]
 8007582:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007584:	e010      	b.n	80075a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800758a:	e00d      	b.n	80075a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007596:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007598:	e006      	b.n	80075a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	7a5b      	ldrb	r3, [r3, #9]
 80075a2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80075a4:	e000      	b.n	80075a8 <OutputDbgTrace+0xa0>

    default:
      break;
 80075a6:	bf00      	nop
  }

  return;
 80075a8:	bf00      	nop
}
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80075be:	4b0f      	ldr	r3, [pc, #60]	@ (80075fc <OTP_Read+0x48>)
 80075c0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80075c2:	e002      	b.n	80075ca <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3b08      	subs	r3, #8
 80075c8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	79fa      	ldrb	r2, [r7, #7]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d003      	beq.n	80075de <OTP_Read+0x2a>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a09      	ldr	r2, [pc, #36]	@ (8007600 <OTP_Read+0x4c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d1f2      	bne.n	80075c4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3307      	adds	r3, #7
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	79fa      	ldrb	r2, [r7, #7]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d001      	beq.n	80075ee <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80075ee:	68fb      	ldr	r3, [r7, #12]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	1fff73f8 	.word	0x1fff73f8
 8007600:	1fff7000 	.word	0x1fff7000

08007604 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	605a      	str	r2, [r3, #4]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800762c:	f3ef 8310 	mrs	r3, PRIMASK
 8007630:	60fb      	str	r3, [r7, #12]
  return(result);
 8007632:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007636:	b672      	cpsid	i
}
 8007638:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d102      	bne.n	800764a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	75fb      	strb	r3, [r7, #23]
 8007648:	e001      	b.n	800764e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f383 8810 	msr	PRIMASK, r3
}
 8007658:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007672:	f3ef 8310 	mrs	r3, PRIMASK
 8007676:	60fb      	str	r3, [r7, #12]
  return(result);
 8007678:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800767a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800767c:	b672      	cpsid	i
}
 800767e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	605a      	str	r2, [r3, #4]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f383 8810 	msr	PRIMASK, r3
}
 80076a6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076a8:	bf00      	nop
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80076c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076c8:	b672      	cpsid	i
}
 80076ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f383 8810 	msr	PRIMASK, r3
}
 80076f2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007708:	f3ef 8310 	mrs	r3, PRIMASK
 800770c:	60fb      	str	r3, [r7, #12]
  return(result);
 800770e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007712:	b672      	cpsid	i
}
 8007714:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	605a      	str	r2, [r3, #4]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f383 8810 	msr	PRIMASK, r3
}
 8007734:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774c:	f3ef 8310 	mrs	r3, PRIMASK
 8007750:	60fb      	str	r3, [r7, #12]
  return(result);
 8007752:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007756:	b672      	cpsid	i
}
 8007758:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff ffca 	bl	8007700 <LST_remove_node>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f383 8810 	msr	PRIMASK, r3
}
 8007776:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007778:	bf00      	nop
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007784:	4b03      	ldr	r3, [pc, #12]	@ (8007794 <LL_FLASH_GetUDN+0x14>)
 8007786:	681b      	ldr	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	1fff7580 	.word	0x1fff7580

08007798 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800779c:	4b03      	ldr	r3, [pc, #12]	@ (80077ac <LL_FLASH_GetDeviceID+0x14>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	1fff7584 	.word	0x1fff7584

080077b0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80077b4:	4b03      	ldr	r3, [pc, #12]	@ (80077c4 <LL_FLASH_GetSTCompanyID+0x14>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	0a1b      	lsrs	r3, r3, #8
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	1fff7584 	.word	0x1fff7584

080077c8 <APP_BLE_StartAdvertising>:
static void Connection_Interval_Update_Req(void);
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN PFP */
void APP_BLE_StartAdvertising(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_FAST_ADV);
 80077cc:	2001      	movs	r0, #1
 80077ce:	f000 fa05 	bl	8007bdc <Adv_Request>
}
 80077d2:	bf00      	nop
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80077d8:	b5b0      	push	{r4, r5, r7, lr}
 80077da:	b090      	sub	sp, #64	@ 0x40
 80077dc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80077de:	2392      	movs	r3, #146	@ 0x92
 80077e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80077e4:	4b25      	ldr	r3, [pc, #148]	@ (800787c <APP_BLE_Init+0xa4>)
 80077e6:	1d3c      	adds	r4, r7, #4
 80077e8:	461d      	mov	r5, r3
 80077ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80077fa:	c403      	stmia	r4!, {r0, r1}
 80077fc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80077fe:	f000 f923 	bl	8007a48 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007802:	2101      	movs	r1, #1
 8007804:	2002      	movs	r0, #2
 8007806:	f001 f8c7 	bl	8008998 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800780a:	4a1d      	ldr	r2, [pc, #116]	@ (8007880 <APP_BLE_Init+0xa8>)
 800780c:	2100      	movs	r1, #0
 800780e:	2002      	movs	r0, #2
 8007810:	f001 fa24 	bl	8008c5c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f8be 	bl	8006998 <SHCI_C2_BLE_Init>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007822:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800782a:	f7fa fa00 	bl	8001c2e <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800782e:	f000 f921 	bl	8007a74 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007832:	f7ff f80b 	bl	800684c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007836:	4b13      	ldr	r3, [pc, #76]	@ (8007884 <APP_BLE_Init+0xac>)
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800783e:	4b11      	ldr	r3, [pc, #68]	@ (8007884 <APP_BLE_Init+0xac>)
 8007840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007844:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007846:	4a10      	ldr	r2, [pc, #64]	@ (8007888 <APP_BLE_Init+0xb0>)
 8007848:	2100      	movs	r1, #0
 800784a:	2001      	movs	r0, #1
 800784c:	f001 fa06 	bl	8008c5c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007850:	2006      	movs	r0, #6
 8007852:	f7fe fe6e 	bl	8006532 <aci_hal_set_radio_activity_mask>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800785c:	f000 fafe 	bl	8007e5c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <APP_BLE_Init+0xac>)
 8007862:	2200      	movs	r2, #0
 8007864:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007866:	4b07      	ldr	r3, [pc, #28]	@ (8007884 <APP_BLE_Init+0xac>)
 8007868:	2200      	movs	r2, #0
 800786a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800786c:	2001      	movs	r0, #1
 800786e:	f000 f9b5 	bl	8007bdc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007872:	bf00      	nop
}
 8007874:	3740      	adds	r7, #64	@ 0x40
 8007876:	46bd      	mov	sp, r7
 8007878:	bdb0      	pop	{r4, r5, r7, pc}
 800787a:	bf00      	nop
 800787c:	08008f7c 	.word	0x08008f7c
 8007880:	08006bb5 	.word	0x08006bb5
 8007884:	200002d8 	.word	0x200002d8
 8007888:	08007cc5 	.word	0x08007cc5

0800788c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08c      	sub	sp, #48	@ 0x30
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007894:	2392      	movs	r3, #146	@ 0x92
 8007896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3301      	adds	r3, #1
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2bff      	cmp	r3, #255	@ 0xff
 80078a6:	d05d      	beq.n	8007964 <SVCCTL_App_Notification+0xd8>
 80078a8:	2bff      	cmp	r3, #255	@ 0xff
 80078aa:	f300 80bf 	bgt.w	8007a2c <SVCCTL_App_Notification+0x1a0>
 80078ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80078b0:	d02c      	beq.n	800790c <SVCCTL_App_Notification+0x80>
 80078b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80078b4:	f300 80ba 	bgt.w	8007a2c <SVCCTL_App_Notification+0x1a0>
 80078b8:	2b05      	cmp	r3, #5
 80078ba:	d002      	beq.n	80078c2 <SVCCTL_App_Notification+0x36>
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d021      	beq.n	8007904 <SVCCTL_App_Notification+0x78>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80078c0:	e0b4      	b.n	8007a2c <SVCCTL_App_Notification+0x1a0>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	3302      	adds	r3, #2
 80078c6:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	4b5a      	ldr	r3, [pc, #360]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 80078d2:	8adb      	ldrh	r3, [r3, #22]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d106      	bne.n	80078e6 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80078d8:	4b58      	ldr	r3, [pc, #352]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 80078da:	2200      	movs	r2, #0
 80078dc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80078de:	4b57      	ldr	r3, [pc, #348]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      aci_gap_set_non_discoverable();   // radio fully off
 80078e6:	f7fd fd31 	bl	800534c <aci_gap_set_non_discoverable>
      Sleep_ArmWakeupAndIdle();         // arm ~10 s and let idle drop to Stop2
 80078ea:	f7fa f9bd 	bl	8001c68 <Sleep_ArmWakeupAndIdle>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80078ee:	4b54      	ldr	r3, [pc, #336]	@ (8007a40 <SVCCTL_App_Notification+0x1b4>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80078f4:	4b51      	ldr	r3, [pc, #324]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 80078f6:	8ada      	ldrh	r2, [r3, #22]
 80078f8:	4b51      	ldr	r3, [pc, #324]	@ (8007a40 <SVCCTL_App_Notification+0x1b4>)
 80078fa:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80078fc:	4850      	ldr	r0, [pc, #320]	@ (8007a40 <SVCCTL_App_Notification+0x1b4>)
 80078fe:	f000 fa87 	bl	8007e10 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007902:	e096      	b.n	8007a32 <SVCCTL_App_Notification+0x1a6>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	3302      	adds	r3, #2
 8007908:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800790a:	e092      	b.n	8007a32 <SVCCTL_App_Notification+0x1a6>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	3302      	adds	r3, #2
 8007910:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d001      	beq.n	800791e <SVCCTL_App_Notification+0x92>
 800791a:	2b03      	cmp	r3, #3
          break;
 800791c:	e021      	b.n	8007962 <SVCCTL_App_Notification+0xd6>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3301      	adds	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007924:	4b45      	ldr	r3, [pc, #276]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 8007926:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800792a:	2b04      	cmp	r3, #4
 800792c:	d104      	bne.n	8007938 <SVCCTL_App_Notification+0xac>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800792e:	4b43      	ldr	r3, [pc, #268]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 8007930:	2206      	movs	r2, #6
 8007932:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007936:	e003      	b.n	8007940 <SVCCTL_App_Notification+0xb4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007938:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 800793a:	2205      	movs	r2, #5
 800793c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007946:	b29a      	uxth	r2, r3
 8007948:	4b3c      	ldr	r3, [pc, #240]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 800794a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800794c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a40 <SVCCTL_App_Notification+0x1b4>)
 800794e:	2200      	movs	r2, #0
 8007950:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007952:	4b3a      	ldr	r3, [pc, #232]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 8007954:	8ada      	ldrh	r2, [r3, #22]
 8007956:	4b3a      	ldr	r3, [pc, #232]	@ (8007a40 <SVCCTL_App_Notification+0x1b4>)
 8007958:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800795a:	4839      	ldr	r0, [pc, #228]	@ (8007a40 <SVCCTL_App_Notification+0x1b4>)
 800795c:	f000 fa58 	bl	8007e10 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007960:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007962:	e066      	b.n	8007a32 <SVCCTL_App_Notification+0x1a6>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	3302      	adds	r3, #2
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007974:	4293      	cmp	r3, r2
 8007976:	d049      	beq.n	8007a0c <SVCCTL_App_Notification+0x180>
 8007978:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800797c:	4293      	cmp	r3, r2
 800797e:	dc57      	bgt.n	8007a30 <SVCCTL_App_Notification+0x1a4>
 8007980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007984:	d04c      	beq.n	8007a20 <SVCCTL_App_Notification+0x194>
 8007986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800798a:	dc51      	bgt.n	8007a30 <SVCCTL_App_Notification+0x1a4>
 800798c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007990:	4293      	cmp	r3, r2
 8007992:	dc4d      	bgt.n	8007a30 <SVCCTL_App_Notification+0x1a4>
 8007994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007998:	dc04      	bgt.n	80079a4 <SVCCTL_App_Notification+0x118>
 800799a:	2b04      	cmp	r3, #4
 800799c:	d042      	beq.n	8007a24 <SVCCTL_App_Notification+0x198>
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d03a      	beq.n	8007a18 <SVCCTL_App_Notification+0x18c>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80079a2:	e045      	b.n	8007a30 <SVCCTL_App_Notification+0x1a4>
      switch (p_blecore_evt->ecode)
 80079a4:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80079a8:	2b09      	cmp	r3, #9
 80079aa:	d841      	bhi.n	8007a30 <SVCCTL_App_Notification+0x1a4>
 80079ac:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <SVCCTL_App_Notification+0x128>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	08007a31 	.word	0x08007a31
 80079c0:	08007a31 	.word	0x08007a31
 80079c4:	08007a31 	.word	0x08007a31
 80079c8:	08007a31 	.word	0x08007a31
 80079cc:	08007a29 	.word	0x08007a29
 80079d0:	08007a31 	.word	0x08007a31
 80079d4:	080079f1 	.word	0x080079f1
 80079d8:	08007a29 	.word	0x08007a29
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80079dc:	4b17      	ldr	r3, [pc, #92]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 80079de:	8adb      	ldrh	r3, [r3, #22]
 80079e0:	4918      	ldr	r1, [pc, #96]	@ (8007a44 <SVCCTL_App_Notification+0x1b8>)
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fd fee8 	bl	80057b8 <aci_gap_pass_key_resp>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80079ee:	e01c      	b.n	8007a2a <SVCCTL_App_Notification+0x19e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80079f0:	4b12      	ldr	r3, [pc, #72]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 80079f2:	8adb      	ldrh	r3, [r3, #22]
 80079f4:	2101      	movs	r1, #1
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe f8f2 	bl	8005be0 <aci_gap_numeric_comparison_value_confirm_yesno>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007a02:	e012      	b.n	8007a2a <SVCCTL_App_Notification+0x19e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	3302      	adds	r3, #2
 8007a08:	623b      	str	r3, [r7, #32]
          break;
 8007a0a:	e00e      	b.n	8007a2a <SVCCTL_App_Notification+0x19e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <SVCCTL_App_Notification+0x1b0>)
 8007a0e:	8adb      	ldrh	r3, [r3, #22]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fbf8 	bl	8006206 <aci_gatt_confirm_indication>
        break;
 8007a16:	e008      	b.n	8007a2a <SVCCTL_App_Notification+0x19e>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	61fb      	str	r3, [r7, #28]
          break;
 8007a1e:	e004      	b.n	8007a2a <SVCCTL_App_Notification+0x19e>
          break;
 8007a20:	bf00      	nop
 8007a22:	e005      	b.n	8007a30 <SVCCTL_App_Notification+0x1a4>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007a24:	bf00      	nop
 8007a26:	e003      	b.n	8007a30 <SVCCTL_App_Notification+0x1a4>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007a28:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007a2a:	e001      	b.n	8007a30 <SVCCTL_App_Notification+0x1a4>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e000      	b.n	8007a32 <SVCCTL_App_Notification+0x1a6>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007a30:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007a32:	2301      	movs	r3, #1
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3730      	adds	r7, #48	@ 0x30
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	200002d8 	.word	0x200002d8
 8007a40:	2000035c 	.word	0x2000035c
 8007a44:	0001b207 	.word	0x0001b207

08007a48 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007a4e:	4b06      	ldr	r3, [pc, #24]	@ (8007a68 <Ble_Tl_Init+0x20>)
 8007a50:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007a52:	4b06      	ldr	r3, [pc, #24]	@ (8007a6c <Ble_Tl_Init+0x24>)
 8007a54:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007a56:	463b      	mov	r3, r7
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4805      	ldr	r0, [pc, #20]	@ (8007a70 <Ble_Tl_Init+0x28>)
 8007a5c:	f7ff f88e 	bl	8006b7c <hci_init>

  return;
 8007a60:	bf00      	nop
}
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	200300d8 	.word	0x200300d8
 8007a6c:	08007d75 	.word	0x08007d75
 8007a70:	08007d3d 	.word	0x08007d3d

08007a74 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a76:	b08d      	sub	sp, #52	@ 0x34
 8007a78:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007a7e:	2392      	movs	r3, #146	@ 0x92
 8007a80:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007a82:	f7fe fdaa 	bl	80065da <hci_reset>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007a8a:	f000 f8d7 	bl	8007c3c <BleGetBdAddress>
 8007a8e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	2106      	movs	r1, #6
 8007a94:	2000      	movs	r0, #0
 8007a96:	f7fe fc60 	bl	800635a <aci_hal_write_config_data>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8007bc8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007aa0:	2110      	movs	r1, #16
 8007aa2:	2018      	movs	r0, #24
 8007aa4:	f7fe fc59 	bl	800635a <aci_hal_write_config_data>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007aac:	4a47      	ldr	r2, [pc, #284]	@ (8007bcc <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007aae:	2110      	movs	r1, #16
 8007ab0:	2008      	movs	r0, #8
 8007ab2:	f7fe fc52 	bl	800635a <aci_hal_write_config_data>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007aba:	211f      	movs	r1, #31
 8007abc:	2001      	movs	r0, #1
 8007abe:	f7fe fcd1 	bl	8006464 <aci_hal_set_tx_power_level>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007ac6:	f7fe f8f2 	bl	8005cae <aci_gatt_init>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01f      	beq.n	8007b20 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007ae2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007ae4:	1dba      	adds	r2, r7, #6
 8007ae6:	7bf8      	ldrb	r0, [r7, #15]
 8007ae8:	1cbb      	adds	r3, r7, #2
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	1d3b      	adds	r3, r7, #4
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	2208      	movs	r2, #8
 8007af4:	2100      	movs	r1, #0
 8007af6:	f7fd fec6 	bl	8005886 <aci_gap_init>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007afe:	88fc      	ldrh	r4, [r7, #6]
 8007b00:	88bd      	ldrh	r5, [r7, #4]
 8007b02:	68b8      	ldr	r0, [r7, #8]
 8007b04:	f7f8 fb3a 	bl	800017c <strlen>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	4613      	mov	r3, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	4629      	mov	r1, r5
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7fe facc 	bl	80060b4 <aci_gatt_update_char_value>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007b20:	88f8      	ldrh	r0, [r7, #6]
 8007b22:	8879      	ldrh	r1, [r7, #2]
 8007b24:	463b      	mov	r3, r7
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	2302      	movs	r3, #2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f7fe fac2 	bl	80060b4 <aci_gatt_update_char_value>
 8007b30:	4603      	mov	r3, r0
 8007b32:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007b34:	2202      	movs	r2, #2
 8007b36:	2102      	movs	r1, #2
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f7fe fd72 	bl	8006622 <hci_le_set_default_phy>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007b42:	4b24      	ldr	r3, [pc, #144]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007b48:	4b22      	ldr	r3, [pc, #136]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fd1b 	bl	8005588 <aci_gap_set_io_capability>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007b56:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b5e:	2208      	movs	r2, #8
 8007b60:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007b62:	4b1c      	ldr	r3, [pc, #112]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b64:	2210      	movs	r2, #16
 8007b66:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007b68:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007b6e:	4b19      	ldr	r3, [pc, #100]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b70:	4a19      	ldr	r2, [pc, #100]	@ (8007bd8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007b72:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007b74:	4b17      	ldr	r3, [pc, #92]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007b7a:	4b16      	ldr	r3, [pc, #88]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b7c:	789c      	ldrb	r4, [r3, #2]
 8007b7e:	4b15      	ldr	r3, [pc, #84]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b80:	785d      	ldrb	r5, [r3, #1]
 8007b82:	4b14      	ldr	r3, [pc, #80]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b84:	791b      	ldrb	r3, [r3, #4]
 8007b86:	4a13      	ldr	r2, [pc, #76]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b88:	7952      	ldrb	r2, [r2, #5]
 8007b8a:	4912      	ldr	r1, [pc, #72]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b8c:	78c9      	ldrb	r1, [r1, #3]
 8007b8e:	4811      	ldr	r0, [pc, #68]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007b90:	6880      	ldr	r0, [r0, #8]
 8007b92:	2600      	movs	r6, #0
 8007b94:	9604      	str	r6, [sp, #16]
 8007b96:	9003      	str	r0, [sp, #12]
 8007b98:	9102      	str	r1, [sp, #8]
 8007b9a:	9201      	str	r2, [sp, #4]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7fd fd43 	bl	8005630 <aci_gap_set_authentication_requirement>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007bae:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007bb0:	789b      	ldrb	r3, [r3, #2]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007bb6:	f7fd ff85 	bl	8005ac4 <aci_gap_configure_filter_accept_list>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08009194 	.word	0x08009194
 8007bcc:	080091a4 	.word	0x080091a4
 8007bd0:	08008fb8 	.word	0x08008fb8
 8007bd4:	200002d8 	.word	0x200002d8
 8007bd8:	0001b207 	.word	0x0001b207

08007bdc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	@ 0x30
 8007be0:	af08      	add	r7, sp, #32
 8007be2:	4603      	mov	r3, r0
 8007be4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007be6:	2392      	movs	r3, #146	@ 0x92
 8007be8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007bea:	4a12      	ldr	r2, [pc, #72]	@ (8007c34 <Adv_Request+0x58>)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9306      	str	r3, [sp, #24]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9302      	str	r3, [sp, #8]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	22a0      	movs	r2, #160	@ 0xa0
 8007c12:	2180      	movs	r1, #128	@ 0x80
 8007c14:	2000      	movs	r0, #0
 8007c16:	f7fd fbbd 	bl	8005394 <aci_gap_set_discoverable>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007c1e:	4906      	ldr	r1, [pc, #24]	@ (8007c38 <Adv_Request+0x5c>)
 8007c20:	2019      	movs	r0, #25
 8007c22:	f7fd fedd 	bl	80059e0 <aci_gap_update_adv_data>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007c2a:	bf00      	nop
}
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	200002d8 	.word	0x200002d8
 8007c38:	2000002c 	.word	0x2000002c

08007c3c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007c42:	f7ff fd9d 	bl	8007780 <LL_FLASH_GetUDN>
 8007c46:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4e:	d023      	beq.n	8007c98 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007c50:	f7ff fdae 	bl	80077b0 <LL_FLASH_GetSTCompanyID>
 8007c54:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007c56:	f7ff fd9f 	bl	8007798 <LL_FLASH_GetDeviceID>
 8007c5a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	4b16      	ldr	r3, [pc, #88]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c62:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	0a1b      	lsrs	r3, r3, #8
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c6c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c74:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c7c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c86:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c90:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007c92:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <BleGetBdAddress+0x80>)
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e00b      	b.n	8007cb0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f7ff fc8b 	bl	80075b4 <OTP_Read>
 8007c9e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	e001      	b.n	8007cb0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007cac:	4b04      	ldr	r3, [pc, #16]	@ (8007cc0 <BleGetBdAddress+0x84>)
 8007cae:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007cb0:	697b      	ldr	r3, [r7, #20]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	200002d0 	.word	0x200002d0
 8007cc0:	0800918c 	.word	0x0800918c

08007cc4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <Adv_Cancel+0x30>)
 8007ccc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007cd0:	2b05      	cmp	r3, #5
 8007cd2:	d00a      	beq.n	8007cea <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007cd4:	2392      	movs	r3, #146	@ 0x92
 8007cd6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007cd8:	f7fd fb38 	bl	800534c <aci_gap_set_non_discoverable>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <Adv_Cancel+0x30>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
}
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200002d8 	.word	0x200002d8

08007cf8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007d00:	2100      	movs	r1, #0
 8007d02:	2002      	movs	r0, #2
 8007d04:	f000 ffcc 	bl	8008ca0 <UTIL_SEQ_SetTask>

  return;
 8007d08:	bf00      	nop
}
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007d18:	2001      	movs	r0, #1
 8007d1a:	f001 f82d 	bl	8008d78 <UTIL_SEQ_SetEvt>

  return;
 8007d1e:	bf00      	nop
}
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f001 f842 	bl	8008db8 <UTIL_SEQ_WaitEvt>

  return;
 8007d34:	bf00      	nop
}
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fdce 	bl	80068f0 <SVCCTL_UserEvtRx>
 8007d54:	4603      	mov	r3, r0
 8007d56:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007d64:	e003      	b.n	8007d6e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
  return;
 8007d6c:	bf00      	nop
}
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <BLE_StatusNot+0x16>
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d006      	beq.n	8007d96 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007d88:	e00b      	b.n	8007da2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 ffb2 	bl	8008cf8 <UTIL_SEQ_PauseTask>
      break;
 8007d94:	e005      	b.n	8007da2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007d96:	2303      	movs	r3, #3
 8007d98:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 ffcc 	bl	8008d38 <UTIL_SEQ_ResumeTask>
      break;
 8007da0:	bf00      	nop
  }

  return;
 8007da2:	bf00      	nop
}
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <Custom_STM_App_Notification>:
static void Sensor_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d81f      	bhi.n	8007dfc <Custom_STM_App_Notification+0x50>
 8007dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <Custom_STM_App_Notification+0x18>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007dd5 	.word	0x08007dd5
 8007dcc:	08007deb 	.word	0x08007deb
 8007dd0:	08007dfd 	.word	0x08007dfd
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_READ_EVT */
      break;

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 1;
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <Custom_STM_App_Notification+0x5c>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
		HW_TS_Start(TemperatureTimerId,
 8007dda:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <Custom_STM_App_Notification+0x60>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	f242 6166 	movw	r1, #9830	@ 0x2666
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7f9 fa46 	bl	8001274 <HW_TS_Start>
				MS_TO_RTC_TICKS(SENSOR_UPDATE_PERIOD_MS));
		APP_DBG_MSG("## Combined Notifications ENABLED\n");
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
      break;
 8007de8:	e009      	b.n	8007dfe <Custom_STM_App_Notification+0x52>

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8007dea:	4b07      	ldr	r3, [pc, #28]	@ (8007e08 <Custom_STM_App_Notification+0x5c>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
		HW_TS_Stop(TemperatureTimerId);
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <Custom_STM_App_Notification+0x60>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f9 f9b9 	bl	800116c <HW_TS_Stop>
		APP_DBG_MSG("## Combined Notifications DISABLED\n");

      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
      break;
 8007dfa:	e000      	b.n	8007dfe <Custom_STM_App_Notification+0x52>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007dfc:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007dfe:	bf00      	nop
}
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000360 	.word	0x20000360
 8007e0c:	20000364 	.word	0x20000364

08007e10 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <Custom_APP_Notification+0x16>
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d005      	beq.n	8007e30 <Custom_APP_Notification+0x20>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007e24:	e011      	b.n	8007e4a <Custom_APP_Notification+0x3a>
		Custom_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	885a      	ldrh	r2, [r3, #2]
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <Custom_APP_Notification+0x44>)
 8007e2c:	805a      	strh	r2, [r3, #2]
      break;
 8007e2e:	e00c      	b.n	8007e4a <Custom_APP_Notification+0x3a>
		if (Custom_App_Context.Temperature_pressure_Notification_Status == 1) {
 8007e30:	4b08      	ldr	r3, [pc, #32]	@ (8007e54 <Custom_APP_Notification+0x44>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d104      	bne.n	8007e42 <Custom_APP_Notification+0x32>
			HW_TS_Stop(TemperatureTimerId);
 8007e38:	4b07      	ldr	r3, [pc, #28]	@ (8007e58 <Custom_APP_Notification+0x48>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7f9 f995 	bl	800116c <HW_TS_Stop>
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8007e42:	4b04      	ldr	r3, [pc, #16]	@ (8007e54 <Custom_APP_Notification+0x44>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
      break;
 8007e48:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007e4a:	bf00      	nop
}
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000360 	.word	0x20000360
 8007e58:	20000364 	.word	0x20000364

08007e5c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//Sensor_ReadCoefficients();
	HW_TS_Create(0, &TemperatureTimerId, hw_ts_Repeated, Sensor_Timer_Callback);
 8007e60:	4b03      	ldr	r3, [pc, #12]	@ (8007e70 <Custom_APP_Init+0x14>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	4903      	ldr	r1, [pc, #12]	@ (8007e74 <Custom_APP_Init+0x18>)
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7f9 f906 	bl	8001078 <HW_TS_Create>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007e6c:	bf00      	nop
}
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	0800806d 	.word	0x0800806d
 8007e74:	20000364 	.word	0x20000364

08007e78 <Sensor_ReadTempPressure>:

  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Sensor_ReadTempPressure(void) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
	/* 1) Send START CONVERSION (temp+pressure) */
	TX_BUFFER[0] = start_conversion_cmd;
 8007e7c:	224c      	movs	r2, #76	@ 0x4c
 8007e7e:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <Sensor_ReadTempPressure+0x1a0>)
 8007e80:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2110      	movs	r1, #16
 8007e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e8a:	f7fa fe53 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e92:	2201      	movs	r2, #1
 8007e94:	4960      	ldr	r1, [pc, #384]	@ (8008018 <Sensor_ReadTempPressure+0x1a0>)
 8007e96:	4861      	ldr	r0, [pc, #388]	@ (800801c <Sensor_ReadTempPressure+0x1a4>)
 8007e98:	f7fc fbcf 	bl	800463a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2110      	movs	r1, #16
 8007ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007ea4:	f7fa fe46 	bl	8002b34 <HAL_GPIO_WritePin>

	/* 2) Wait ~300 ms for conversion to complete */

	/* 3) Send READ ADC command, read 6 bytes total */
	TX_BUFFER[0] = read_adc_cmd;
 8007ea8:	225c      	movs	r2, #92	@ 0x5c
 8007eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8008018 <Sensor_ReadTempPressure+0x1a0>)
 8007eac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2110      	movs	r1, #16
 8007eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007eb6:	f7fa fe3d 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4955      	ldr	r1, [pc, #340]	@ (8008018 <Sensor_ReadTempPressure+0x1a0>)
 8007ec2:	4856      	ldr	r0, [pc, #344]	@ (800801c <Sensor_ReadTempPressure+0x1a4>)
 8007ec4:	f7fc fbb9 	bl	800463a <HAL_SPI_Transmit>
	// We expect: RX_BUFFER[0..2] = raw_temp (MSB, mid, LSB)
	//            RX_BUFFER[3..5] = raw_pressure
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, HAL_MAX_DELAY);
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ecc:	2206      	movs	r2, #6
 8007ece:	4954      	ldr	r1, [pc, #336]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007ed0:	4852      	ldr	r0, [pc, #328]	@ (800801c <Sensor_ReadTempPressure+0x1a4>)
 8007ed2:	f7fc fd28 	bl	8004926 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	2110      	movs	r1, #16
 8007eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007ede:	f7fa fe29 	bl	8002b34 <HAL_GPIO_WritePin>

	/* 4) Merge bytes: raw_temp = 24‐bit, raw_pressure = 24‐bit */
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 8007ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	041a      	lsls	r2, r3, #16
 8007ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	4313      	orrs	r3, r2
			| (uint32_t) RX_BUFFER[2];
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007ef2:	7892      	ldrb	r2, [r2, #2]
 8007ef4:	4313      	orrs	r3, r2
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 8007ef6:	4a4b      	ldr	r2, [pc, #300]	@ (8008024 <Sensor_ReadTempPressure+0x1ac>)
 8007ef8:	6013      	str	r3, [r2, #0]
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 8007efa:	4b49      	ldr	r3, [pc, #292]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007efc:	78db      	ldrb	r3, [r3, #3]
 8007efe:	041a      	lsls	r2, r3, #16
			| ((uint32_t) RX_BUFFER[4] << 8) | (uint32_t) RX_BUFFER[5];
 8007f00:	4b47      	ldr	r3, [pc, #284]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007f02:	791b      	ldrb	r3, [r3, #4]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	4313      	orrs	r3, r2
 8007f08:	4a45      	ldr	r2, [pc, #276]	@ (8008020 <Sensor_ReadTempPressure+0x1a8>)
 8007f0a:	7952      	ldrb	r2, [r2, #5]
 8007f0c:	4313      	orrs	r3, r2
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 8007f0e:	4a46      	ldr	r2, [pc, #280]	@ (8008028 <Sensor_ReadTempPressure+0x1b0>)
 8007f10:	6013      	str	r3, [r2, #0]

	/* 5) Compute “temperature” per your formula (as float) */
	// temperature = C1 * raw_temp / 2^29 – C3 * raw_pressure / 2^35 – C2/64
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 8007f12:	4b46      	ldr	r3, [pc, #280]	@ (800802c <Sensor_ReadTempPressure+0x1b4>)
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f1e:	4b41      	ldr	r3, [pc, #260]	@ (8008024 <Sensor_ReadTempPressure+0x1ac>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8008030 <Sensor_ReadTempPressure+0x1b8>
 8007f32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / 34359738368.0f)
 8007f36:	4b3f      	ldr	r3, [pc, #252]	@ (8008034 <Sensor_ReadTempPressure+0x1bc>)
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	4b39      	ldr	r3, [pc, #228]	@ (8008028 <Sensor_ReadTempPressure+0x1b0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f52:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8008038 <Sensor_ReadTempPressure+0x1c0>
 8007f56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / 64.0f);
 8007f5e:	4b37      	ldr	r3, [pc, #220]	@ (800803c <Sensor_ReadTempPressure+0x1c4>)
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8008040 <Sensor_ReadTempPressure+0x1c8>
 8007f6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007f72:	ee77 7a67 	vsub.f32	s15, s14, s15
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 8007f76:	4b33      	ldr	r3, [pc, #204]	@ (8008044 <Sensor_ReadTempPressure+0x1cc>)
 8007f78:	edc3 7a00 	vstr	s15, [r3]

	/* 6) Compute offset & sensitivity */
	offset = (float) C6 + ((float) C7 * temperature / 512.0f);
 8007f7c:	4b32      	ldr	r3, [pc, #200]	@ (8008048 <Sensor_ReadTempPressure+0x1d0>)
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f88:	4b30      	ldr	r3, [pc, #192]	@ (800804c <Sensor_ReadTempPressure+0x1d4>)
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f94:	4b2b      	ldr	r3, [pc, #172]	@ (8008044 <Sensor_ReadTempPressure+0x1cc>)
 8007f96:	edd3 7a00 	vldr	s15, [r3]
 8007f9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007f9e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8008050 <Sensor_ReadTempPressure+0x1d8>
 8007fa2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007faa:	4b2a      	ldr	r3, [pc, #168]	@ (8008054 <Sensor_ReadTempPressure+0x1dc>)
 8007fac:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + ((float) C9 * temperature / 512.0f);
 8007fb0:	4b29      	ldr	r3, [pc, #164]	@ (8008058 <Sensor_ReadTempPressure+0x1e0>)
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007fbc:	4b27      	ldr	r3, [pc, #156]	@ (800805c <Sensor_ReadTempPressure+0x1e4>)
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008044 <Sensor_ReadTempPressure+0x1cc>)
 8007fca:	edd3 7a00 	vldr	s15, [r3]
 8007fce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007fd2:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8008050 <Sensor_ReadTempPressure+0x1d8>
 8007fd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fde:	4b20      	ldr	r3, [pc, #128]	@ (8008060 <Sensor_ReadTempPressure+0x1e8>)
 8007fe0:	edc3 7a00 	vstr	s15, [r3]

	/* 7) Finally, compute pressure: */
	// pressure = raw_pressure * sensitivity / 2^22 – offset
	pressure = ((float) raw_pressure * sensitivity / 4194304.0f) - offset;
 8007fe4:	4b10      	ldr	r3, [pc, #64]	@ (8008028 <Sensor_ReadTempPressure+0x1b0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8008060 <Sensor_ReadTempPressure+0x1e8>)
 8007ff2:	edd3 7a00 	vldr	s15, [r3]
 8007ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffa:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8008064 <Sensor_ReadTempPressure+0x1ec>
 8007ffe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008002:	4b14      	ldr	r3, [pc, #80]	@ (8008054 <Sensor_ReadTempPressure+0x1dc>)
 8008004:	edd3 7a00 	vldr	s15, [r3]
 8008008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800800c:	4b16      	ldr	r3, [pc, #88]	@ (8008068 <Sensor_ReadTempPressure+0x1f0>)
 800800e:	edc3 7a00 	vstr	s15, [r3]
}
 8008012:	bf00      	nop
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000248 	.word	0x20000248
 800801c:	200001b8 	.word	0x200001b8
 8008020:	2000024c 	.word	0x2000024c
 8008024:	20000234 	.word	0x20000234
 8008028:	20000230 	.word	0x20000230
 800802c:	2000021c 	.word	0x2000021c
 8008030:	4e000000 	.word	0x4e000000
 8008034:	20000220 	.word	0x20000220
 8008038:	51000000 	.word	0x51000000
 800803c:	2000021e 	.word	0x2000021e
 8008040:	42800000 	.word	0x42800000
 8008044:	20000238 	.word	0x20000238
 8008048:	20000226 	.word	0x20000226
 800804c:	20000228 	.word	0x20000228
 8008050:	44000000 	.word	0x44000000
 8008054:	2000023c 	.word	0x2000023c
 8008058:	2000022a 	.word	0x2000022a
 800805c:	2000022c 	.word	0x2000022c
 8008060:	20000240 	.word	0x20000240
 8008064:	4a800000 	.word	0x4a800000
 8008068:	20000244 	.word	0x20000244

0800806c <Sensor_Timer_Callback>:

static void Sensor_Timer_Callback(void) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
	// Only do something if a client is subscribed for notifications
	if (Custom_App_Context.Temperature_pressure_Notification_Status) {
 8008072:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <Sensor_Timer_Callback+0x44>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d016      	beq.n	80080a8 <Sensor_Timer_Callback+0x3c>
		uint8_t sensor_payload[8];

		// 1. Read the sensor to get the latest temperature and pressure
		Sensor_ReadTempPressure();
 800807a:	f7ff fefd 	bl	8007e78 <Sensor_ReadTempPressure>

		// 2. Pack both float values into the 8-byte array
		memcpy(&sensor_payload[0], &temperature, sizeof(float)); // First 4 bytes
 800807e:	4b0d      	ldr	r3, [pc, #52]	@ (80080b4 <Sensor_Timer_Callback+0x48>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	603b      	str	r3, [r7, #0]
		memcpy(&sensor_payload[4], &pressure, sizeof(float));    // Next 4 bytes
 8008084:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <Sensor_Timer_Callback+0x4c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	607b      	str	r3, [r7, #4]

		APP_DBG_MSG("Sending Combined Temp/Pres Notification...\n");

		// 3. Send the single 8-byte notification
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMPERATURE_PRESSURE,
 800808a:	463b      	mov	r3, r7
 800808c:	4619      	mov	r1, r3
 800808e:	2000      	movs	r0, #0
 8008090:	f000 f956 	bl	8008340 <Custom_STM_App_Update_Char>
				sensor_payload);

		// 1) Terminate the link (replace with your connection handle variable)
		aci_gap_terminate(Custom_App_Context.ConnectionHandle, 0x13); // User terminated
 8008094:	4b06      	ldr	r3, [pc, #24]	@ (80080b0 <Sensor_Timer_Callback+0x44>)
 8008096:	885b      	ldrh	r3, [r3, #2]
 8008098:	2113      	movs	r1, #19
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd fd36 	bl	8005b0c <aci_gap_terminate>

		// 2) Make sure we’re not advertising while we sleep
		aci_gap_set_non_discoverable();
 80080a0:	f7fd f954 	bl	800534c <aci_gap_set_non_discoverable>

		// 3) Arm the RTC wake and fall back to sequencer idle
		Sleep_ArmWakeupAndIdle();
 80080a4:	f7f9 fde0 	bl	8001c68 <Sleep_ArmWakeupAndIdle>

	}
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000360 	.word	0x20000360
 80080b4:	20000238 	.word	0x20000238
 80080b8:	20000244 	.word	0x20000244

080080bc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b092      	sub	sp, #72	@ 0x48
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80080c4:	2300      	movs	r3, #0
 80080c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3301      	adds	r3, #1
 80080ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch (event_pckt->evt)
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2bff      	cmp	r3, #255	@ 0xff
 80080d6:	f040 80ad 	bne.w	8008234 <Custom_STM_Event_Handler+0x178>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	3302      	adds	r3, #2
 80080de:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (blecore_evt->ecode)
 80080e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80080ea:	2b1a      	cmp	r3, #26
 80080ec:	f200 809c 	bhi.w	8008228 <Custom_STM_Event_Handler+0x16c>
 80080f0:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <Custom_STM_Event_Handler+0x3c>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008165 	.word	0x08008165
 80080fc:	08008229 	.word	0x08008229
 8008100:	08008229 	.word	0x08008229
 8008104:	08008229 	.word	0x08008229
 8008108:	08008229 	.word	0x08008229
 800810c:	08008229 	.word	0x08008229
 8008110:	08008229 	.word	0x08008229
 8008114:	08008229 	.word	0x08008229
 8008118:	08008229 	.word	0x08008229
 800811c:	08008229 	.word	0x08008229
 8008120:	08008229 	.word	0x08008229
 8008124:	08008229 	.word	0x08008229
 8008128:	08008229 	.word	0x08008229
 800812c:	08008229 	.word	0x08008229
 8008130:	08008229 	.word	0x08008229
 8008134:	08008229 	.word	0x08008229
 8008138:	08008229 	.word	0x08008229
 800813c:	08008229 	.word	0x08008229
 8008140:	08008229 	.word	0x08008229
 8008144:	080081b3 	.word	0x080081b3
 8008148:	08008229 	.word	0x08008229
 800814c:	08008229 	.word	0x08008229
 8008150:	08008229 	.word	0x08008229
 8008154:	08008229 	.word	0x08008229
 8008158:	08008229 	.word	0x08008229
 800815c:	08008229 	.word	0x08008229
 8008160:	0800820b 	.word	0x0800820b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	3302      	adds	r3, #2
 8008168:	62bb      	str	r3, [r7, #40]	@ 0x28
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	b29b      	uxth	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	4b34      	ldr	r3, [pc, #208]	@ (8008244 <Custom_STM_Event_Handler+0x188>)
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	3302      	adds	r3, #2
 8008178:	429a      	cmp	r2, r3
 800817a:	d157      	bne.n	800822c <Custom_STM_Event_Handler+0x170>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	7a1b      	ldrb	r3, [r3, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <Custom_STM_Event_Handler+0xd4>
 800818a:	2b01      	cmp	r3, #1
 800818c:	d008      	beq.n	80081a0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 800818e:	e00f      	b.n	80081b0 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT;
 8008190:	2302      	movs	r3, #2
 8008192:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 8008194:	f107 0314 	add.w	r3, r7, #20
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fe07 	bl	8007dac <Custom_STM_App_Notification>
                break;
 800819e:	e007      	b.n	80081b0 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT;
 80081a0:	2301      	movs	r3, #1
 80081a2:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 80081a4:	f107 0314 	add.w	r3, r7, #20
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fdff 	bl	8007dac <Custom_STM_App_Notification>
                break;
 80081ae:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80081b0:	e03c      	b.n	800822c <Custom_STM_Event_Handler+0x170>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80081b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b4:	3302      	adds	r3, #2
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	4b20      	ldr	r3, [pc, #128]	@ (8008244 <Custom_STM_Event_Handler+0x188>)
 80081c2:	885b      	ldrh	r3, [r3, #2]
 80081c4:	3301      	adds	r3, #1
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d132      	bne.n	8008230 <Custom_STM_Event_Handler+0x174>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
				uint8_t sensor_payload[8];
				Sensor_ReadTempPressure();
 80081d0:	f7ff fe52 	bl	8007e78 <Sensor_ReadTempPressure>
				memcpy(&sensor_payload[0], &temperature, sizeof(float));
 80081d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008248 <Custom_STM_Event_Handler+0x18c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]
				memcpy(&sensor_payload[4], &pressure, sizeof(float));
 80081da:	4b1c      	ldr	r3, [pc, #112]	@ (800824c <Custom_STM_Event_Handler+0x190>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	613b      	str	r3, [r7, #16]

				aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 80081e0:	4b18      	ldr	r3, [pc, #96]	@ (8008244 <Custom_STM_Event_Handler+0x188>)
 80081e2:	8818      	ldrh	r0, [r3, #0]
 80081e4:	4b17      	ldr	r3, [pc, #92]	@ (8008244 <Custom_STM_Event_Handler+0x188>)
 80081e6:	8859      	ldrh	r1, [r3, #2]
 80081e8:	4b19      	ldr	r3, [pc, #100]	@ (8008250 <Custom_STM_Event_Handler+0x194>)
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	f107 030c 	add.w	r3, r7, #12
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	f7fd ff5c 	bl	80060b4 <aci_gatt_update_char_value>
						CustomContext.CustomTemperature_PressureHdle, 0,
						SizeTemperature_Pressure, // Use the 8-byte size
						sensor_payload);
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe f854 	bl	80062b0 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8008208:	e012      	b.n	8008230 <Custom_STM_Event_Handler+0x174>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800820a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820c:	3302      	adds	r3, #2
 800820e:	633b      	str	r3, [r7, #48]	@ 0x30
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8008210:	2303      	movs	r3, #3
 8008212:	753b      	strb	r3, [r7, #20]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	84bb      	strh	r3, [r7, #36]	@ 0x24
          Custom_STM_App_Notification(&Notification);
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fdc3 	bl	8007dac <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8008226:	e004      	b.n	8008232 <Custom_STM_Event_Handler+0x176>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008228:	bf00      	nop
 800822a:	e004      	b.n	8008236 <Custom_STM_Event_Handler+0x17a>
          break;
 800822c:	bf00      	nop
 800822e:	e002      	b.n	8008236 <Custom_STM_Event_Handler+0x17a>
          break;
 8008230:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008232:	e000      	b.n	8008236 <Custom_STM_Event_Handler+0x17a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008234:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008236:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}/* end Custom_STM_Event_Handler */
 800823a:	4618      	mov	r0, r3
 800823c:	3740      	adds	r7, #64	@ 0x40
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000368 	.word	0x20000368
 8008248:	20000238 	.word	0x20000238
 800824c:	20000244 	.word	0x20000244
 8008250:	20000046 	.word	0x20000046

08008254 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08c      	sub	sp, #48	@ 0x30
 8008258:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800825a:	2392      	movs	r3, #146	@ 0x92
 800825c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800825e:	4834      	ldr	r0, [pc, #208]	@ (8008330 <SVCCTL_InitCustomSvc+0xdc>)
 8008260:	f7fe fb2c 	bl	80068bc <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8008264:	2304      	movs	r3, #4
 8008266:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_SENSOR_UUID(uuid.Char_UUID_128);
 8008268:	238f      	movs	r3, #143	@ 0x8f
 800826a:	713b      	strb	r3, [r7, #4]
 800826c:	23e5      	movs	r3, #229	@ 0xe5
 800826e:	717b      	strb	r3, [r7, #5]
 8008270:	23b3      	movs	r3, #179	@ 0xb3
 8008272:	71bb      	strb	r3, [r7, #6]
 8008274:	23d5      	movs	r3, #213	@ 0xd5
 8008276:	71fb      	strb	r3, [r7, #7]
 8008278:	232e      	movs	r3, #46	@ 0x2e
 800827a:	723b      	strb	r3, [r7, #8]
 800827c:	237f      	movs	r3, #127	@ 0x7f
 800827e:	727b      	strb	r3, [r7, #9]
 8008280:	234a      	movs	r3, #74	@ 0x4a
 8008282:	72bb      	strb	r3, [r7, #10]
 8008284:	2398      	movs	r3, #152	@ 0x98
 8008286:	72fb      	strb	r3, [r7, #11]
 8008288:	232a      	movs	r3, #42	@ 0x2a
 800828a:	733b      	strb	r3, [r7, #12]
 800828c:	2348      	movs	r3, #72	@ 0x48
 800828e:	737b      	strb	r3, [r7, #13]
 8008290:	237a      	movs	r3, #122	@ 0x7a
 8008292:	73bb      	strb	r3, [r7, #14]
 8008294:	23cc      	movs	r3, #204	@ 0xcc
 8008296:	73fb      	strb	r3, [r7, #15]
 8008298:	2325      	movs	r3, #37	@ 0x25
 800829a:	743b      	strb	r3, [r7, #16]
 800829c:	2323      	movs	r3, #35	@ 0x23
 800829e:	747b      	strb	r3, [r7, #17]
 80082a0:	2300      	movs	r3, #0
 80082a2:	74bb      	strb	r3, [r7, #18]
 80082a4:	2300      	movs	r3, #0
 80082a6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80082a8:	7dbb      	ldrb	r3, [r7, #22]
 80082aa:	1d39      	adds	r1, r7, #4
 80082ac:	4a21      	ldr	r2, [pc, #132]	@ (8008334 <SVCCTL_InitCustomSvc+0xe0>)
 80082ae:	9200      	str	r2, [sp, #0]
 80082b0:	2201      	movs	r2, #1
 80082b2:	2002      	movs	r0, #2
 80082b4:	f7fd fd20 	bl	8005cf8 <aci_gatt_add_service>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Temperature_Pressure
   */
  COPY_TEMPERATURE_PRESSURE_UUID(uuid.Char_UUID_128);
 80082bc:	2319      	movs	r3, #25
 80082be:	713b      	strb	r3, [r7, #4]
 80082c0:	23ed      	movs	r3, #237	@ 0xed
 80082c2:	717b      	strb	r3, [r7, #5]
 80082c4:	2382      	movs	r3, #130	@ 0x82
 80082c6:	71bb      	strb	r3, [r7, #6]
 80082c8:	23ae      	movs	r3, #174	@ 0xae
 80082ca:	71fb      	strb	r3, [r7, #7]
 80082cc:	23ed      	movs	r3, #237	@ 0xed
 80082ce:	723b      	strb	r3, [r7, #8]
 80082d0:	2321      	movs	r3, #33	@ 0x21
 80082d2:	727b      	strb	r3, [r7, #9]
 80082d4:	234c      	movs	r3, #76	@ 0x4c
 80082d6:	72bb      	strb	r3, [r7, #10]
 80082d8:	239d      	movs	r3, #157	@ 0x9d
 80082da:	72fb      	strb	r3, [r7, #11]
 80082dc:	2341      	movs	r3, #65	@ 0x41
 80082de:	733b      	strb	r3, [r7, #12]
 80082e0:	2345      	movs	r3, #69	@ 0x45
 80082e2:	737b      	strb	r3, [r7, #13]
 80082e4:	2322      	movs	r3, #34	@ 0x22
 80082e6:	73bb      	strb	r3, [r7, #14]
 80082e8:	238e      	movs	r3, #142	@ 0x8e
 80082ea:	73fb      	strb	r3, [r7, #15]
 80082ec:	2322      	movs	r3, #34	@ 0x22
 80082ee:	743b      	strb	r3, [r7, #16]
 80082f0:	2323      	movs	r3, #35	@ 0x23
 80082f2:	747b      	strb	r3, [r7, #17]
 80082f4:	2300      	movs	r3, #0
 80082f6:	74bb      	strb	r3, [r7, #18]
 80082f8:	2300      	movs	r3, #0
 80082fa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSensorHdle,
 80082fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <SVCCTL_InitCustomSvc+0xe0>)
 80082fe:	8818      	ldrh	r0, [r3, #0]
 8008300:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <SVCCTL_InitCustomSvc+0xe4>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	1d3a      	adds	r2, r7, #4
 8008306:	490d      	ldr	r1, [pc, #52]	@ (800833c <SVCCTL_InitCustomSvc+0xe8>)
 8008308:	9105      	str	r1, [sp, #20]
 800830a:	2101      	movs	r1, #1
 800830c:	9104      	str	r1, [sp, #16]
 800830e:	2110      	movs	r1, #16
 8008310:	9103      	str	r1, [sp, #12]
 8008312:	2104      	movs	r1, #4
 8008314:	9102      	str	r1, [sp, #8]
 8008316:	2100      	movs	r1, #0
 8008318:	9101      	str	r1, [sp, #4]
 800831a:	2112      	movs	r1, #18
 800831c:	9100      	str	r1, [sp, #0]
 800831e:	2102      	movs	r1, #2
 8008320:	f7fd fdc0 	bl	8005ea4 <aci_gatt_add_char>
 8008324:	4603      	mov	r3, r0
 8008326:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008328:	bf00      	nop
}
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	080080bd 	.word	0x080080bd
 8008334:	20000368 	.word	0x20000368
 8008338:	20000046 	.word	0x20000046
 800833c:	2000036a 	.word	0x2000036a

08008340 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af02      	add	r7, sp, #8
 8008346:	4603      	mov	r3, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800834c:	2392      	movs	r3, #146	@ 0x92
 800834e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10f      	bne.n	8008376 <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_TEMPERATURE_PRESSURE:
      ret = aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 8008356:	4b0b      	ldr	r3, [pc, #44]	@ (8008384 <Custom_STM_App_Update_Char+0x44>)
 8008358:	8818      	ldrh	r0, [r3, #0]
 800835a:	4b0a      	ldr	r3, [pc, #40]	@ (8008384 <Custom_STM_App_Update_Char+0x44>)
 800835c:	8859      	ldrh	r1, [r3, #2]
 800835e:	4b0a      	ldr	r3, [pc, #40]	@ (8008388 <Custom_STM_App_Update_Char+0x48>)
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	2200      	movs	r2, #0
 800836c:	f7fd fea2 	bl	80060b4 <aci_gatt_update_char_value>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMPERATURE_PRESSURE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8008374:	e000      	b.n	8008378 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 8008376:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000368 	.word	0x20000368
 8008388:	20000046 	.word	0x20000046

0800838c <LL_PWR_EnableBootC2>:
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008390:	4b05      	ldr	r3, [pc, #20]	@ (80083a8 <LL_PWR_EnableBootC2+0x1c>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	4a04      	ldr	r2, [pc, #16]	@ (80083a8 <LL_PWR_EnableBootC2+0x1c>)
 8008396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800839a:	60d3      	str	r3, [r2, #12]
}
 800839c:	bf00      	nop
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	58000400 	.word	0x58000400

080083ac <LL_C2_EXTI_EnableEvent_32_63>:
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80083b4:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80083b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80083ba:	4905      	ldr	r1, [pc, #20]	@ (80083d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	58000800 	.word	0x58000800

080083d4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80083dc:	4b05      	ldr	r3, [pc, #20]	@ (80083f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	4904      	ldr	r1, [pc, #16]	@ (80083f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	620b      	str	r3, [r1, #32]
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	58000800 	.word	0x58000800

080083f8 <LL_AHB3_GRP1_EnableClock>:
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4313      	orrs	r3, r2
 800840e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008414:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008436:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800843a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800844a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4013      	ands	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f043 0201 	orr.w	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	43db      	mvns	r3, r3
 80084b6:	401a      	ands	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	605a      	str	r2, [r3, #4]
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	43db      	mvns	r3, r3
 80084fe:	401a      	ands	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	609a      	str	r2, [r3, #8]
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	041a      	lsls	r2, r3, #16
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	609a      	str	r2, [r3, #8]
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	4013      	ands	r3, r2
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d101      	bne.n	8008566 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	69da      	ldr	r2, [r3, #28]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	4013      	ands	r3, r2
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	d101      	bne.n	8008590 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80085a4:	2102      	movs	r1, #2
 80085a6:	4818      	ldr	r0, [pc, #96]	@ (8008608 <HW_IPCC_Rx_Handler+0x68>)
 80085a8:	f7ff ffe4 	bl	8008574 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d008      	beq.n	80085c4 <HW_IPCC_Rx_Handler+0x24>
 80085b2:	4b15      	ldr	r3, [pc, #84]	@ (8008608 <HW_IPCC_Rx_Handler+0x68>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80085be:	f000 f925 	bl	800880c <HW_IPCC_SYS_EvtHandler>
 80085c2:	e01e      	b.n	8008602 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80085c4:	2101      	movs	r1, #1
 80085c6:	4810      	ldr	r0, [pc, #64]	@ (8008608 <HW_IPCC_Rx_Handler+0x68>)
 80085c8:	f7ff ffd4 	bl	8008574 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d008      	beq.n	80085e4 <HW_IPCC_Rx_Handler+0x44>
 80085d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008608 <HW_IPCC_Rx_Handler+0x68>)
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80085de:	f000 f899 	bl	8008714 <HW_IPCC_BLE_EvtHandler>
 80085e2:	e00e      	b.n	8008602 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80085e4:	2108      	movs	r1, #8
 80085e6:	4808      	ldr	r0, [pc, #32]	@ (8008608 <HW_IPCC_Rx_Handler+0x68>)
 80085e8:	f7ff ffc4 	bl	8008574 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d008      	beq.n	8008604 <HW_IPCC_Rx_Handler+0x64>
 80085f2:	4b05      	ldr	r3, [pc, #20]	@ (8008608 <HW_IPCC_Rx_Handler+0x68>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d102      	bne.n	8008604 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80085fe:	f000 f97d 	bl	80088fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008602:	bf00      	nop
 8008604:	bf00      	nop
}
 8008606:	bd80      	pop	{r7, pc}
 8008608:	58000c00 	.word	0x58000c00

0800860c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008610:	2102      	movs	r1, #2
 8008612:	4818      	ldr	r0, [pc, #96]	@ (8008674 <HW_IPCC_Tx_Handler+0x68>)
 8008614:	f7ff ff99 	bl	800854a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d108      	bne.n	8008630 <HW_IPCC_Tx_Handler+0x24>
 800861e:	4b15      	ldr	r3, [pc, #84]	@ (8008674 <HW_IPCC_Tx_Handler+0x68>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800862a:	f000 f8d3 	bl	80087d4 <HW_IPCC_SYS_CmdEvtHandler>
 800862e:	e01e      	b.n	800866e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008630:	2108      	movs	r1, #8
 8008632:	4810      	ldr	r0, [pc, #64]	@ (8008674 <HW_IPCC_Tx_Handler+0x68>)
 8008634:	f7ff ff89 	bl	800854a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d108      	bne.n	8008650 <HW_IPCC_Tx_Handler+0x44>
 800863e:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <HW_IPCC_Tx_Handler+0x68>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800864a:	f000 f919 	bl	8008880 <HW_IPCC_MM_FreeBufHandler>
 800864e:	e00e      	b.n	800866e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008650:	2120      	movs	r1, #32
 8008652:	4808      	ldr	r0, [pc, #32]	@ (8008674 <HW_IPCC_Tx_Handler+0x68>)
 8008654:	f7ff ff79 	bl	800854a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d108      	bne.n	8008670 <HW_IPCC_Tx_Handler+0x64>
 800865e:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <HW_IPCC_Tx_Handler+0x68>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800866a:	f000 f85f 	bl	800872c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800866e:	bf00      	nop
 8008670:	bf00      	nop
}
 8008672:	bd80      	pop	{r7, pc}
 8008674:	58000c00 	.word	0x58000c00

08008678 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800867c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008680:	f7ff fed3 	bl	800842a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008684:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008688:	f7ff fea4 	bl	80083d4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800868c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008690:	f7ff fe8c 	bl	80083ac <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008694:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008696:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008698:	f7ff fe78 	bl	800838c <LL_PWR_EnableBootC2>

  return;
 800869c:	bf00      	nop
}
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80086a4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80086a8:	f7ff fea6 	bl	80083f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80086ac:	4806      	ldr	r0, [pc, #24]	@ (80086c8 <HW_IPCC_Init+0x28>)
 80086ae:	f7ff fee8 	bl	8008482 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80086b2:	4805      	ldr	r0, [pc, #20]	@ (80086c8 <HW_IPCC_Init+0x28>)
 80086b4:	f7ff fed5 	bl	8008462 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80086b8:	202c      	movs	r0, #44	@ 0x2c
 80086ba:	f7fa f88e 	bl	80027da <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80086be:	202d      	movs	r0, #45	@ 0x2d
 80086c0:	f7fa f88b 	bl	80027da <HAL_NVIC_EnableIRQ>

  return;
 80086c4:	bf00      	nop
}
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	58000c00 	.word	0x58000c00

080086cc <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d2:	f3ef 8310 	mrs	r3, PRIMASK
 80086d6:	607b      	str	r3, [r7, #4]
  return(result);
 80086d8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80086da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80086dc:	b672      	cpsid	i
}
 80086de:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80086e0:	2101      	movs	r1, #1
 80086e2:	4806      	ldr	r0, [pc, #24]	@ (80086fc <HW_IPCC_BLE_Init+0x30>)
 80086e4:	f7ff ff02 	bl	80084ec <LL_C1_IPCC_EnableReceiveChannel>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f383 8810 	msr	PRIMASK, r3
}
 80086f2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80086f4:	bf00      	nop
}
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	58000c00 	.word	0x58000c00

08008700 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8008704:	2101      	movs	r1, #1
 8008706:	4802      	ldr	r0, [pc, #8]	@ (8008710 <HW_IPCC_BLE_SendCmd+0x10>)
 8008708:	f7ff ff10 	bl	800852c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800870c:	bf00      	nop
}
 800870e:	bd80      	pop	{r7, pc}
 8008710:	58000c00 	.word	0x58000c00

08008714 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008718:	f7fe fd94 	bl	8007244 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800871c:	2101      	movs	r1, #1
 800871e:	4802      	ldr	r0, [pc, #8]	@ (8008728 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008720:	f7ff fef6 	bl	8008510 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008724:	bf00      	nop
}
 8008726:	bd80      	pop	{r7, pc}
 8008728:	58000c00 	.word	0x58000c00

0800872c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008732:	f3ef 8310 	mrs	r3, PRIMASK
 8008736:	607b      	str	r3, [r7, #4]
  return(result);
 8008738:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800873a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800873c:	b672      	cpsid	i
}
 800873e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008740:	2120      	movs	r1, #32
 8008742:	4807      	ldr	r0, [pc, #28]	@ (8008760 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8008744:	f7ff fec0 	bl	80084c8 <LL_C1_IPCC_DisableTransmitChannel>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f383 8810 	msr	PRIMASK, r3
}
 8008752:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8008754:	f7fe fda6 	bl	80072a4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008758:	bf00      	nop
}
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	58000c00 	.word	0x58000c00

08008764 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800876a:	f3ef 8310 	mrs	r3, PRIMASK
 800876e:	607b      	str	r3, [r7, #4]
  return(result);
 8008770:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008772:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008774:	b672      	cpsid	i
}
 8008776:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008778:	2102      	movs	r1, #2
 800877a:	4806      	ldr	r0, [pc, #24]	@ (8008794 <HW_IPCC_SYS_Init+0x30>)
 800877c:	f7ff feb6 	bl	80084ec <LL_C1_IPCC_EnableReceiveChannel>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f383 8810 	msr	PRIMASK, r3
}
 800878a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800878c:	bf00      	nop
}
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	58000c00 	.word	0x58000c00

08008798 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800879e:	2102      	movs	r1, #2
 80087a0:	480b      	ldr	r0, [pc, #44]	@ (80087d0 <HW_IPCC_SYS_SendCmd+0x38>)
 80087a2:	f7ff fec3 	bl	800852c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a6:	f3ef 8310 	mrs	r3, PRIMASK
 80087aa:	607b      	str	r3, [r7, #4]
  return(result);
 80087ac:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80087ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80087b0:	b672      	cpsid	i
}
 80087b2:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80087b4:	2102      	movs	r1, #2
 80087b6:	4806      	ldr	r0, [pc, #24]	@ (80087d0 <HW_IPCC_SYS_SendCmd+0x38>)
 80087b8:	f7ff fe73 	bl	80084a2 <LL_C1_IPCC_EnableTransmitChannel>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f383 8810 	msr	PRIMASK, r3
}
 80087c6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80087c8:	bf00      	nop
}
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	58000c00 	.word	0x58000c00

080087d4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087da:	f3ef 8310 	mrs	r3, PRIMASK
 80087de:	607b      	str	r3, [r7, #4]
  return(result);
 80087e0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80087e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80087e4:	b672      	cpsid	i
}
 80087e6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80087e8:	2102      	movs	r1, #2
 80087ea:	4807      	ldr	r0, [pc, #28]	@ (8008808 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 80087ec:	f7ff fe6c 	bl	80084c8 <LL_C1_IPCC_DisableTransmitChannel>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f383 8810 	msr	PRIMASK, r3
}
 80087fa:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 80087fc:	f7fe fda2 	bl	8007344 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008800:	bf00      	nop
}
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	58000c00 	.word	0x58000c00

0800880c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008810:	f7fe fdae 	bl	8007370 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008814:	2102      	movs	r1, #2
 8008816:	4802      	ldr	r0, [pc, #8]	@ (8008820 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008818:	f7ff fe7a 	bl	8008510 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800881c:	bf00      	nop
}
 800881e:	bd80      	pop	{r7, pc}
 8008820:	58000c00 	.word	0x58000c00

08008824 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800882c:	2108      	movs	r1, #8
 800882e:	4812      	ldr	r0, [pc, #72]	@ (8008878 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8008830:	f7ff fe8b 	bl	800854a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d013      	beq.n	8008862 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800883a:	4a10      	ldr	r2, [pc, #64]	@ (800887c <HW_IPCC_MM_SendFreeBuf+0x58>)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008840:	f3ef 8310 	mrs	r3, PRIMASK
 8008844:	60fb      	str	r3, [r7, #12]
  return(result);
 8008846:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8008848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800884a:	b672      	cpsid	i
}
 800884c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800884e:	2108      	movs	r1, #8
 8008850:	4809      	ldr	r0, [pc, #36]	@ (8008878 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8008852:	f7ff fe26 	bl	80084a2 <LL_C1_IPCC_EnableTransmitChannel>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f383 8810 	msr	PRIMASK, r3
}
 8008860:	e005      	b.n	800886e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4798      	blx	r3

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008866:	2108      	movs	r1, #8
 8008868:	4803      	ldr	r0, [pc, #12]	@ (8008878 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800886a:	f7ff fe5f 	bl	800852c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800886e:	bf00      	nop
}
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	58000c00 	.word	0x58000c00
 800887c:	2000036c 	.word	0x2000036c

08008880 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008886:	f3ef 8310 	mrs	r3, PRIMASK
 800888a:	607b      	str	r3, [r7, #4]
  return(result);
 800888c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800888e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008890:	b672      	cpsid	i
}
 8008892:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008894:	2108      	movs	r1, #8
 8008896:	480a      	ldr	r0, [pc, #40]	@ (80088c0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8008898:	f7ff fe16 	bl	80084c8 <LL_C1_IPCC_DisableTransmitChannel>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f383 8810 	msr	PRIMASK, r3
}
 80088a6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 80088a8:	4b06      	ldr	r3, [pc, #24]	@ (80088c4 <HW_IPCC_MM_FreeBufHandler+0x44>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088ae:	2108      	movs	r1, #8
 80088b0:	4803      	ldr	r0, [pc, #12]	@ (80088c0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 80088b2:	f7ff fe3b 	bl	800852c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80088b6:	bf00      	nop
}
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	58000c00 	.word	0x58000c00
 80088c4:	2000036c 	.word	0x2000036c

080088c8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ce:	f3ef 8310 	mrs	r3, PRIMASK
 80088d2:	607b      	str	r3, [r7, #4]
  return(result);
 80088d4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80088d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80088d8:	b672      	cpsid	i
}
 80088da:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80088dc:	2108      	movs	r1, #8
 80088de:	4806      	ldr	r0, [pc, #24]	@ (80088f8 <HW_IPCC_TRACES_Init+0x30>)
 80088e0:	f7ff fe04 	bl	80084ec <LL_C1_IPCC_EnableReceiveChannel>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f383 8810 	msr	PRIMASK, r3
}
 80088ee:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80088f0:	bf00      	nop
}
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	58000c00 	.word	0x58000c00

080088fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008900:	f7fe fdde 	bl	80074c0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008904:	2108      	movs	r1, #8
 8008906:	4802      	ldr	r0, [pc, #8]	@ (8008910 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008908:	f7ff fe02 	bl	8008510 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800890c:	bf00      	nop
}
 800890e:	bd80      	pop	{r7, pc}
 8008910:	58000c00 	.word	0x58000c00

08008914 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008914:	b480      	push	{r7}
 8008916:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008918:	4b05      	ldr	r3, [pc, #20]	@ (8008930 <UTIL_LPM_Init+0x1c>)
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800891e:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <UTIL_LPM_Init+0x20>)
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008924:	bf00      	nop
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20000370 	.word	0x20000370
 8008934:	20000374 	.word	0x20000374

08008938 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008944:	f3ef 8310 	mrs	r3, PRIMASK
 8008948:	613b      	str	r3, [r7, #16]
  return(result);
 800894a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800894c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800894e:	b672      	cpsid	i
}
 8008950:	bf00      	nop
  
  switch( state )
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d008      	beq.n	800896a <UTIL_LPM_SetStopMode+0x32>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10e      	bne.n	800897a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800895c:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <UTIL_LPM_SetStopMode+0x5c>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4313      	orrs	r3, r2
 8008964:	4a0b      	ldr	r2, [pc, #44]	@ (8008994 <UTIL_LPM_SetStopMode+0x5c>)
 8008966:	6013      	str	r3, [r2, #0]
      break;
 8008968:	e008      	b.n	800897c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	43da      	mvns	r2, r3
 800896e:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <UTIL_LPM_SetStopMode+0x5c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4013      	ands	r3, r2
 8008974:	4a07      	ldr	r2, [pc, #28]	@ (8008994 <UTIL_LPM_SetStopMode+0x5c>)
 8008976:	6013      	str	r3, [r2, #0]
      break;
 8008978:	e000      	b.n	800897c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800897a:	bf00      	nop
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f383 8810 	msr	PRIMASK, r3
}
 8008986:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	20000370 	.word	0x20000370

08008998 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a4:	f3ef 8310 	mrs	r3, PRIMASK
 80089a8:	613b      	str	r3, [r7, #16]
  return(result);
 80089aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80089ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089ae:	b672      	cpsid	i
}
 80089b0:	bf00      	nop
  
  switch(state)
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <UTIL_LPM_SetOffMode+0x32>
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d10e      	bne.n	80089da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80089bc:	4b0d      	ldr	r3, [pc, #52]	@ (80089f4 <UTIL_LPM_SetOffMode+0x5c>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	4a0b      	ldr	r2, [pc, #44]	@ (80089f4 <UTIL_LPM_SetOffMode+0x5c>)
 80089c6:	6013      	str	r3, [r2, #0]
      break;
 80089c8:	e008      	b.n	80089dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	43da      	mvns	r2, r3
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <UTIL_LPM_SetOffMode+0x5c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4013      	ands	r3, r2
 80089d4:	4a07      	ldr	r2, [pc, #28]	@ (80089f4 <UTIL_LPM_SetOffMode+0x5c>)
 80089d6:	6013      	str	r3, [r2, #0]
      break;
 80089d8:	e000      	b.n	80089dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80089da:	bf00      	nop
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f383 8810 	msr	PRIMASK, r3
}
 80089e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	20000374 	.word	0x20000374

080089f8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008a02:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a04:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8008a06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a08:	b672      	cpsid	i
}
 8008a0a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8008a0c:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <UTIL_LPM_EnterLowPower+0x60>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008a14:	4b11      	ldr	r3, [pc, #68]	@ (8008a5c <UTIL_LPM_EnterLowPower+0x64>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008a1a:	4b10      	ldr	r3, [pc, #64]	@ (8008a5c <UTIL_LPM_EnterLowPower+0x64>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	e010      	b.n	8008a44 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8008a22:	4b0f      	ldr	r3, [pc, #60]	@ (8008a60 <UTIL_LPM_EnterLowPower+0x68>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a5c <UTIL_LPM_EnterLowPower+0x64>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <UTIL_LPM_EnterLowPower+0x64>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	4798      	blx	r3
 8008a36:	e005      	b.n	8008a44 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8008a38:	4b08      	ldr	r3, [pc, #32]	@ (8008a5c <UTIL_LPM_EnterLowPower+0x64>)
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8008a3e:	4b07      	ldr	r3, [pc, #28]	@ (8008a5c <UTIL_LPM_EnterLowPower+0x64>)
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	4798      	blx	r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f383 8810 	msr	PRIMASK, r3
}
 8008a4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000370 	.word	0x20000370
 8008a5c:	080090f4 	.word	0x080090f4
 8008a60:	20000374 	.word	0x20000374

08008a64 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b090      	sub	sp, #64	@ 0x40
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008a6c:	4b73      	ldr	r3, [pc, #460]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008a72:	4b72      	ldr	r3, [pc, #456]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	4a70      	ldr	r2, [pc, #448]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008a7c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008a7e:	4b70      	ldr	r3, [pc, #448]	@ (8008c40 <UTIL_SEQ_Run+0x1dc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008a84:	4b6f      	ldr	r3, [pc, #444]	@ (8008c44 <UTIL_SEQ_Run+0x1e0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8008c48 <UTIL_SEQ_Run+0x1e4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008a90:	4b6e      	ldr	r3, [pc, #440]	@ (8008c4c <UTIL_SEQ_Run+0x1e8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008a96:	e08d      	b.n	8008bb4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008a9c:	e002      	b.n	8008aa4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008aa4:	4a6a      	ldr	r2, [pc, #424]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	401a      	ands	r2, r3
 8008ab0:	4b62      	ldr	r3, [pc, #392]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f1      	beq.n	8008a9e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008aba:	4a65      	ldr	r2, [pc, #404]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008abe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	401a      	ands	r2, r3
 8008ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008ace:	4a60      	ldr	r2, [pc, #384]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d106      	bne.n	8008aee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008ae0:	4a5b      	ldr	r2, [pc, #364]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008aee:	4a58      	ldr	r2, [pc, #352]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4413      	add	r3, r2
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	4013      	ands	r3, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f9c1 	bl	8008e84 <SEQ_BitPosition>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	4b53      	ldr	r3, [pc, #332]	@ (8008c54 <UTIL_SEQ_Run+0x1f0>)
 8008b08:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008b0a:	4a51      	ldr	r2, [pc, #324]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	4b4f      	ldr	r3, [pc, #316]	@ (8008c54 <UTIL_SEQ_Run+0x1f0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2101      	movs	r1, #1
 8008b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1e:	43db      	mvns	r3, r3
 8008b20:	401a      	ands	r2, r3
 8008b22:	494b      	ldr	r1, [pc, #300]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	440b      	add	r3, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b30:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b32:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008b34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b36:	b672      	cpsid	i
}
 8008b38:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008b3a:	4b46      	ldr	r3, [pc, #280]	@ (8008c54 <UTIL_SEQ_Run+0x1f0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	fa02 f303 	lsl.w	r3, r2, r3
 8008b44:	43da      	mvns	r2, r3
 8008b46:	4b3e      	ldr	r3, [pc, #248]	@ (8008c40 <UTIL_SEQ_Run+0x1dc>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8008c40 <UTIL_SEQ_Run+0x1dc>)
 8008b4e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008b50:	2301      	movs	r3, #1
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b54:	e013      	b.n	8008b7e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008b5c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008b60:	4b3c      	ldr	r3, [pc, #240]	@ (8008c54 <UTIL_SEQ_Run+0x1f0>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2201      	movs	r2, #1
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	43da      	mvns	r2, r3
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	400a      	ands	r2, r1
 8008b72:	4937      	ldr	r1, [pc, #220]	@ (8008c50 <UTIL_SEQ_Run+0x1ec>)
 8008b74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e8      	bne.n	8008b56 <UTIL_SEQ_Run+0xf2>
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f383 8810 	msr	PRIMASK, r3
}
 8008b8e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008b90:	4b30      	ldr	r3, [pc, #192]	@ (8008c54 <UTIL_SEQ_Run+0x1f0>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a30      	ldr	r2, [pc, #192]	@ (8008c58 <UTIL_SEQ_Run+0x1f4>)
 8008b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b9a:	4798      	blx	r3

    local_taskset = TaskSet;
 8008b9c:	4b28      	ldr	r3, [pc, #160]	@ (8008c40 <UTIL_SEQ_Run+0x1dc>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8008ba2:	4b28      	ldr	r3, [pc, #160]	@ (8008c44 <UTIL_SEQ_Run+0x1e0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008ba8:	4b27      	ldr	r3, [pc, #156]	@ (8008c48 <UTIL_SEQ_Run+0x1e4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008bae:	4b27      	ldr	r3, [pc, #156]	@ (8008c4c <UTIL_SEQ_Run+0x1e8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008bb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	401a      	ands	r2, r3
 8008bba:	4b20      	ldr	r3, [pc, #128]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <UTIL_SEQ_Run+0x16c>
 8008bc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	4013      	ands	r3, r2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f43f af64 	beq.w	8008a98 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008bd0:	4b20      	ldr	r3, [pc, #128]	@ (8008c54 <UTIL_SEQ_Run+0x1f0>)
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008bd8:	f000 f946 	bl	8008e68 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8008be0:	613b      	str	r3, [r7, #16]
  return(result);
 8008be2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008be6:	b672      	cpsid	i
}
 8008be8:	bf00      	nop
  local_taskset = TaskSet;
 8008bea:	4b15      	ldr	r3, [pc, #84]	@ (8008c40 <UTIL_SEQ_Run+0x1dc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008bf0:	4b14      	ldr	r3, [pc, #80]	@ (8008c44 <UTIL_SEQ_Run+0x1e0>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	@ (8008c48 <UTIL_SEQ_Run+0x1e4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008bfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	401a      	ands	r2, r3
 8008c02:	4b0e      	ldr	r3, [pc, #56]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4013      	ands	r3, r2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c4c <UTIL_SEQ_Run+0x1e8>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c12:	4013      	ands	r3, r2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008c18:	f7f7 fd18 	bl	800064c <UTIL_SEQ_Idle>
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f383 8810 	msr	PRIMASK, r3
}
 8008c26:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008c28:	f000 f925 	bl	8008e76 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008c2c:	4a03      	ldr	r2, [pc, #12]	@ (8008c3c <UTIL_SEQ_Run+0x1d8>)
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	6013      	str	r3, [r2, #0]

  return;
 8008c32:	bf00      	nop
}
 8008c34:	3740      	adds	r7, #64	@ 0x40
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000004c 	.word	0x2000004c
 8008c40:	20000378 	.word	0x20000378
 8008c44:	2000037c 	.word	0x2000037c
 8008c48:	20000048 	.word	0x20000048
 8008c4c:	20000380 	.word	0x20000380
 8008c50:	20000408 	.word	0x20000408
 8008c54:	20000384 	.word	0x20000384
 8008c58:	20000388 	.word	0x20000388

08008c5c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c68:	f3ef 8310 	mrs	r3, PRIMASK
 8008c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c6e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008c70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c72:	b672      	cpsid	i
}
 8008c74:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 f904 	bl	8008e84 <SEQ_BitPosition>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4a06      	ldr	r2, [pc, #24]	@ (8008c9c <UTIL_SEQ_RegTask+0x40>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f383 8810 	msr	PRIMASK, r3
}
 8008c92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008c94:	bf00      	nop
}
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000388 	.word	0x20000388

08008ca0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008caa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cb4:	b672      	cpsid	i
}
 8008cb6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf0 <UTIL_SEQ_SetTask+0x50>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf0 <UTIL_SEQ_SetTask+0x50>)
 8008cc2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf4 <UTIL_SEQ_SetTask+0x54>)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	4908      	ldr	r1, [pc, #32]	@ (8008cf4 <UTIL_SEQ_SetTask+0x54>)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f383 8810 	msr	PRIMASK, r3
}
 8008ce2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008ce4:	bf00      	nop
}
 8008ce6:	371c      	adds	r7, #28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000378 	.word	0x20000378
 8008cf4:	20000408 	.word	0x20000408

08008cf8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d00:	f3ef 8310 	mrs	r3, PRIMASK
 8008d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d06:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d0a:	b672      	cpsid	i
}
 8008d0c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	43da      	mvns	r2, r3
 8008d12:	4b08      	ldr	r3, [pc, #32]	@ (8008d34 <UTIL_SEQ_PauseTask+0x3c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4013      	ands	r3, r2
 8008d18:	4a06      	ldr	r2, [pc, #24]	@ (8008d34 <UTIL_SEQ_PauseTask+0x3c>)
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f383 8810 	msr	PRIMASK, r3
}
 8008d26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008d28:	bf00      	nop
}
 8008d2a:	371c      	adds	r7, #28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	20000048 	.word	0x20000048

08008d38 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d40:	f3ef 8310 	mrs	r3, PRIMASK
 8008d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d4a:	b672      	cpsid	i
}
 8008d4c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <UTIL_SEQ_ResumeTask+0x3c>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	4a07      	ldr	r2, [pc, #28]	@ (8008d74 <UTIL_SEQ_ResumeTask+0x3c>)
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f383 8810 	msr	PRIMASK, r3
}
 8008d64:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008d66:	bf00      	nop
}
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000048 	.word	0x20000048

08008d78 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d80:	f3ef 8310 	mrs	r3, PRIMASK
 8008d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d8a:	b672      	cpsid	i
}
 8008d8c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008d8e:	4b09      	ldr	r3, [pc, #36]	@ (8008db4 <UTIL_SEQ_SetEvt+0x3c>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	4a07      	ldr	r2, [pc, #28]	@ (8008db4 <UTIL_SEQ_SetEvt+0x3c>)
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f383 8810 	msr	PRIMASK, r3
}
 8008da4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008da6:	bf00      	nop
}
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	2000037c 	.word	0x2000037c

08008db8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e40 <UTIL_SEQ_WaitEvt+0x88>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e40 <UTIL_SEQ_WaitEvt+0x88>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d102      	bne.n	8008dd6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e005      	b.n	8008de2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8008e40 <UTIL_SEQ_WaitEvt+0x88>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8008de0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008de2:	4b18      	ldr	r3, [pc, #96]	@ (8008e44 <UTIL_SEQ_WaitEvt+0x8c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008de8:	4a16      	ldr	r2, [pc, #88]	@ (8008e44 <UTIL_SEQ_WaitEvt+0x8c>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008dee:	e003      	b.n	8008df8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	69f8      	ldr	r0, [r7, #28]
 8008df4:	f000 f82a 	bl	8008e4c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008df8:	4b13      	ldr	r3, [pc, #76]	@ (8008e48 <UTIL_SEQ_WaitEvt+0x90>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0f5      	beq.n	8008df0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008e04:	4a0e      	ldr	r2, [pc, #56]	@ (8008e40 <UTIL_SEQ_WaitEvt+0x88>)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e10:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e14:	b672      	cpsid	i
}
 8008e16:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	43da      	mvns	r2, r3
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e48 <UTIL_SEQ_WaitEvt+0x90>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4013      	ands	r3, r2
 8008e22:	4a09      	ldr	r2, [pc, #36]	@ (8008e48 <UTIL_SEQ_WaitEvt+0x90>)
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f383 8810 	msr	PRIMASK, r3
}
 8008e30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008e32:	4a04      	ldr	r2, [pc, #16]	@ (8008e44 <UTIL_SEQ_WaitEvt+0x8c>)
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	6013      	str	r3, [r2, #0]
  return;
 8008e38:	bf00      	nop
}
 8008e3a:	3720      	adds	r7, #32
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000384 	.word	0x20000384
 8008e44:	20000380 	.word	0x20000380
 8008e48:	2000037c 	.word	0x2000037c

08008e4c <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fe02 	bl	8008a64 <UTIL_SEQ_Run>
  return;
 8008e60:	bf00      	nop
}
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008e6c:	bf00      	nop
}
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008e76:	b480      	push	{r7}
 8008e78:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008e7a:	bf00      	nop
}
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <SEQ_BitPosition+0x16>
    return 32U;
 8008e96:	2320      	movs	r3, #32
 8008e98:	e003      	b.n	8008ea2 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	fab3 f383 	clz	r3, r3
 8008ea0:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8008ea2:	f1c3 031f 	rsb	r3, r3, #31
 8008ea6:	b2db      	uxtb	r3, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <memset>:
 8008eb4:	4402      	add	r2, r0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d100      	bne.n	8008ebe <memset+0xa>
 8008ebc:	4770      	bx	lr
 8008ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec2:	e7f9      	b.n	8008eb8 <memset+0x4>

08008ec4 <__libc_init_array>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8008efc <__libc_init_array+0x38>)
 8008ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8008f00 <__libc_init_array+0x3c>)
 8008eca:	1b64      	subs	r4, r4, r5
 8008ecc:	10a4      	asrs	r4, r4, #2
 8008ece:	2600      	movs	r6, #0
 8008ed0:	42a6      	cmp	r6, r4
 8008ed2:	d109      	bne.n	8008ee8 <__libc_init_array+0x24>
 8008ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8008f04 <__libc_init_array+0x40>)
 8008ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8008f08 <__libc_init_array+0x44>)
 8008ed8:	f000 f826 	bl	8008f28 <_init>
 8008edc:	1b64      	subs	r4, r4, r5
 8008ede:	10a4      	asrs	r4, r4, #2
 8008ee0:	2600      	movs	r6, #0
 8008ee2:	42a6      	cmp	r6, r4
 8008ee4:	d105      	bne.n	8008ef2 <__libc_init_array+0x2e>
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eec:	4798      	blx	r3
 8008eee:	3601      	adds	r6, #1
 8008ef0:	e7ee      	b.n	8008ed0 <__libc_init_array+0xc>
 8008ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef6:	4798      	blx	r3
 8008ef8:	3601      	adds	r6, #1
 8008efa:	e7f2      	b.n	8008ee2 <__libc_init_array+0x1e>
 8008efc:	080091bc 	.word	0x080091bc
 8008f00:	080091bc 	.word	0x080091bc
 8008f04:	080091bc 	.word	0x080091bc
 8008f08:	080091c0 	.word	0x080091c0

08008f0c <memcpy>:
 8008f0c:	440a      	add	r2, r1
 8008f0e:	4291      	cmp	r1, r2
 8008f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f14:	d100      	bne.n	8008f18 <memcpy+0xc>
 8008f16:	4770      	bx	lr
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f22:	4291      	cmp	r1, r2
 8008f24:	d1f9      	bne.n	8008f1a <memcpy+0xe>
 8008f26:	bd10      	pop	{r4, pc}

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr
