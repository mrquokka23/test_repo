
Tire_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e48  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1f8  0800a1f8  0000b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a200  0800a200  0000b200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a204  0800a204  0000b204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000048  20000008  0800a208  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000050  0800a250  0000c050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000088  0800a285  0000c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  2000009c  0800a296  0000c09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800a296  0000c450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a296  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00029aa5  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ea9  00000000  00000000  0003653c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002630  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001cff  00000000  00000000  0003ea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026a67  00000000  00000000  00040717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029c90  00000000  00000000  0006717e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d0f7a  00000000  00000000  00090e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00161d88  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009e40  00000000  00000000  00161dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000059  00000000  00000000  0016bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000009c 	.word	0x2000009c
 8000158:	00000000 	.word	0x00000000
 800015c:	08009f6c 	.word	0x08009f6c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a0 	.word	0x200000a0
 8000178:	08009f6c 	.word	0x08009f6c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	@ (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fe49 	bl	8002eb8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fe4d 	bl	8002ec4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f841 	bl	80002b8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8ff 	bl	8000438 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000246:	4b15      	ldr	r3, [pc, #84]	@ (800029c <APPD_EnableCPU2+0x5c>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <APPD_EnableCPU2+0x60>)
 800024c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800024e:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <APPD_EnableCPU2+0x64>)
 8000250:	881a      	ldrh	r2, [r3, #0]
 8000252:	4b13      	ldr	r3, [pc, #76]	@ (80002a0 <APPD_EnableCPU2+0x60>)
 8000254:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <APPD_EnableCPU2+0x68>)
 8000258:	881a      	ldrh	r2, [r3, #0]
 800025a:	4b11      	ldr	r3, [pc, #68]	@ (80002a0 <APPD_EnableCPU2+0x60>)
 800025c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800025e:	4b13      	ldr	r3, [pc, #76]	@ (80002ac <APPD_EnableCPU2+0x6c>)
 8000260:	881a      	ldrh	r2, [r3, #0]
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <APPD_EnableCPU2+0x60>)
 8000264:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000266:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <APPD_EnableCPU2+0x70>)
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <APPD_EnableCPU2+0x60>)
 800026c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <APPD_EnableCPU2+0x74>)
 8000270:	1d3c      	adds	r4, r7, #4
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	c403      	stmia	r4!, {r0, r1}
 800027e:	8022      	strh	r2, [r4, #0]
 8000280:	3402      	adds	r4, #2
 8000282:	0c13      	lsrs	r3, r2, #16
 8000284:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000286:	f008 f925 	bl	80084d4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f007 fbb6 	bl	80079fe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000292:	bf00      	nop
}
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bdb0      	pop	{r4, r5, r7, pc}
 800029a:	bf00      	nop
 800029c:	20000016 	.word	0x20000016
 80002a0:	200301e8 	.word	0x200301e8
 80002a4:	20000018 	.word	0x20000018
 80002a8:	2000001a 	.word	0x2000001a
 80002ac:	2000001c 	.word	0x2000001c
 80002b0:	2000001e 	.word	0x2000001e
 80002b4:	08009f84 	.word	0x08009f84

080002b8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = STBY_DebugGpioaPinList;
 80002cc:	4b54      	ldr	r3, [pc, #336]	@ (8000420 <APPD_SetCPU2GpioConfig+0x168>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = STBY_DebugGpiobPinList;
 80002d2:	4b54      	ldr	r3, [pc, #336]	@ (8000424 <APPD_SetCPU2GpioConfig+0x16c>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = STBY_DebugGpiocPinList;
 80002d8:	4b53      	ldr	r3, [pc, #332]	@ (8000428 <APPD_SetCPU2GpioConfig+0x170>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	833b      	strh	r3, [r7, #24]

  if(gpioa_pin_list == UINT16_MAX)
 80002de:	8bbb      	ldrh	r3, [r7, #28]
 80002e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d14b      	bne.n	8000380 <APPD_SetCPU2GpioConfig+0xc8>
  {
    gpioa_pin_list = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	83bb      	strh	r3, [r7, #28]
    gpiob_pin_list = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	837b      	strh	r3, [r7, #26]
    gpioc_pin_list = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	833b      	strh	r3, [r7, #24]

    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	77fb      	strb	r3, [r7, #31]
 80002f8:	e036      	b.n	8000368 <APPD_SetCPU2GpioConfig+0xb0>
    {
      if( aGpioConfigList[local_loop].enable != 0)
 80002fa:	7ffb      	ldrb	r3, [r7, #31]
 80002fc:	4a4b      	ldr	r2, [pc, #300]	@ (800042c <APPD_SetCPU2GpioConfig+0x174>)
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	4413      	add	r3, r2
 8000302:	799b      	ldrb	r3, [r3, #6]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d02c      	beq.n	8000362 <APPD_SetCPU2GpioConfig+0xaa>
      {
        switch((uint32_t)aGpioConfigList[local_loop].port)
 8000308:	7ffb      	ldrb	r3, [r7, #31]
 800030a:	4a48      	ldr	r2, [pc, #288]	@ (800042c <APPD_SetCPU2GpioConfig+0x174>)
 800030c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000310:	4a47      	ldr	r2, [pc, #284]	@ (8000430 <APPD_SetCPU2GpioConfig+0x178>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d01b      	beq.n	800034e <APPD_SetCPU2GpioConfig+0x96>
 8000316:	4a46      	ldr	r2, [pc, #280]	@ (8000430 <APPD_SetCPU2GpioConfig+0x178>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d821      	bhi.n	8000360 <APPD_SetCPU2GpioConfig+0xa8>
 800031c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000320:	d003      	beq.n	800032a <APPD_SetCPU2GpioConfig+0x72>
 8000322:	4a44      	ldr	r2, [pc, #272]	@ (8000434 <APPD_SetCPU2GpioConfig+0x17c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d009      	beq.n	800033c <APPD_SetCPU2GpioConfig+0x84>
            break;
          case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
            break;
          default:
            break;
 8000328:	e01a      	b.n	8000360 <APPD_SetCPU2GpioConfig+0xa8>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800032a:	7ffb      	ldrb	r3, [r7, #31]
 800032c:	4a3f      	ldr	r2, [pc, #252]	@ (800042c <APPD_SetCPU2GpioConfig+0x174>)
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	4413      	add	r3, r2
 8000332:	889a      	ldrh	r2, [r3, #4]
 8000334:	8bbb      	ldrh	r3, [r7, #28]
 8000336:	4313      	orrs	r3, r2
 8000338:	83bb      	strh	r3, [r7, #28]
            break;
 800033a:	e012      	b.n	8000362 <APPD_SetCPU2GpioConfig+0xaa>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800033c:	7ffb      	ldrb	r3, [r7, #31]
 800033e:	4a3b      	ldr	r2, [pc, #236]	@ (800042c <APPD_SetCPU2GpioConfig+0x174>)
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4413      	add	r3, r2
 8000344:	889a      	ldrh	r2, [r3, #4]
 8000346:	8b7b      	ldrh	r3, [r7, #26]
 8000348:	4313      	orrs	r3, r2
 800034a:	837b      	strh	r3, [r7, #26]
            break;
 800034c:	e009      	b.n	8000362 <APPD_SetCPU2GpioConfig+0xaa>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800034e:	7ffb      	ldrb	r3, [r7, #31]
 8000350:	4a36      	ldr	r2, [pc, #216]	@ (800042c <APPD_SetCPU2GpioConfig+0x174>)
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	4413      	add	r3, r2
 8000356:	889a      	ldrh	r2, [r3, #4]
 8000358:	8b3b      	ldrh	r3, [r7, #24]
 800035a:	4313      	orrs	r3, r2
 800035c:	833b      	strh	r3, [r7, #24]
            break;
 800035e:	e000      	b.n	8000362 <APPD_SetCPU2GpioConfig+0xaa>
            break;
 8000360:	bf00      	nop
    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000362:	7ffb      	ldrb	r3, [r7, #31]
 8000364:	3301      	adds	r3, #1
 8000366:	77fb      	strb	r3, [r7, #31]
 8000368:	7ffb      	ldrb	r3, [r7, #31]
 800036a:	2b25      	cmp	r3, #37	@ 0x25
 800036c:	d9c5      	bls.n	80002fa <APPD_SetCPU2GpioConfig+0x42>
        }
      }
    }

    STBY_DebugGpioaPinList = gpioa_pin_list;
 800036e:	4a2c      	ldr	r2, [pc, #176]	@ (8000420 <APPD_SetCPU2GpioConfig+0x168>)
 8000370:	8bbb      	ldrh	r3, [r7, #28]
 8000372:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiobPinList = gpiob_pin_list;
 8000374:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <APPD_SetCPU2GpioConfig+0x16c>)
 8000376:	8b7b      	ldrh	r3, [r7, #26]
 8000378:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiocPinList = gpioc_pin_list;
 800037a:	4a2b      	ldr	r2, [pc, #172]	@ (8000428 <APPD_SetCPU2GpioConfig+0x170>)
 800037c:	8b3b      	ldrh	r3, [r7, #24]
 800037e:	8013      	strh	r3, [r2, #0]
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000384:	2301      	movs	r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000388:	2303      	movs	r3, #3
 800038a:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800038c:	8bbb      	ldrh	r3, [r7, #28]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d014      	beq.n	80003bc <APPD_SetCPU2GpioConfig+0x104>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000392:	8bbb      	ldrh	r3, [r7, #28]
 8000394:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff0c 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ff22 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f002 ff2b 	bl	8003204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80003ae:	8bbb      	ldrh	r3, [r7, #28]
 80003b0:	2200      	movs	r2, #0
 80003b2:	4619      	mov	r1, r3
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b8:	f003 f88c 	bl	80034d4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80003bc:	8b7b      	ldrh	r3, [r7, #26]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d012      	beq.n	80003e8 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpiob_pin_list;
 80003c2:	8b7b      	ldrh	r3, [r7, #26]
 80003c4:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	2002      	movs	r0, #2
 80003c8:	f7ff fef4 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80003cc:	2002      	movs	r0, #2
 80003ce:	f7ff ff0a 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4817      	ldr	r0, [pc, #92]	@ (8000434 <APPD_SetCPU2GpioConfig+0x17c>)
 80003d8:	f002 ff14 	bl	8003204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80003dc:	8b7b      	ldrh	r3, [r7, #26]
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	4814      	ldr	r0, [pc, #80]	@ (8000434 <APPD_SetCPU2GpioConfig+0x17c>)
 80003e4:	f003 f876 	bl	80034d4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80003e8:	8b3b      	ldrh	r3, [r7, #24]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d013      	beq.n	8000416 <APPD_SetCPU2GpioConfig+0x15e>
  {
    gpio_config.Pin = gpioc_pin_list;
 80003ee:	8b3b      	ldrh	r3, [r7, #24]
 80003f0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	2004      	movs	r0, #4
 80003f4:	f7ff fede 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003f8:	2004      	movs	r0, #4
 80003fa:	f7ff fef4 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	480b      	ldr	r0, [pc, #44]	@ (8000430 <APPD_SetCPU2GpioConfig+0x178>)
 8000404:	f002 fefe 	bl	8003204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000408:	8b3b      	ldrh	r3, [r7, #24]
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	4808      	ldr	r0, [pc, #32]	@ (8000430 <APPD_SetCPU2GpioConfig+0x178>)
 8000410:	f003 f860 	bl	80034d4 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000414:	bf00      	nop
 8000416:	bf00      	nop
}
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000016 	.word	0x20000016
 8000424:	20000018 	.word	0x20000018
 8000428:	2000001a 	.word	0x2000001a
 800042c:	0800a008 	.word	0x0800a008
 8000430:	48000800 	.word	0x48000800
 8000434:	48000400 	.word	0x48000400

08000438 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#else
  STBY_DtbGpioaPinList = 0;
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <APPD_BleDtbCfg+0x1c>)
 800043e:	2200      	movs	r2, #0
 8000440:	801a      	strh	r2, [r3, #0]
  STBY_DtbGpiobPinList = 0;
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <APPD_BleDtbCfg+0x20>)
 8000444:	2200      	movs	r2, #0
 8000446:	801a      	strh	r2, [r3, #0]
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000448:	bf00      	nop
}
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	2000001c 	.word	0x2000001c
 8000458:	2000001e 	.word	0x2000001e

0800045c <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <LL_PWR_SMPS_Enable+0x1c>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <LL_PWR_SMPS_Enable+0x1c>)
 8000466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800046a:	61d3      	str	r3, [r2, #28]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	58000400 	.word	0x58000400

0800047c <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800048c:	4904      	ldr	r1, [pc, #16]	@ (80004a0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	61cb      	str	r3, [r1, #28]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	58000400 	.word	0x58000400

080004a4 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	0a1b      	lsrs	r3, r3, #8
 80004b2:	f003 030f 	and.w	r3, r3, #15
 80004b6:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d108      	bne.n	80004d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f023 020f 	bic.w	r2, r3, #15
 80004c6:	4913      	ldr	r1, [pc, #76]	@ (8000514 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 80004ce:	e019      	b.n	8000504 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3b06      	subs	r3, #6
 80004d4:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	693a      	ldr	r2, [r7, #16]
 80004da:	4413      	add	r3, r2
 80004dc:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da02      	bge.n	80004ea <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	e004      	b.n	80004f4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	dd01      	ble.n	80004f4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80004f0:	230f      	movs	r3, #15
 80004f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80004f4:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	f023 020f 	bic.w	r2, r3, #15
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	4905      	ldr	r1, [pc, #20]	@ (8000514 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000500:	4313      	orrs	r3, r2
 8000502:	61cb      	str	r3, [r1, #28]
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	1fff7558 	.word	0x1fff7558
 8000514:	58000400 	.word	0x58000400

08000518 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000520:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <LL_C2_PWR_SetPowerMode+0x28>)
 8000522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000526:	f023 0207 	bic.w	r2, r3, #7
 800052a:	4905      	ldr	r1, [pc, #20]	@ (8000540 <LL_C2_PWR_SetPowerMode+0x28>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	58000400 	.word	0x58000400

08000544 <LL_EXTI_EnableIT_32_63>:
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <LL_EXTI_EnableIT_32_63+0x24>)
 800054e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000552:	4905      	ldr	r1, [pc, #20]	@ (8000568 <LL_EXTI_EnableIT_32_63+0x24>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	58000800 	.word	0x58000800

0800056c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800057a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000586:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000592:	4313      	orrs	r3, r2
 8000594:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	cafecafe 	.word	0xcafecafe

080005a8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80005b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80005ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	608b      	str	r3, [r1, #8]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80005f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800061c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000628:	d101      	bne.n	800062e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800063e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800064e:	d101      	bne.n	8000654 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000650:	2301      	movs	r3, #1
 8000652:	e000      	b.n	8000656 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <LL_AHB3_GRP1_EnableClock>:
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800066c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800066e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800067c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000684:	68fb      	ldr	r3, [r7, #12]
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <LL_DBGMCU_GetDeviceID+0x18>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e0042000 	.word	0xe0042000

080006b0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <LL_DBGMCU_GetRevisionID+0x18>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	b29b      	uxth	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e0042000 	.word	0xe0042000

080006cc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	605a      	str	r2, [r3, #4]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	431a      	orrs	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	605a      	str	r2, [r3, #4]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	041b      	lsls	r3, r3, #16
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	615a      	str	r2, [r3, #20]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	615a      	str	r2, [r3, #20]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	609a      	str	r2, [r3, #8]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	619a      	str	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <LL_LPM_EnableSleep+0x1c>)
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <LL_LPM_EnableSleep+0x1c>)
 800079a:	f023 0304 	bic.w	r3, r3, #4
 800079e:	6113      	str	r3, [r2, #16]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	22ff      	movs	r2, #255	@ 0xff
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	22ca      	movs	r2, #202	@ 0xca
 80007d6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2253      	movs	r2, #83	@ 0x53
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f023 0207 	bic.w	r2, r3, #7
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	431a      	orrs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	609a      	str	r2, [r3, #8]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <MX_APPE_Config+0x18>)
 8000816:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800081a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800081c:	f000 f829 	bl	8000872 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000820:	f000 f868 	bl	80008f4 <Config_HSE>

  return;
 8000824:	bf00      	nop
}
 8000826:	bd80      	pop	{r7, pc}
 8000828:	58004000 	.word	0x58004000

0800082c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000830:	f000 f874 	bl	800091c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000834:	f000 f88c 	bl	8000950 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000838:	4903      	ldr	r1, [pc, #12]	@ (8000848 <MX_APPE_Init+0x1c>)
 800083a:	2000      	movs	r0, #0
 800083c:	f000 fdcc 	bl	80013d8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000840:	f000 f896 	bl	8000970 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000844:	bf00      	nop
}
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001cc 	.word	0x200001cc

0800084c <Init_Smps>:

void Init_Smps(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fe13 	bl	800047c <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000856:	2004      	movs	r0, #4
 8000858:	f7ff fe24 	bl	80004a4 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 800085c:	f7ff fdfe 	bl	800045c <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000860:	bf00      	nop
}
 8000862:	bd80      	pop	{r7, pc}

08000864 <Init_Exti>:

void Init_Exti(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000868:	2050      	movs	r0, #80	@ 0x50
 800086a:	f7ff fe6b 	bl	8000544 <LL_EXTI_EnableIT_32_63>

  return;
 800086e:	bf00      	nop
}
 8000870:	bd80      	pop	{r7, pc}

08000872 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000876:	f000 f804 	bl	8000882 <Reset_BackupDomain>

  Reset_IPCC();
 800087a:	f000 f819 	bl	80008b0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800087e:	bf00      	nop
}
 8000880:	bd80      	pop	{r7, pc}

08000882 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000886:	f7ff fec5 	bl	8000614 <LL_RCC_IsActiveFlag_PINRST>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00d      	beq.n	80008ac <Reset_BackupDomain+0x2a>
 8000890:	f7ff fed3 	bl	800063a <LL_RCC_IsActiveFlag_SFTRST>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d108      	bne.n	80008ac <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800089a:	f003 f925 	bl	8003ae8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800089e:	f003 f923 	bl	8003ae8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008a2:	f7ff fe95 	bl	80005d0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008a6:	f7ff fea4 	bl	80005f2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008b4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008b8:	f7ff fed2 	bl	8000660 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008bc:	213f      	movs	r1, #63	@ 0x3f
 80008be:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <Reset_IPCC+0x40>)
 80008c0:	f7ff ff4a 	bl	8000758 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008c4:	213f      	movs	r1, #63	@ 0x3f
 80008c6:	480a      	ldr	r0, [pc, #40]	@ (80008f0 <Reset_IPCC+0x40>)
 80008c8:	f7ff ff54 	bl	8000774 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80008cc:	213f      	movs	r1, #63	@ 0x3f
 80008ce:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <Reset_IPCC+0x40>)
 80008d0:	f7ff fefc 	bl	80006cc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80008d4:	213f      	movs	r1, #63	@ 0x3f
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <Reset_IPCC+0x40>)
 80008d8:	f7ff ff1b 	bl	8000712 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80008dc:	213f      	movs	r1, #63	@ 0x3f
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <Reset_IPCC+0x40>)
 80008e0:	f7ff ff06 	bl	80006f0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80008e4:	213f      	movs	r1, #63	@ 0x3f
 80008e6:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <Reset_IPCC+0x40>)
 80008e8:	f7ff ff25 	bl	8000736 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80008ec:	bf00      	nop
}
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	58000c00 	.word	0x58000c00

080008f4 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f007 fe76 	bl	80085ec <OTP_Read>
 8000900:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d005      	beq.n	8000914 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	799b      	ldrb	r3, [r3, #6]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe2d 	bl	800056c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000912:	bf00      	nop
 8000914:	bf00      	nop
}
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <System_Init>:

static void System_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000920:	f7ff ff94 	bl	800084c <Init_Smps>

  Init_Exti();
 8000924:	f7ff ff9e 	bl	8000864 <Init_Exti>

  Init_Rtc();
 8000928:	f000 f802 	bl	8000930 <Init_Rtc>

  return;
 800092c:	bf00      	nop
}
 800092e:	bd80      	pop	{r7, pc}

08000930 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <Init_Rtc+0x1c>)
 8000936:	f7ff ff48 	bl	80007ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800093a:	2100      	movs	r1, #0
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <Init_Rtc+0x1c>)
 800093e:	f7ff ff54 	bl	80007ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000942:	4802      	ldr	r0, [pc, #8]	@ (800094c <Init_Rtc+0x1c>)
 8000944:	f7ff ff34 	bl	80007b0 <LL_RTC_EnableWriteProtection>

  return;
 8000948:	bf00      	nop
}
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40002800 	.word	0x40002800

08000950 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000954:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000958:	f7ff fe26 	bl	80005a8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800095c:	f008 fffc 	bl	8009958 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000960:	2004      	movs	r0, #4
 8000962:	f7ff fdd9 	bl	8000518 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8000966:	f003 f8df 	bl	8003b28 <HAL_PWREx_EnableSRAMRetention>

  return;
 800096a:	bf00      	nop
}
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000976:	f007 fbf7 	bl	8008168 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800097a:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <appe_Tl_Init+0x50>)
 800097c:	2100      	movs	r1, #0
 800097e:	2004      	movs	r0, #4
 8000980:	f009 f98e 	bl	8009ca0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <appe_Tl_Init+0x54>)
 8000986:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <appe_Tl_Init+0x58>)
 800098a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	480e      	ldr	r0, [pc, #56]	@ (80009cc <appe_Tl_Init+0x5c>)
 8000992:	f007 faab 	bl	8007eec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <appe_Tl_Init+0x60>)
 8000998:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <appe_Tl_Init+0x64>)
 800099c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <appe_Tl_Init+0x68>)
 80009a0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009a2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80009a6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4618      	mov	r0, r3
 80009ae:	f007 fd1d 	bl	80083ec <TL_MM_Init>

  TL_Enable();
 80009b2:	f007 fbd3 	bl	800815c <TL_Enable>

  return;
 80009b6:	bf00      	nop
}
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08007f25 	.word	0x08007f25
 80009c4:	20030734 	.word	0x20030734
 80009c8:	080009dd 	.word	0x080009dd
 80009cc:	080009f5 	.word	0x080009f5
 80009d0:	2003094c 	.word	0x2003094c
 80009d4:	20030840 	.word	0x20030840
 80009d8:	200301f8 	.word	0x200301f8

080009dc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009e6:	bf00      	nop
}
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	330b      	adds	r3, #11
 8000a02:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	d81f      	bhi.n	8000a52 <APPE_SysUserEvtRx+0x5e>
 8000a12:	a201      	add	r2, pc, #4	@ (adr r2, 8000a18 <APPE_SysUserEvtRx+0x24>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a39 	.word	0x08000a39
 8000a1c:	08000a4b 	.word	0x08000a4b
 8000a20:	08000a53 	.word	0x08000a53
 8000a24:	08000a53 	.word	0x08000a53
 8000a28:	08000a53 	.word	0x08000a53
 8000a2c:	08000a53 	.word	0x08000a53
 8000a30:	08000a53 	.word	0x08000a53
 8000a34:	08000a53 	.word	0x08000a53
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f007 f80b 	bl	8007a58 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f81b 	bl	8000a7e <APPE_SysEvtReadyProcessing>
    break;
 8000a48:	e004      	b.n	8000a54 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f806 	bl	8000a5c <APPE_SysEvtError>
    break;
 8000a50:	e000      	b.n	8000a54 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a52:	bf00      	nop
  }

  return;
 8000a54:	bf00      	nop
}
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	330b      	adds	r3, #11
 8000a6a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a72:	bf00      	nop
}
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b08a      	sub	sp, #40	@ 0x28
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	330b      	adds	r3, #11
 8000aa2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d11d      	bne.n	8000aee <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000ab2:	f7ff fbc5 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000aba:	237f      	movs	r3, #127	@ 0x7f
 8000abc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000abe:	f7ff fdf7 	bl	80006b0 <LL_DBGMCU_GetRevisionID>
 8000ac2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000aca:	f7ff fde3 	bl	8000694 <LL_DBGMCU_GetDeviceID>
 8000ace:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4618      	mov	r0, r3
 8000adc:	f006 ffa6 	bl	8007a2c <SHCI_C2_Config>

    APP_BLE_Init();
 8000ae0:	f007 fe8e 	bl	8008800 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f008 ff78 	bl	80099dc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000aec:	e007      	b.n	8000afe <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  return;
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
}
 8000b00:	3728      	adds	r7, #40	@ 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0e:	f002 f98f 	bl	8002e30 <HAL_GetTick>
 8000b12:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1e:	d00a      	beq.n	8000b36 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000b20:	f002 f99e 	bl	8002e60 <HAL_GetTickFreq>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2e:	e002      	b.n	8000b36 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000b30:	f7ff fe2e 	bl	8000790 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000b34:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	f002 f97b 	bl	8002e30 <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8f4      	bhi.n	8000b30 <HAL_Delay+0x2a>
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f008 ffa6 	bl	8009aa8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000b64:	f008 ff6a 	bl	8009a3c <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b68:	bf00      	nop
}
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b74:	2100      	movs	r1, #0
 8000b76:	2004      	movs	r0, #4
 8000b78:	f009 f8b4 	bl	8009ce4 <UTIL_SEQ_SetTask>
  return;
 8000b7c:	bf00      	nop
}
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f009 f915 	bl	8009dbc <UTIL_SEQ_SetEvt>
  return;
 8000b92:	bf00      	nop
}
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f009 f92a 	bl	8009dfc <UTIL_SEQ_WaitEvt>
  return;
 8000ba8:	bf00      	nop
}
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LL_EXTI_EnableIT_0_31>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000bbe:	4905      	ldr	r1, [pc, #20]	@ (8000bd4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	58000800 	.word	0x58000800

08000bd8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4904      	ldr	r1, [pc, #16]	@ (8000bf8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]

}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	58000800 	.word	0x58000800

08000bfc <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <ReadRtcSsrValue+0x3c>)
 8000c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <ReadRtcSsrValue+0x3c>)
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000c12:	e005      	b.n	8000c20 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <ReadRtcSsrValue+0x3c>)
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d1f5      	bne.n	8000c14 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000c28:	683b      	ldr	r3, [r7, #0]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40002800 	.word	0x40002800

08000c3c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000c4c:	79ba      	ldrb	r2, [r7, #6]
 8000c4e:	491d      	ldr	r1, [pc, #116]	@ (8000cc4 <LinkTimerAfter+0x88>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	3315      	adds	r3, #21
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d009      	beq.n	8000c7a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	4916      	ldr	r1, [pc, #88]	@ (8000cc4 <LinkTimerAfter+0x88>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	3314      	adds	r3, #20
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	4911      	ldr	r1, [pc, #68]	@ (8000cc4 <LinkTimerAfter+0x88>)
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	440b      	add	r3, r1
 8000c88:	3315      	adds	r3, #21
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <LinkTimerAfter+0x88>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3314      	adds	r3, #20
 8000c9e:	79ba      	ldrb	r2, [r7, #6]
 8000ca0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	4907      	ldr	r1, [pc, #28]	@ (8000cc4 <LinkTimerAfter+0x88>)
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3315      	adds	r3, #21
 8000cb2:	79fa      	ldrb	r2, [r7, #7]
 8000cb4:	701a      	strb	r2, [r3, #0]

  return;
 8000cb6:	bf00      	nop
}
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200000b8 	.word	0x200000b8

08000cc8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000cd8:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <LinkTimerBefore+0xb8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d032      	beq.n	8000d4a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000ce4:	79ba      	ldrb	r2, [r7, #6]
 8000ce6:	4927      	ldr	r1, [pc, #156]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3314      	adds	r3, #20
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	4922      	ldr	r1, [pc, #136]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	3315      	adds	r3, #21
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	491d      	ldr	r1, [pc, #116]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3315      	adds	r3, #21
 8000d1c:	79ba      	ldrb	r2, [r7, #6]
 8000d1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	4918      	ldr	r1, [pc, #96]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3314      	adds	r3, #20
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d34:	79ba      	ldrb	r2, [r7, #6]
 8000d36:	4913      	ldr	r1, [pc, #76]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	3314      	adds	r3, #20
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000d48:	e014      	b.n	8000d74 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	3315      	adds	r3, #21
 8000d5a:	79ba      	ldrb	r2, [r7, #6]
 8000d5c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d5e:	79ba      	ldrb	r2, [r7, #6]
 8000d60:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <LinkTimerBefore+0xbc>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3314      	adds	r3, #20
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	701a      	strb	r2, [r3, #0]
  return;
 8000d72:	bf00      	nop
}
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000148 	.word	0x20000148
 8000d84:	200000b8 	.word	0x200000b8

08000d88 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d92:	4b4e      	ldr	r3, [pc, #312]	@ (8000ecc <linkTimer+0x144>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d118      	bne.n	8000dce <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ecc <linkTimer+0x144>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed0 <linkTimer+0x148>)
 8000da4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000da6:	4a49      	ldr	r2, [pc, #292]	@ (8000ecc <linkTimer+0x144>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	4949      	ldr	r1, [pc, #292]	@ (8000ed4 <linkTimer+0x14c>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	440b      	add	r3, r1
 8000dba:	3315      	adds	r3, #21
 8000dbc:	2206      	movs	r2, #6
 8000dbe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dc0:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <linkTimer+0x150>)
 8000dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	81fb      	strh	r3, [r7, #14]
 8000dcc:	e078      	b.n	8000ec0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000dce:	f000 f909 	bl	8000fe4 <ReturnTimeElapsed>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	493e      	ldr	r1, [pc, #248]	@ (8000ed4 <linkTimer+0x14c>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
 8000de4:	3308      	adds	r3, #8
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	4419      	add	r1, r3
 8000dee:	4839      	ldr	r0, [pc, #228]	@ (8000ed4 <linkTimer+0x14c>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4403      	add	r3, r0
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	4934      	ldr	r1, [pc, #208]	@ (8000ed4 <linkTimer+0x14c>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <linkTimer+0x144>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed4 <linkTimer+0x14c>)
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	440b      	add	r3, r1
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	3308      	adds	r3, #8
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d337      	bcc.n	8000ea0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <linkTimer+0x144>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e36:	7b7a      	ldrb	r2, [r7, #13]
 8000e38:	4926      	ldr	r1, [pc, #152]	@ (8000ed4 <linkTimer+0x14c>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3315      	adds	r3, #21
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e4a:	e013      	b.n	8000e74 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e4c:	7b7a      	ldrb	r2, [r7, #13]
 8000e4e:	4921      	ldr	r1, [pc, #132]	@ (8000ed4 <linkTimer+0x14c>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3315      	adds	r3, #21
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e60:	7b7a      	ldrb	r2, [r7, #13]
 8000e62:	491c      	ldr	r1, [pc, #112]	@ (8000ed4 <linkTimer+0x14c>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3315      	adds	r3, #21
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e74:	7b3b      	ldrb	r3, [r7, #12]
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d00b      	beq.n	8000e92 <linkTimer+0x10a>
 8000e7a:	7b3a      	ldrb	r2, [r7, #12]
 8000e7c:	4915      	ldr	r1, [pc, #84]	@ (8000ed4 <linkTimer+0x14c>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	440b      	add	r3, r1
 8000e88:	3308      	adds	r3, #8
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d2dc      	bcs.n	8000e4c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000e92:	7b7a      	ldrb	r2, [r7, #13]
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fecf 	bl	8000c3c <LinkTimerAfter>
 8000e9e:	e00f      	b.n	8000ec0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <linkTimer+0x144>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff0c 	bl	8000cc8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <linkTimer+0x144>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <linkTimer+0x148>)
 8000eb8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <linkTimer+0x144>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000148 	.word	0x20000148
 8000ed0:	20000149 	.word	0x20000149
 8000ed4:	200000b8 	.word	0x200000b8
 8000ed8:	2000014c 	.word	0x2000014c

08000edc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000eec:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <UnlinkTimer+0xf8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d111      	bne.n	8000f1c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ef8:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <UnlinkTimer+0xf8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <UnlinkTimer+0xfc>)
 8000f00:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	4935      	ldr	r1, [pc, #212]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3315      	adds	r3, #21
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <UnlinkTimer+0xf8>)
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	e03e      	b.n	8000f9a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	492f      	ldr	r1, [pc, #188]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3314      	adds	r3, #20
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	492a      	ldr	r1, [pc, #168]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3315      	adds	r3, #21
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000f44:	79f9      	ldrb	r1, [r7, #7]
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	4824      	ldr	r0, [pc, #144]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	440b      	add	r3, r1
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4403      	add	r3, r0
 8000f54:	3315      	adds	r3, #21
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	4920      	ldr	r1, [pc, #128]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	440b      	add	r3, r1
 8000f66:	3315      	adds	r3, #21
 8000f68:	4602      	mov	r2, r0
 8000f6a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d013      	beq.n	8000f9a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000f72:	79f9      	ldrb	r1, [r7, #7]
 8000f74:	7bba      	ldrb	r2, [r7, #14]
 8000f76:	4819      	ldr	r0, [pc, #100]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f78:	460b      	mov	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	440b      	add	r3, r1
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4403      	add	r3, r0
 8000f82:	3314      	adds	r3, #20
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2d8      	uxtb	r0, r3
 8000f88:	4914      	ldr	r1, [pc, #80]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	3314      	adds	r3, #20
 8000f96:	4602      	mov	r2, r0
 8000f98:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	490f      	ldr	r1, [pc, #60]	@ (8000fdc <UnlinkTimer+0x100>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	440b      	add	r3, r1
 8000fa8:	330c      	adds	r3, #12
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <UnlinkTimer+0xf8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d107      	bne.n	8000fc8 <UnlinkTimer+0xec>
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d104      	bne.n	8000fc8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <UnlinkTimer+0x104>)
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
}
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000148 	.word	0x20000148
 8000fd8:	20000149 	.word	0x20000149
 8000fdc:	200000b8 	.word	0x200000b8
 8000fe0:	2000014c 	.word	0x2000014c

08000fe4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <ReturnTimeElapsed+0x70>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff2:	d026      	beq.n	8001042 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ff4:	f7ff fe02 	bl	8000bfc <ReadRtcSsrValue>
 8000ff8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <ReturnTimeElapsed+0x70>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d805      	bhi.n	8001010 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <ReturnTimeElapsed+0x70>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e00a      	b.n	8001026 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <ReturnTimeElapsed+0x74>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <ReturnTimeElapsed+0x70>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <ReturnTimeElapsed+0x78>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <ReturnTimeElapsed+0x7c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	40d3      	lsrs	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	e001      	b.n	8001046 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	b29b      	uxth	r3, r3
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000014c 	.word	0x2000014c
 8001058:	20000154 	.word	0x20000154
 800105c:	20000152 	.word	0x20000152
 8001060:	20000151 	.word	0x20000151

08001064 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d108      	bne.n	8001086 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001074:	f7ff fdc2 	bl	8000bfc <ReadRtcSsrValue>
 8001078:	4603      	mov	r3, r0
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <RestartWakeupCounter+0x9c>)
 800107c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800107e:	2003      	movs	r0, #3
 8001080:	f002 f8a3 	bl	80031ca <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001084:	e039      	b.n	80010fa <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d803      	bhi.n	8001094 <RestartWakeupCounter+0x30>
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <RestartWakeupCounter+0xa0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d002      	beq.n	800109a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	3b01      	subs	r3, #1
 8001098:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800109a:	bf00      	nop
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <RestartWakeupCounter+0xa4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f8      	beq.n	800109c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <RestartWakeupCounter+0xa4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <RestartWakeupCounter+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80010ba:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <RestartWakeupCounter+0xa8>)
 80010be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010c2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80010c4:	2003      	movs	r0, #3
 80010c6:	f002 f88e 	bl	80031e6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <RestartWakeupCounter+0xac>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	88fa      	ldrh	r2, [r7, #6]
 80010d4:	490e      	ldr	r1, [pc, #56]	@ (8001110 <RestartWakeupCounter+0xac>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010da:	f7ff fd8f 	bl	8000bfc <ReadRtcSsrValue>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <RestartWakeupCounter+0x9c>)
 80010e2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <RestartWakeupCounter+0xa4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <RestartWakeupCounter+0xa4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80010f2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80010f4:	f3af 8000 	nop.w
  return ;
 80010f8:	bf00      	nop
}
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000014c 	.word	0x2000014c
 8001104:	20000151 	.word	0x20000151
 8001108:	200001cc 	.word	0x200001cc
 800110c:	58000800 	.word	0x58000800
 8001110:	40002800 	.word	0x40002800

08001114 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800111a:	4b45      	ldr	r3, [pc, #276]	@ (8001230 <RescheduleTimerList+0x11c>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001126:	d107      	bne.n	8001138 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001128:	bf00      	nop
 800112a:	4b42      	ldr	r3, [pc, #264]	@ (8001234 <RescheduleTimerList+0x120>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f8      	bne.n	800112a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001138:	4b3e      	ldr	r3, [pc, #248]	@ (8001234 <RescheduleTimerList+0x120>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <RescheduleTimerList+0x120>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001146:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001148:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <RescheduleTimerList+0x124>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	493a      	ldr	r1, [pc, #232]	@ (800123c <RescheduleTimerList+0x128>)
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	3308      	adds	r3, #8
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001162:	f7ff ff3f 	bl	8000fe4 <ReturnTimeElapsed>
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	429a      	cmp	r2, r3
 8001170:	d205      	bcs.n	800117e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <RescheduleTimerList+0x12c>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e04d      	b.n	800121a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	4a30      	ldr	r2, [pc, #192]	@ (8001244 <RescheduleTimerList+0x130>)
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	b292      	uxth	r2, r2
 8001186:	4413      	add	r3, r2
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4293      	cmp	r3, r2
 800118e:	d906      	bls.n	800119e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <RescheduleTimerList+0x130>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001196:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <RescheduleTimerList+0x12c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e03d      	b.n	800121a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <RescheduleTimerList+0x12c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ae:	e034      	b.n	800121a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	4922      	ldr	r1, [pc, #136]	@ (800123c <RescheduleTimerList+0x128>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	3308      	adds	r3, #8
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d20a      	bcs.n	80011de <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	491c      	ldr	r1, [pc, #112]	@ (800123c <RescheduleTimerList+0x128>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	3308      	adds	r3, #8
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e013      	b.n	8001206 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	4916      	ldr	r1, [pc, #88]	@ (800123c <RescheduleTimerList+0x128>)
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	3308      	adds	r3, #8
 80011ee:	6819      	ldr	r1, [r3, #0]
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	1ac9      	subs	r1, r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	@ (800123c <RescheduleTimerList+0x128>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4403      	add	r3, r0
 8001202:	3308      	adds	r3, #8
 8001204:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <RescheduleTimerList+0x128>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3315      	adds	r3, #21
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b06      	cmp	r3, #6
 800121e:	d1c7      	bne.n	80011b0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001220:	89bb      	ldrh	r3, [r7, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff1e 	bl	8001064 <RestartWakeupCounter>

  return ;
 8001228:	bf00      	nop
}
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40002800 	.word	0x40002800
 8001234:	200001cc 	.word	0x200001cc
 8001238:	20000148 	.word	0x20000148
 800123c:	200000b8 	.word	0x200000b8
 8001240:	20000150 	.word	0x20000150
 8001244:	20000156 	.word	0x20000156

08001248 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800124e:	f3ef 8310 	mrs	r3, PRIMASK
 8001252:	617b      	str	r3, [r7, #20]
  return(result);
 8001254:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800125c:	4b59      	ldr	r3, [pc, #356]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	22ca      	movs	r2, #202	@ 0xca
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
 8001264:	4b57      	ldr	r3, [pc, #348]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2253      	movs	r2, #83	@ 0x53
 800126a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800126c:	4b55      	ldr	r3, [pc, #340]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b54      	ldr	r3, [pc, #336]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800127a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800127c:	4b52      	ldr	r3, [pc, #328]	@ (80013c8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001284:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001288:	4950      	ldr	r1, [pc, #320]	@ (80013cc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	330c      	adds	r3, #12
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d16e      	bne.n	800137c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800129e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80012a2:	494a      	ldr	r1, [pc, #296]	@ (80013cc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80012b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80012b6:	4945      	ldr	r1, [pc, #276]	@ (80013cc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	3310      	adds	r3, #16
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80012c8:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d04c      	beq.n	800136c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80012d2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80012d6:	493d      	ldr	r1, [pc, #244]	@ (80013cc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	330d      	adds	r3, #13
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d124      	bne.n	8001336 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80012ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fdf2 	bl	8000edc <UnlinkTimer>
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f383 8810 	msr	PRIMASK, r3
}
 8001302:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001304:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001308:	4930      	ldr	r1, [pc, #192]	@ (80013cc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	3304      	adds	r3, #4
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fa32 	bl	8001788 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	22ca      	movs	r2, #202	@ 0xca
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2253      	movs	r2, #83	@ 0x53
 8001332:	625a      	str	r2, [r3, #36]	@ 0x24
 8001334:	e012      	b.n	800135c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f383 8810 	msr	PRIMASK, r3
}
 8001340:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f99a 	bl	8001680 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	22ca      	movs	r2, #202	@ 0xca
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2253      	movs	r2, #83	@ 0x53
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800135c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	4619      	mov	r1, r3
 8001364:	69b8      	ldr	r0, [r7, #24]
 8001366:	f000 fa95 	bl	8001894 <HW_TS_RTC_Int_AppNot>
 800136a:	e022      	b.n	80013b2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800136c:	f7ff fed2 	bl	8001114 <RescheduleTimerList>
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f383 8810 	msr	PRIMASK, r3
}
 800137a:	e01a      	b.n	80013b2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800137c:	bf00      	nop
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f8      	beq.n	800137e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800139c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f383 8810 	msr	PRIMASK, r3
}
 80013b0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	22ff      	movs	r2, #255	@ 0xff
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001cc 	.word	0x200001cc
 80013c8:	20000148 	.word	0x20000148
 80013cc:	200000b8 	.word	0x200000b8
 80013d0:	20000150 	.word	0x20000150
 80013d4:	58000800 	.word	0x58000800

080013d8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001560 <HW_TS_Init+0x188>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	22ca      	movs	r2, #202	@ 0xca
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80013ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001560 <HW_TS_Init+0x188>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2253      	movs	r2, #83	@ 0x53
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80013f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <HW_TS_Init+0x18c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001564 <HW_TS_Init+0x18c>)
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001400:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HW_TS_Init+0x18c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f1c3 0304 	rsb	r3, r3, #4
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b55      	ldr	r3, [pc, #340]	@ (8001568 <HW_TS_Init+0x190>)
 8001414:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001416:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <HW_TS_Init+0x18c>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800141e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001422:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	fa92 f2a2 	rbit	r2, r2
 800142a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	2a00      	cmp	r2, #0
 8001434:	d101      	bne.n	800143a <HW_TS_Init+0x62>
  {
    return 32U;
 8001436:	2220      	movs	r2, #32
 8001438:	e003      	b.n	8001442 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	fab2 f282 	clz	r2, r2
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	40d3      	lsrs	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b48      	ldr	r3, [pc, #288]	@ (800156c <HW_TS_Init+0x194>)
 800144c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800144e:	4b45      	ldr	r3, [pc, #276]	@ (8001564 <HW_TS_Init+0x18c>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001458:	b29b      	uxth	r3, r3
 800145a:	3301      	adds	r3, #1
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <HW_TS_Init+0x198>)
 8001460:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001462:	4b43      	ldr	r3, [pc, #268]	@ (8001570 <HW_TS_Init+0x198>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	4a40      	ldr	r2, [pc, #256]	@ (800156c <HW_TS_Init+0x194>)
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001474:	4a3c      	ldr	r2, [pc, #240]	@ (8001568 <HW_TS_Init+0x190>)
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	40d3      	lsrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001482:	4293      	cmp	r3, r2
 8001484:	d904      	bls.n	8001490 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <HW_TS_Init+0x19c>)
 8001488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148c:	801a      	strh	r2, [r3, #0]
 800148e:	e003      	b.n	8001498 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <HW_TS_Init+0x19c>)
 8001496:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001498:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800149c:	f7ff fb9c 	bl	8000bd8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014a0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80014a4:	f7ff fb84 	bl	8000bb0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d13d      	bne.n	800152a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <HW_TS_Init+0x1a0>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014b4:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HW_TS_Init+0x1a4>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014bc:	2300      	movs	r3, #0
 80014be:	77fb      	strb	r3, [r7, #31]
 80014c0:	e00c      	b.n	80014dc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80014c2:	7ffa      	ldrb	r2, [r7, #31]
 80014c4:	492e      	ldr	r1, [pc, #184]	@ (8001580 <HW_TS_Init+0x1a8>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	330c      	adds	r3, #12
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	3301      	adds	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d9ef      	bls.n	80014c2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80014e2:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <HW_TS_Init+0x1ac>)
 80014e4:	2206      	movs	r2, #6
 80014e6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HW_TS_Init+0x188>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HW_TS_Init+0x188>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014f6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HW_TS_Init+0x188>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HW_TS_Init+0x188>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001508:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <HW_TS_Init+0x1b0>)
 800150c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001510:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001512:	2003      	movs	r0, #3
 8001514:	f001 fe67 	bl	80031e6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HW_TS_Init+0x188>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HW_TS_Init+0x188>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e009      	b.n	800153e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <HW_TS_Init+0x188>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001538:	2003      	movs	r0, #3
 800153a:	f001 fe46 	bl	80031ca <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <HW_TS_Init+0x188>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	22ff      	movs	r2, #255	@ 0xff
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001546:	2200      	movs	r2, #0
 8001548:	2103      	movs	r1, #3
 800154a:	2003      	movs	r0, #3
 800154c:	f001 fdfb 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001550:	2003      	movs	r0, #3
 8001552:	f001 fe12 	bl	800317a <HAL_NVIC_EnableIRQ>

  return;
 8001556:	bf00      	nop
}
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001cc 	.word	0x200001cc
 8001564:	40002800 	.word	0x40002800
 8001568:	20000151 	.word	0x20000151
 800156c:	20000152 	.word	0x20000152
 8001570:	20000154 	.word	0x20000154
 8001574:	20000156 	.word	0x20000156
 8001578:	20000150 	.word	0x20000150
 800157c:	2000014c 	.word	0x2000014c
 8001580:	200000b8 	.word	0x200000b8
 8001584:	20000148 	.word	0x20000148
 8001588:	58000800 	.word	0x58000800

0800158c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800158c:	b480      	push	{r7}
 800158e:	b08b      	sub	sp, #44	@ 0x2c
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015a2:	f3ef 8310 	mrs	r3, PRIMASK
 80015a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80015a8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80015b0:	e004      	b.n	80015bc <HW_TS_Create+0x30>
  {
    loop++;
 80015b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015b6:	3301      	adds	r3, #1
 80015b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80015bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d80c      	bhi.n	80015de <HW_TS_Create+0x52>
 80015c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015c8:	492c      	ldr	r1, [pc, #176]	@ (800167c <HW_TS_Create+0xf0>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	330c      	adds	r3, #12
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1e9      	bne.n	80015b2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d038      	beq.n	8001658 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80015e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015ea:	4924      	ldr	r1, [pc, #144]	@ (800167c <HW_TS_Create+0xf0>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	330c      	adds	r3, #12
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f383 8810 	msr	PRIMASK, r3
}
 8001606:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001608:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800160c:	491b      	ldr	r1, [pc, #108]	@ (800167c <HW_TS_Create+0xf0>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	3310      	adds	r3, #16
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800161e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001622:	4916      	ldr	r1, [pc, #88]	@ (800167c <HW_TS_Create+0xf0>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	330d      	adds	r3, #13
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001634:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001638:	4910      	ldr	r1, [pc, #64]	@ (800167c <HW_TS_Create+0xf0>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800164e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001656:	e008      	b.n	800166a <HW_TS_Create+0xde>
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f383 8810 	msr	PRIMASK, r3
}
 8001662:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001664:	2301      	movs	r3, #1
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800166a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800166e:	4618      	mov	r0, r3
 8001670:	372c      	adds	r7, #44	@ 0x2c
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200000b8 	.word	0x200000b8

08001680 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800168a:	f3ef 8310 	mrs	r3, PRIMASK
 800168e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001690:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001692:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001698:	2003      	movs	r0, #3
 800169a:	f001 fd7c 	bl	8003196 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HW_TS_Stop+0xf0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	22ca      	movs	r2, #202	@ 0xca
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80016a6:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <HW_TS_Stop+0xf0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2253      	movs	r2, #83	@ 0x53
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4930      	ldr	r1, [pc, #192]	@ (8001774 <HW_TS_Stop+0xf4>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	330c      	adds	r3, #12
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d142      	bne.n	800174c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fc06 	bl	8000edc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80016d0:	4b29      	ldr	r3, [pc, #164]	@ (8001778 <HW_TS_Stop+0xf8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d12f      	bne.n	800173c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <HW_TS_Stop+0xfc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e8:	d107      	bne.n	80016fa <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80016ea:	bf00      	nop
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HW_TS_Stop+0xf0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f8      	bne.n	80016ec <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HW_TS_Stop+0xf0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HW_TS_Stop+0xf0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001708:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800170a:	bf00      	nop
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HW_TS_Stop+0xf0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f8      	beq.n	800170c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HW_TS_Stop+0xf0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <HW_TS_Stop+0xf0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800172a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <HW_TS_Stop+0x100>)
 800172e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001732:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001734:	2003      	movs	r0, #3
 8001736:	f001 fd56 	bl	80031e6 <HAL_NVIC_ClearPendingIRQ>
 800173a:	e007      	b.n	800174c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HW_TS_Stop+0x104>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	7cfa      	ldrb	r2, [r7, #19]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001748:	f7ff fce4 	bl	8001114 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HW_TS_Stop+0xf0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	22ff      	movs	r2, #255	@ 0xff
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001754:	2003      	movs	r0, #3
 8001756:	f001 fd10 	bl	800317a <HAL_NVIC_EnableIRQ>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f383 8810 	msr	PRIMASK, r3
}
 8001764:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001766:	bf00      	nop
}
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001cc 	.word	0x200001cc
 8001774:	200000b8 	.word	0x200000b8
 8001778:	20000148 	.word	0x20000148
 800177c:	40002800 	.word	0x40002800
 8001780:	58000800 	.word	0x58000800
 8001784:	20000149 	.word	0x20000149

08001788 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	493b      	ldr	r1, [pc, #236]	@ (8001884 <HW_TS_Start+0xfc>)
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	330c      	adds	r3, #12
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d103      	bne.n	80017b4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff66 	bl	8001680 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017b4:	f3ef 8310 	mrs	r3, PRIMASK
 80017b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80017ba:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017be:	b672      	cpsid	i
}
 80017c0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017c2:	2003      	movs	r0, #3
 80017c4:	f001 fce7 	bl	8003196 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80017c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <HW_TS_Start+0x100>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	22ca      	movs	r2, #202	@ 0xca
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <HW_TS_Start+0x100>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2253      	movs	r2, #83	@ 0x53
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	492a      	ldr	r1, [pc, #168]	@ (8001884 <HW_TS_Start+0xfc>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	330c      	adds	r3, #12
 80017e8:	2202      	movs	r2, #2
 80017ea:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	4925      	ldr	r1, [pc, #148]	@ (8001884 <HW_TS_Start+0xfc>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	3308      	adds	r3, #8
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001800:	79fa      	ldrb	r2, [r7, #7]
 8001802:	4920      	ldr	r1, [pc, #128]	@ (8001884 <HW_TS_Start+0xfc>)
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3304      	adds	r3, #4
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fab6 	bl	8000d88 <linkTimer>
 800181c:	4603      	mov	r3, r0
 800181e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <HW_TS_Start+0x104>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <HW_TS_Start+0x108>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	7c7a      	ldrb	r2, [r7, #17]
 800182e:	429a      	cmp	r2, r3
 8001830:	d002      	beq.n	8001838 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001832:	f7ff fc6f 	bl	8001114 <RescheduleTimerList>
 8001836:	e013      	b.n	8001860 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	4912      	ldr	r1, [pc, #72]	@ (8001884 <HW_TS_Start+0xfc>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3308      	adds	r3, #8
 8001848:	6819      	ldr	r1, [r3, #0]
 800184a:	8a7b      	ldrh	r3, [r7, #18]
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	1ac9      	subs	r1, r1, r3
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <HW_TS_Start+0xfc>)
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4403      	add	r3, r0
 800185c:	3308      	adds	r3, #8
 800185e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HW_TS_Start+0x100>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	22ff      	movs	r2, #255	@ 0xff
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001868:	2003      	movs	r0, #3
 800186a:	f001 fc86 	bl	800317a <HAL_NVIC_EnableIRQ>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f383 8810 	msr	PRIMASK, r3
}
 8001878:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800187a:	bf00      	nop
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200000b8 	.word	0x200000b8
 8001888:	200001cc 	.word	0x200001cc
 800188c:	20000148 	.word	0x20000148
 8001890:	20000149 	.word	0x20000149

08001894 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	460b      	mov	r3, r1
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4798      	blx	r3

  return;
 80018a6:	bf00      	nop
}
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <LL_RCC_LSE_SetDriveCapability>:
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018be:	f023 0218 	bic.w	r2, r3, #24
 80018c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_AHB2_GRP1_EnableClock>:
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4013      	ands	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001910:	f001 fa20 	bl	8002d54 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001914:	f7fe ff7c 	bl	8000810 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 faf8 	bl	8001f0c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800191c:	f000 fb42 	bl	8001fa4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001920:	f000 fb60 	bl	8001fe4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001924:	f000 fc16 	bl	8002154 <MX_GPIO_Init>
  MX_RTC_Init();
 8001928:	f000 fba6 	bl	8002078 <MX_RTC_Init>
  MX_SPI1_Init();
 800192c:	f000 fbd4 	bl	80020d8 <MX_SPI1_Init>
  MX_LPTIM1_Init();
 8001930:	f000 fb6c 	bl	800200c <MX_LPTIM1_Init>
  MX_RF_Init();
 8001934:	f000 fb98 	bl	8002068 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001938:	2064      	movs	r0, #100	@ 0x64
 800193a:	f7ff f8e4 	bl	8000b06 <HAL_Delay>
	TX_BUFFER[0] = reset_cmd;
 800193e:	4bb2      	ldr	r3, [pc, #712]	@ (8001c08 <main+0x2fc>)
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	4bb2      	ldr	r3, [pc, #712]	@ (8001c0c <main+0x300>)
 8001944:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2110      	movs	r1, #16
 800194a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194e:	f001 fdc1 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 1000);
 8001952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001956:	2201      	movs	r2, #1
 8001958:	49ac      	ldr	r1, [pc, #688]	@ (8001c0c <main+0x300>)
 800195a:	48ad      	ldr	r0, [pc, #692]	@ (8001c10 <main+0x304>)
 800195c:	f003 fe89 	bl	8005672 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	2110      	movs	r1, #16
 8001964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001968:	f001 fdb4 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	@ 0x64
 800196e:	f7ff f8ca 	bl	8000b06 <HAL_Delay>

	TX_BUFFER[0] = read_c1_cmd;
 8001972:	4ba8      	ldr	r3, [pc, #672]	@ (8001c14 <main+0x308>)
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	4ba5      	ldr	r3, [pc, #660]	@ (8001c0c <main+0x300>)
 8001978:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2110      	movs	r1, #16
 800197e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001982:	f001 fda7 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001986:	2364      	movs	r3, #100	@ 0x64
 8001988:	2201      	movs	r2, #1
 800198a:	49a0      	ldr	r1, [pc, #640]	@ (8001c0c <main+0x300>)
 800198c:	48a0      	ldr	r0, [pc, #640]	@ (8001c10 <main+0x304>)
 800198e:	f003 fe70 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001992:	2364      	movs	r3, #100	@ 0x64
 8001994:	2202      	movs	r2, #2
 8001996:	49a0      	ldr	r1, [pc, #640]	@ (8001c18 <main+0x30c>)
 8001998:	489d      	ldr	r0, [pc, #628]	@ (8001c10 <main+0x304>)
 800199a:	f003 ffe0 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2110      	movs	r1, #16
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a6:	f001 fd95 	bl	80034d4 <HAL_GPIO_WritePin>
	C1 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80019aa:	4b9b      	ldr	r3, [pc, #620]	@ (8001c18 <main+0x30c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	4b98      	ldr	r3, [pc, #608]	@ (8001c18 <main+0x30c>)
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b21b      	sxth	r3, r3
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b96      	ldr	r3, [pc, #600]	@ (8001c1c <main+0x310>)
 80019c2:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c2_cmd;
 80019c4:	4b96      	ldr	r3, [pc, #600]	@ (8001c20 <main+0x314>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b90      	ldr	r3, [pc, #576]	@ (8001c0c <main+0x300>)
 80019ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2110      	movs	r1, #16
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d4:	f001 fd7e 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80019d8:	2364      	movs	r3, #100	@ 0x64
 80019da:	2201      	movs	r2, #1
 80019dc:	498b      	ldr	r1, [pc, #556]	@ (8001c0c <main+0x300>)
 80019de:	488c      	ldr	r0, [pc, #560]	@ (8001c10 <main+0x304>)
 80019e0:	f003 fe47 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80019e4:	2364      	movs	r3, #100	@ 0x64
 80019e6:	2202      	movs	r2, #2
 80019e8:	498b      	ldr	r1, [pc, #556]	@ (8001c18 <main+0x30c>)
 80019ea:	4889      	ldr	r0, [pc, #548]	@ (8001c10 <main+0x304>)
 80019ec:	f003 ffb7 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2110      	movs	r1, #16
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f001 fd6c 	bl	80034d4 <HAL_GPIO_WritePin>
	C2 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80019fc:	4b86      	ldr	r3, [pc, #536]	@ (8001c18 <main+0x30c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	4b84      	ldr	r3, [pc, #528]	@ (8001c18 <main+0x30c>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b84      	ldr	r3, [pc, #528]	@ (8001c24 <main+0x318>)
 8001a14:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c3_cmd;
 8001a16:	4b84      	ldr	r3, [pc, #528]	@ (8001c28 <main+0x31c>)
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c0c <main+0x300>)
 8001a1c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2110      	movs	r1, #16
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a26:	f001 fd55 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001a2a:	2364      	movs	r3, #100	@ 0x64
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4977      	ldr	r1, [pc, #476]	@ (8001c0c <main+0x300>)
 8001a30:	4877      	ldr	r0, [pc, #476]	@ (8001c10 <main+0x304>)
 8001a32:	f003 fe1e 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001a36:	2364      	movs	r3, #100	@ 0x64
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4977      	ldr	r1, [pc, #476]	@ (8001c18 <main+0x30c>)
 8001a3c:	4874      	ldr	r0, [pc, #464]	@ (8001c10 <main+0x304>)
 8001a3e:	f003 ff8e 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	2110      	movs	r1, #16
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4a:	f001 fd43 	bl	80034d4 <HAL_GPIO_WritePin>
	C3 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001a4e:	4b72      	ldr	r3, [pc, #456]	@ (8001c18 <main+0x30c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b6f      	ldr	r3, [pc, #444]	@ (8001c18 <main+0x30c>)
 8001a5a:	785b      	ldrb	r3, [r3, #1]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b71      	ldr	r3, [pc, #452]	@ (8001c2c <main+0x320>)
 8001a66:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c4_cmd;
 8001a68:	4b71      	ldr	r3, [pc, #452]	@ (8001c30 <main+0x324>)
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b67      	ldr	r3, [pc, #412]	@ (8001c0c <main+0x300>)
 8001a6e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2110      	movs	r1, #16
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a78:	f001 fd2c 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001a7c:	2364      	movs	r3, #100	@ 0x64
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4962      	ldr	r1, [pc, #392]	@ (8001c0c <main+0x300>)
 8001a82:	4863      	ldr	r0, [pc, #396]	@ (8001c10 <main+0x304>)
 8001a84:	f003 fdf5 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001a88:	2364      	movs	r3, #100	@ 0x64
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4962      	ldr	r1, [pc, #392]	@ (8001c18 <main+0x30c>)
 8001a8e:	4860      	ldr	r0, [pc, #384]	@ (8001c10 <main+0x304>)
 8001a90:	f003 ff65 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2110      	movs	r1, #16
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9c:	f001 fd1a 	bl	80034d4 <HAL_GPIO_WritePin>
	C4 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001aa0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c18 <main+0x30c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c18 <main+0x30c>)
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c34 <main+0x328>)
 8001ab8:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c5_cmd;
 8001aba:	4b5f      	ldr	r3, [pc, #380]	@ (8001c38 <main+0x32c>)
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <main+0x300>)
 8001ac0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aca:	f001 fd03 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	494e      	ldr	r1, [pc, #312]	@ (8001c0c <main+0x300>)
 8001ad4:	484e      	ldr	r0, [pc, #312]	@ (8001c10 <main+0x304>)
 8001ad6:	f003 fdcc 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001ada:	2364      	movs	r3, #100	@ 0x64
 8001adc:	2202      	movs	r2, #2
 8001ade:	494e      	ldr	r1, [pc, #312]	@ (8001c18 <main+0x30c>)
 8001ae0:	484b      	ldr	r0, [pc, #300]	@ (8001c10 <main+0x304>)
 8001ae2:	f003 ff3c 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2110      	movs	r1, #16
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aee:	f001 fcf1 	bl	80034d4 <HAL_GPIO_WritePin>
	C5 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001af2:	4b49      	ldr	r3, [pc, #292]	@ (8001c18 <main+0x30c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b46      	ldr	r3, [pc, #280]	@ (8001c18 <main+0x30c>)
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b4c      	ldr	r3, [pc, #304]	@ (8001c3c <main+0x330>)
 8001b0a:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c6_cmd;
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c40 <main+0x334>)
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	4b3e      	ldr	r3, [pc, #248]	@ (8001c0c <main+0x300>)
 8001b12:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2110      	movs	r1, #16
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1c:	f001 fcda 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001b20:	2364      	movs	r3, #100	@ 0x64
 8001b22:	2201      	movs	r2, #1
 8001b24:	4939      	ldr	r1, [pc, #228]	@ (8001c0c <main+0x300>)
 8001b26:	483a      	ldr	r0, [pc, #232]	@ (8001c10 <main+0x304>)
 8001b28:	f003 fda3 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001b2c:	2364      	movs	r3, #100	@ 0x64
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4939      	ldr	r1, [pc, #228]	@ (8001c18 <main+0x30c>)
 8001b32:	4837      	ldr	r0, [pc, #220]	@ (8001c10 <main+0x304>)
 8001b34:	f003 ff13 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b40:	f001 fcc8 	bl	80034d4 <HAL_GPIO_WritePin>
	C6 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001b44:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <main+0x30c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <main+0x30c>)
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <main+0x338>)
 8001b5c:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c7_cmd;
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <main+0x33c>)
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <main+0x300>)
 8001b64:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2110      	movs	r1, #16
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6e:	f001 fcb1 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001b72:	2364      	movs	r3, #100	@ 0x64
 8001b74:	2201      	movs	r2, #1
 8001b76:	4925      	ldr	r1, [pc, #148]	@ (8001c0c <main+0x300>)
 8001b78:	4825      	ldr	r0, [pc, #148]	@ (8001c10 <main+0x304>)
 8001b7a:	f003 fd7a 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001b7e:	2364      	movs	r3, #100	@ 0x64
 8001b80:	2202      	movs	r2, #2
 8001b82:	4925      	ldr	r1, [pc, #148]	@ (8001c18 <main+0x30c>)
 8001b84:	4822      	ldr	r0, [pc, #136]	@ (8001c10 <main+0x304>)
 8001b86:	f003 feea 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b92:	f001 fc9f 	bl	80034d4 <HAL_GPIO_WritePin>
	C7 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <main+0x30c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <main+0x30c>)
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <main+0x340>)
 8001bae:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c8_cmd;
 8001bb0:	4b27      	ldr	r3, [pc, #156]	@ (8001c50 <main+0x344>)
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <main+0x300>)
 8001bb6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2110      	movs	r1, #16
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc0:	f001 fc88 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001bc4:	2364      	movs	r3, #100	@ 0x64
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4910      	ldr	r1, [pc, #64]	@ (8001c0c <main+0x300>)
 8001bca:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <main+0x304>)
 8001bcc:	f003 fd51 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001bd0:	2364      	movs	r3, #100	@ 0x64
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4910      	ldr	r1, [pc, #64]	@ (8001c18 <main+0x30c>)
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <main+0x304>)
 8001bd8:	f003 fec1 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2110      	movs	r1, #16
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be4:	f001 fc76 	bl	80034d4 <HAL_GPIO_WritePin>
	C8 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <main+0x30c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <main+0x30c>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <main+0x348>)
 8001c00:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c9_cmd;
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <main+0x34c>)
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	e029      	b.n	8001c5c <main+0x350>
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000280 	.word	0x20000280
 8001c10:	200001f0 	.word	0x200001f0
 8001c14:	20000009 	.word	0x20000009
 8001c18:	20000284 	.word	0x20000284
 8001c1c:	20000254 	.word	0x20000254
 8001c20:	2000000a 	.word	0x2000000a
 8001c24:	20000256 	.word	0x20000256
 8001c28:	2000000b 	.word	0x2000000b
 8001c2c:	20000258 	.word	0x20000258
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	2000025a 	.word	0x2000025a
 8001c38:	2000000d 	.word	0x2000000d
 8001c3c:	2000025c 	.word	0x2000025c
 8001c40:	2000000e 	.word	0x2000000e
 8001c44:	2000025e 	.word	0x2000025e
 8001c48:	2000000f 	.word	0x2000000f
 8001c4c:	20000260 	.word	0x20000260
 8001c50:	20000010 	.word	0x20000010
 8001c54:	20000262 	.word	0x20000262
 8001c58:	20000011 	.word	0x20000011
 8001c5c:	4b92      	ldr	r3, [pc, #584]	@ (8001ea8 <main+0x59c>)
 8001c5e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2110      	movs	r1, #16
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c68:	f001 fc34 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001c6c:	2364      	movs	r3, #100	@ 0x64
 8001c6e:	2201      	movs	r2, #1
 8001c70:	498d      	ldr	r1, [pc, #564]	@ (8001ea8 <main+0x59c>)
 8001c72:	488e      	ldr	r0, [pc, #568]	@ (8001eac <main+0x5a0>)
 8001c74:	f003 fcfd 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001c78:	2364      	movs	r3, #100	@ 0x64
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	498c      	ldr	r1, [pc, #560]	@ (8001eb0 <main+0x5a4>)
 8001c7e:	488b      	ldr	r0, [pc, #556]	@ (8001eac <main+0x5a0>)
 8001c80:	f003 fe6d 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2110      	movs	r1, #16
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8c:	f001 fc22 	bl	80034d4 <HAL_GPIO_WritePin>
	C9 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001c90:	4b87      	ldr	r3, [pc, #540]	@ (8001eb0 <main+0x5a4>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4b85      	ldr	r3, [pc, #532]	@ (8001eb0 <main+0x5a4>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b83      	ldr	r3, [pc, #524]	@ (8001eb4 <main+0x5a8>)
 8001ca8:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c10_cmd;
 8001caa:	4b83      	ldr	r3, [pc, #524]	@ (8001eb8 <main+0x5ac>)
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea8 <main+0x59c>)
 8001cb0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cba:	f001 fc0b 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001cbe:	2364      	movs	r3, #100	@ 0x64
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4979      	ldr	r1, [pc, #484]	@ (8001ea8 <main+0x59c>)
 8001cc4:	4879      	ldr	r0, [pc, #484]	@ (8001eac <main+0x5a0>)
 8001cc6:	f003 fcd4 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001cca:	2364      	movs	r3, #100	@ 0x64
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4978      	ldr	r1, [pc, #480]	@ (8001eb0 <main+0x5a4>)
 8001cd0:	4876      	ldr	r0, [pc, #472]	@ (8001eac <main+0x5a0>)
 8001cd2:	f003 fe44 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2110      	movs	r1, #16
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cde:	f001 fbf9 	bl	80034d4 <HAL_GPIO_WritePin>
	C10 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001ce2:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <main+0x5a4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	4b70      	ldr	r3, [pc, #448]	@ (8001eb0 <main+0x5a4>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b70      	ldr	r3, [pc, #448]	@ (8001ebc <main+0x5b0>)
 8001cfa:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = start_conversion_cmd;
 8001cfc:	4b70      	ldr	r3, [pc, #448]	@ (8001ec0 <main+0x5b4>)
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <main+0x59c>)
 8001d02:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2110      	movs	r1, #16
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0c:	f001 fbe2 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001d10:	2364      	movs	r3, #100	@ 0x64
 8001d12:	2201      	movs	r2, #1
 8001d14:	4964      	ldr	r1, [pc, #400]	@ (8001ea8 <main+0x59c>)
 8001d16:	4865      	ldr	r0, [pc, #404]	@ (8001eac <main+0x5a0>)
 8001d18:	f003 fcab 	bl	8005672 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2110      	movs	r1, #16
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d24:	f001 fbd6 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001d28:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d2c:	f7fe feeb 	bl	8000b06 <HAL_Delay>

	TX_BUFFER[0] = read_adc_cmd;
 8001d30:	4b64      	ldr	r3, [pc, #400]	@ (8001ec4 <main+0x5b8>)
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea8 <main+0x59c>)
 8001d36:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d40:	f001 fbc8 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001d44:	2364      	movs	r3, #100	@ 0x64
 8001d46:	2201      	movs	r2, #1
 8001d48:	4957      	ldr	r1, [pc, #348]	@ (8001ea8 <main+0x59c>)
 8001d4a:	4858      	ldr	r0, [pc, #352]	@ (8001eac <main+0x5a0>)
 8001d4c:	f003 fc91 	bl	8005672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, 100);
 8001d50:	2364      	movs	r3, #100	@ 0x64
 8001d52:	2206      	movs	r2, #6
 8001d54:	4956      	ldr	r1, [pc, #344]	@ (8001eb0 <main+0x5a4>)
 8001d56:	4855      	ldr	r0, [pc, #340]	@ (8001eac <main+0x5a0>)
 8001d58:	f003 fe01 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2110      	movs	r1, #16
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d64:	f001 fbb6 	bl	80034d4 <HAL_GPIO_WritePin>
	raw_temp = (RX_BUFFER[0] << 16) | (RX_BUFFER[1] << 8) | (RX_BUFFER[2]);
 8001d68:	4b51      	ldr	r3, [pc, #324]	@ (8001eb0 <main+0x5a4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	4b50      	ldr	r3, [pc, #320]	@ (8001eb0 <main+0x5a4>)
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	4313      	orrs	r3, r2
 8001d76:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb0 <main+0x5a4>)
 8001d78:	7892      	ldrb	r2, [r2, #2]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b52      	ldr	r3, [pc, #328]	@ (8001ec8 <main+0x5bc>)
 8001d80:	601a      	str	r2, [r3, #0]
	raw_pressure = (RX_BUFFER[3] << 16) | (RX_BUFFER[4] << 8) | (RX_BUFFER[5]);
 8001d82:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb0 <main+0x5a4>)
 8001d84:	78db      	ldrb	r3, [r3, #3]
 8001d86:	041a      	lsls	r2, r3, #16
 8001d88:	4b49      	ldr	r3, [pc, #292]	@ (8001eb0 <main+0x5a4>)
 8001d8a:	791b      	ldrb	r3, [r3, #4]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	4a47      	ldr	r2, [pc, #284]	@ (8001eb0 <main+0x5a4>)
 8001d92:	7952      	ldrb	r2, [r2, #5]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b4c      	ldr	r3, [pc, #304]	@ (8001ecc <main+0x5c0>)
 8001d9a:	601a      	str	r2, [r3, #0]
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 8001d9c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed0 <main+0x5c4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da8:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <main+0x5bc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001ed4 <main+0x5c8>
 8001dbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / (float) 34359738368)
 8001dc0:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <main+0x5cc>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ecc <main+0x5c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ddc:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8001edc <main+0x5d0>
 8001de0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001de4:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / (float) 64));
 8001de8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <main+0x5d4>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df4:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8001ee4 <main+0x5d8>
 8001df8:	eec6 7a86 	vdiv.f32	s15, s13, s12
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 8001dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e00:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <main+0x5dc>)
 8001e02:	edc3 7a00 	vstr	s15, [r3]
	offset = (float) C6 + (float) C7 * temperature / (float) 512;
 8001e06:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <main+0x5e0>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <main+0x5e4>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <main+0x5dc>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e28:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8001ef4 <main+0x5e8>
 8001e2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e34:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <main+0x5ec>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + (float) C9 * temperature / (float) 512;
 8001e3a:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <main+0x5f0>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <main+0x5a8>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e52:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <main+0x5dc>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e5c:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8001ef4 <main+0x5e8>
 8001e60:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <main+0x5f4>)
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
	pressure = (float) raw_pressure * sensitivity / (float) 4194304 - offset;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <main+0x5c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <main+0x5f4>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001f04 <main+0x5f8>
 8001e88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <main+0x5ec>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <main+0x5fc>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001e9c:	f7fe fcc6 	bl	800082c <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001ea0:	f7fe fe56 	bl	8000b50 <MX_APPE_Process>
 8001ea4:	e7fc      	b.n	8001ea0 <main+0x594>
 8001ea6:	bf00      	nop
 8001ea8:	20000280 	.word	0x20000280
 8001eac:	200001f0 	.word	0x200001f0
 8001eb0:	20000284 	.word	0x20000284
 8001eb4:	20000264 	.word	0x20000264
 8001eb8:	20000012 	.word	0x20000012
 8001ebc:	20000266 	.word	0x20000266
 8001ec0:	20000013 	.word	0x20000013
 8001ec4:	20000014 	.word	0x20000014
 8001ec8:	2000026c 	.word	0x2000026c
 8001ecc:	20000268 	.word	0x20000268
 8001ed0:	20000254 	.word	0x20000254
 8001ed4:	4e000000 	.word	0x4e000000
 8001ed8:	20000258 	.word	0x20000258
 8001edc:	51000000 	.word	0x51000000
 8001ee0:	20000256 	.word	0x20000256
 8001ee4:	42800000 	.word	0x42800000
 8001ee8:	20000270 	.word	0x20000270
 8001eec:	2000025e 	.word	0x2000025e
 8001ef0:	20000260 	.word	0x20000260
 8001ef4:	44000000 	.word	0x44000000
 8001ef8:	20000274 	.word	0x20000274
 8001efc:	20000262 	.word	0x20000262
 8001f00:	20000278 	.word	0x20000278
 8001f04:	4a800000 	.word	0x4a800000
 8001f08:	2000027c 	.word	0x2000027c

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b098      	sub	sp, #96	@ 0x60
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	2244      	movs	r2, #68	@ 0x44
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f007 ffec 	bl	8009ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	463b      	mov	r3, r7
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f32:	f001 fdd9 	bl	8003ae8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001f36:	2010      	movs	r0, #16
 8001f38:	f7ff fcb9 	bl	80018ae <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f50:	2340      	movs	r3, #64	@ 0x40
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 f94b 	bl	80041f8 <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001f68:	f000 f919 	bl	800219e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001f6c:	236f      	movs	r3, #111	@ 0x6f
 8001f6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f70:	2302      	movs	r3, #2
 8001f72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fc69 	bl	8004864 <HAL_RCC_ClockConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001f98:	f000 f901 	bl	800219e <Error_Handler>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3760      	adds	r7, #96	@ 0x60
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001faa:	463b      	mov	r3, r7
 8001fac:	2230      	movs	r2, #48	@ 0x30
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f007 ffa1 	bl	8009ef8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001fb6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001fbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 ffdf 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001fd8:	f000 f8e1 	bl	800219e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001fdc:	bf00      	nop
 8001fde:	3730      	adds	r7, #48	@ 0x30
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_IPCC_Init+0x20>)
 8001fea:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <MX_IPCC_Init+0x24>)
 8001fec:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <MX_IPCC_Init+0x20>)
 8001ff0:	f001 faac 	bl	800354c <HAL_IPCC_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001ffa:	f000 f8d0 	bl	800219e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000158 	.word	0x20000158
 8002008:	58000c00 	.word	0x58000c00

0800200c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 8002012:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <MX_LPTIM1_Init+0x58>)
 8002014:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 800201c:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 800201e:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8002022:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002024:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 8002026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800202a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 8002040:	2200      	movs	r2, #0
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <MX_LPTIM1_Init+0x54>)
 800204c:	f001 fb4e 	bl	80036ec <HAL_LPTIM_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002056:	f000 f8a2 	bl	800219e <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000194 	.word	0x20000194
 8002064:	40007c00 	.word	0x40007c00

08002068 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_RTC_Init+0x58>)
 800207e:	4a15      	ldr	r2, [pc, #84]	@ (80020d4 <MX_RTC_Init+0x5c>)
 8002080:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002082:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <MX_RTC_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_RTC_Init+0x58>)
 800208a:	220f      	movs	r2, #15
 800208c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <MX_RTC_Init+0x58>)
 8002090:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002094:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_RTC_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <MX_RTC_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <MX_RTC_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020a8:	4809      	ldr	r0, [pc, #36]	@ (80020d0 <MX_RTC_Init+0x58>)
 80020aa:	f003 f867 	bl	800517c <HAL_RTC_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80020b4:	f000 f873 	bl	800219e <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4804      	ldr	r0, [pc, #16]	@ (80020d0 <MX_RTC_Init+0x58>)
 80020be:	f003 f969 	bl	8005394 <HAL_RTCEx_SetWakeUpTimer_IT>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80020c8:	f000 f869 	bl	800219e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200001cc 	.word	0x200001cc
 80020d4:	40002800 	.word	0x40002800

080020d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <MX_SPI1_Init+0x74>)
 80020de:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <MX_SPI1_Init+0x78>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_SPI1_Init+0x74>)
 80020e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <MX_SPI1_Init+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_SPI1_Init+0x74>)
 80020f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_SPI1_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_SPI1_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <MX_SPI1_Init+0x74>)
 8002106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <MX_SPI1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <MX_SPI1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <MX_SPI1_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <MX_SPI1_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_SPI1_Init+0x74>)
 8002126:	2207      	movs	r2, #7
 8002128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <MX_SPI1_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <MX_SPI1_Init+0x74>)
 8002132:	2208      	movs	r2, #8
 8002134:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	@ (800214c <MX_SPI1_Init+0x74>)
 8002138:	f003 f9f8 	bl	800552c <HAL_SPI_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002142:	f000 f82c 	bl	800219e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001f0 	.word	0x200001f0
 8002150:	40013000 	.word	0x40013000

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff fbb6 	bl	80018da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2110      	movs	r1, #16
 8002172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002176:	f001 f9ad 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800217a:	2310      	movs	r3, #16
 800217c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002192:	f001 f837 	bl	8003204 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021a2:	b672      	cpsid	i
}
 80021a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021a6:	bf00      	nop
 80021a8:	e7fd      	b.n	80021a6 <Error_Handler+0x8>
	...

080021ac <LL_PWR_EnableSRAM2Retention>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ba:	6093      	str	r3, [r2, #8]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	58000400 	.word	0x58000400

080021cc <LL_EXTI_IsEnabledRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledRisingTrig_0_31(uint32_t ExtiLine)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RTSR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <LL_EXTI_IsEnabledRisingTrig_0_31+0x28>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d101      	bne.n	80021e6 <LL_EXTI_IsEnabledRisingTrig_0_31+0x1a>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_EXTI_IsEnabledRisingTrig_0_31+0x1c>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58000800 	.word	0x58000800

080021f8 <LL_EXTI_IsEnabledFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledFallingTrig_0_31(uint32_t ExtiLine)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FTSR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002200:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <LL_EXTI_IsEnabledFallingTrig_0_31+0x28>)
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d101      	bne.n	8002212 <LL_EXTI_IsEnabledFallingTrig_0_31+0x1a>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_EXTI_IsEnabledFallingTrig_0_31+0x1c>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	58000800 	.word	0x58000800

08002224 <LL_EXTI_GenerateSWI_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_GenerateSWI_0_31(uint32_t ExtiLine)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->SWIER1, ExtiLine);
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <LL_EXTI_GenerateSWI_0_31+0x20>)
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4904      	ldr	r1, [pc, #16]	@ (8002244 <LL_EXTI_GenerateSWI_0_31+0x20>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	58000800 	.word	0x58000800

08002248 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800225a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_SYSCFG_GetEXTISource>:
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 0x0000000FUL));
 8002278:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <LL_SYSCFG_GetEXTISource+0x54>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	3302      	adds	r3, #2
 8002282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	401a      	ands	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	60fb      	str	r3, [r7, #12]
  return result;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <LL_SYSCFG_GetEXTISource+0x38>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e003      	b.n	80022b0 <LL_SYSCFG_GetEXTISource+0x40>
  return __builtin_clz(value);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40010000 	.word	0x40010000

080022c8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	3220      	adds	r2, #32
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <LL_HSEM_1StepLock+0x2c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d001      	beq.n	80022e6 <LL_HSEM_1StepLock+0x1e>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_HSEM_1StepLock+0x20>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	80000400 	.word	0x80000400

080022f8 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <STBY_AppHwSave>:
/*******************************************************************************
 * This part may be updated by the user
 ******************************************************************************/

void STBY_AppHwSave(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
/* In this function HW parameters lost in standby can de saved.
   All RAM memory is in retention */
  /* USER CODE BEGIN STBY_AppHwSave_1 */

  /* USER CODE END STBY_AppHwSave_1 */
  return;
 8002322:	bf00      	nop
}
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <STBY_AppHwRestore>:

void STBY_AppHwRestore(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STBY_AppHwRestore_1 */

  /* USER CODE END STBY_AppHwRestore_1 */

  HAL_Init();
 8002330:	f000 fd10 	bl	8002d54 <HAL_Init>
  HAL_ResumeTick();
 8002334:	f000 fdb0 	bl	8002e98 <HAL_ResumeTick>
  /* In this user section add MX init functions present in main.c, except MX_RTC_Init() */
  /* USER CODE BEGIN STBY_AppHwRestore_2 */

  /* USER CODE END STBY_AppHwRestore_2 */

  STBY_TriggerIT();
 8002338:	f000 f858 	bl	80023ec <STBY_TriggerIT>

  return;
 800233c:	bf00      	nop
}
 800233e:	bd80      	pop	{r7, pc}

08002340 <STBY_SysHwSave>:
/*******************************************************************************
 * Do not update code from this limit.
 ******************************************************************************/

void STBY_SysHwSave(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  STBY_BackupIpccC1MR = READ_REG(IPCC->C1MR);
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <STBY_SysHwSave+0x20>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a06      	ldr	r2, [pc, #24]	@ (8002364 <STBY_SysHwSave+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
  STBY_BackupVTOR = SCB->VTOR;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <STBY_SysHwSave+0x28>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <STBY_SysHwSave+0x2c>)
 8002352:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN STBY_SysHwSave_1 */

  /* USER CODE END STBY_SysHwSave_1 */
  return;
 8002354:	bf00      	nop
}
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	58000c00 	.word	0x58000c00
 8002364:	2000028c 	.word	0x2000028c
 8002368:	e000ed00 	.word	0xe000ed00
 800236c:	20000290 	.word	0x20000290

08002370 <STBY_SysHwRestore>:

void STBY_SysHwRestore(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STBY_SysHwRestore_1 */

  /* USER CODE END STBY_SysHwRestore_1 */
  APPD_Init();
 8002374:	f7fd ff53 	bl	800021e <APPD_Init>

  Init_Smps();
 8002378:	f7fe fa68 	bl	800084c <Init_Smps>
  Init_Exti();
 800237c:	f7fe fa72 	bl	8000864 <Init_Exti>
  HAL_Init();
 8002380:	f000 fce8 	bl	8002d54 <HAL_Init>

  WRITE_REG(SCB->VTOR, STBY_BackupVTOR);
 8002384:	4a13      	ldr	r2, [pc, #76]	@ (80023d4 <STBY_SysHwRestore+0x64>)
 8002386:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <STBY_SysHwRestore+0x68>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6093      	str	r3, [r2, #8]

  HW_IPCC_Init();
 800238c:	f007 f9aa 	bl	80096e4 <HW_IPCC_Init>
  WRITE_REG(IPCC->C1MR, STBY_BackupIpccC1MR);
 8002390:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <STBY_SysHwRestore+0x6c>)
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <STBY_SysHwRestore+0x70>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6053      	str	r3, [r2, #4]

  if( !LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) )
 8002398:	2103      	movs	r1, #3
 800239a:	4812      	ldr	r0, [pc, #72]	@ (80023e4 <STBY_SysHwRestore+0x74>)
 800239c:	f7ff ff94 	bl	80022c8 <LL_HSEM_1StepLock>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <STBY_SysHwRestore+0x48>
  {
    LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80023a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80023aa:	f7ff ff4d 	bl	8002248 <LL_RCC_SetClkAfterWakeFromStop>
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 80023ae:	2200      	movs	r2, #0
 80023b0:	2103      	movs	r1, #3
 80023b2:	480c      	ldr	r0, [pc, #48]	@ (80023e4 <STBY_SysHwRestore+0x74>)
 80023b4:	f7ff ffa0 	bl	80022f8 <LL_HSEM_ReleaseLock>
  }
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_PWR_STANDBY_SEMID, 0 );
 80023b8:	2200      	movs	r2, #0
 80023ba:	210a      	movs	r1, #10
 80023bc:	4809      	ldr	r0, [pc, #36]	@ (80023e4 <STBY_SysHwRestore+0x74>)
 80023be:	f7ff ff9b 	bl	80022f8 <LL_HSEM_ReleaseLock>

  HW_TS_Init(hw_ts_InitMode_Limited, &hrtc);
 80023c2:	4909      	ldr	r1, [pc, #36]	@ (80023e8 <STBY_SysHwRestore+0x78>)
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff f807 	bl	80013d8 <HW_TS_Init>

  LL_PWR_EnableSRAM2Retention();
 80023ca:	f7ff feef 	bl	80021ac <LL_PWR_EnableSRAM2Retention>

  /* USER CODE BEGIN STBY_SysHwRestore_2 */

  /* USER CODE END STBY_SysHwRestore_2 */

  return;
 80023ce:	bf00      	nop
}
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00
 80023d8:	20000290 	.word	0x20000290
 80023dc:	58000c00 	.word	0x58000c00
 80023e0:	2000028c 	.word	0x2000028c
 80023e4:	58001400 	.word	0x58001400
 80023e8:	200001cc 	.word	0x200001cc

080023ec <STBY_TriggerIT>:

  return STBY_BootStatus;
}

static void STBY_TriggerIT(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* If system has been woken-up by an RTC alarm,
   * a software event must be generated to trigger the IT.
   * NVIC and EXTI must be reconfigured properly before triggering the event.
   */
  if((__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRAF) != 0) ||
 80023f0:	4b39      	ldr	r3, [pc, #228]	@ (80024d8 <STBY_TriggerIT+0xec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <STBY_TriggerIT+0x20>
     (__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRBF) != 0) )
 80023fe:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <STBY_TriggerIT+0xec>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if((__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRAF) != 0) ||
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <STBY_TriggerIT+0x2c>
  {
    __HAL_RTC_ALARM_EXTI_GENERATE_SWIT();
 800240c:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <STBY_TriggerIT+0xf0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a32      	ldr	r2, [pc, #200]	@ (80024dc <STBY_TriggerIT+0xf0>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002416:	6093      	str	r3, [r2, #8]

  /* If system has been woken-up by a wake up pin,
   * a software event must be generated to trigger the IT.
   * NVIC and EXTI must be reconfigured properly before triggering the event.
   */
  if(HAL_PWREx_GetWakeupFlag(PWR_FLAG_WUF1) != 0)
 8002418:	2020      	movs	r0, #32
 800241a:	f001 fb8b 	bl	8003b34 <HAL_PWREx_GetWakeupFlag>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d027      	beq.n	8002474 <STBY_TriggerIT+0x88>
  {
    if( (LL_SYSCFG_GetEXTISource(LL_SYSCFG_EXTI_LINE0) == LL_SYSCFG_EXTI_PORTA) )
 8002424:	f44f 2070 	mov.w	r0, #983040	@ 0xf0000
 8002428:	f7ff ff22 	bl	8002270 <LL_SYSCFG_GetEXTISource>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11d      	bne.n	800246e <STBY_TriggerIT+0x82>
    {
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 0) &&
 8002432:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <STBY_TriggerIT+0xf4>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <STBY_TriggerIT+0x64>
         (LL_EXTI_IsEnabledRisingTrig_0_31(LL_EXTI_LINE_0) == 1) )
 800243e:	2001      	movs	r0, #1
 8002440:	f7ff fec4 	bl	80021cc <LL_EXTI_IsEnabledRisingTrig_0_31>
 8002444:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 0) &&
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <STBY_TriggerIT+0x64>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_0);
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff feea 	bl	8002224 <LL_EXTI_GenerateSWI_0_31>
      }
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 1) &&
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <STBY_TriggerIT+0xf4>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <STBY_TriggerIT+0x82>
         (LL_EXTI_IsEnabledFallingTrig_0_31(LL_EXTI_LINE_0) == 1) )
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fecb 	bl	80021f8 <LL_EXTI_IsEnabledFallingTrig_0_31>
 8002462:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 1) &&
 8002464:	2b01      	cmp	r3, #1
 8002466:	d102      	bne.n	800246e <STBY_TriggerIT+0x82>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_0);
 8002468:	2001      	movs	r0, #1
 800246a:	f7ff fedb 	bl	8002224 <LL_EXTI_GenerateSWI_0_31>
      }
    }
    HAL_PWREx_ClearWakeupFlag(PWR_FLAG_WUF1);
 800246e:	2020      	movs	r0, #32
 8002470:	f001 fb76 	bl	8003b60 <HAL_PWREx_ClearWakeupFlag>
  }

  if(HAL_PWREx_GetWakeupFlag(PWR_FLAG_WUF4) != 0)
 8002474:	2023      	movs	r0, #35	@ 0x23
 8002476:	f001 fb5d 	bl	8003b34 <HAL_PWREx_GetWakeupFlag>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d028      	beq.n	80024d2 <STBY_TriggerIT+0xe6>
  {
    if( (LL_SYSCFG_GetEXTISource(LL_SYSCFG_EXTI_LINE2) == LL_SYSCFG_EXTI_PORTA) )
 8002480:	f04f 6070 	mov.w	r0, #251658240	@ 0xf000000
 8002484:	f7ff fef4 	bl	8002270 <LL_SYSCFG_GetEXTISource>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11d      	bne.n	80024ca <STBY_TriggerIT+0xde>
    {
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 0) &&
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <STBY_TriggerIT+0xf4>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <STBY_TriggerIT+0xc0>
         (LL_EXTI_IsEnabledRisingTrig_0_31(LL_EXTI_LINE_2) == 1) )
 800249a:	2004      	movs	r0, #4
 800249c:	f7ff fe96 	bl	80021cc <LL_EXTI_IsEnabledRisingTrig_0_31>
 80024a0:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 0) &&
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <STBY_TriggerIT+0xc0>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_2);
 80024a6:	2004      	movs	r0, #4
 80024a8:	f7ff febc 	bl	8002224 <LL_EXTI_GenerateSWI_0_31>
      }
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 1) &&
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <STBY_TriggerIT+0xf4>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d108      	bne.n	80024ca <STBY_TriggerIT+0xde>
         (LL_EXTI_IsEnabledFallingTrig_0_31(LL_EXTI_LINE_2) == 1) )
 80024b8:	2004      	movs	r0, #4
 80024ba:	f7ff fe9d 	bl	80021f8 <LL_EXTI_IsEnabledFallingTrig_0_31>
 80024be:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 1) &&
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d102      	bne.n	80024ca <STBY_TriggerIT+0xde>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_2);
 80024c4:	2004      	movs	r0, #4
 80024c6:	f7ff fead 	bl	8002224 <LL_EXTI_GenerateSWI_0_31>
      }
    }
    HAL_PWREx_ClearWakeupFlag(PWR_FLAG_WUF4);
 80024ca:	2023      	movs	r0, #35	@ 0x23
 80024cc:	f001 fb48 	bl	8003b60 <HAL_PWREx_ClearWakeupFlag>
  }

  return;
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
}
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200001cc 	.word	0x200001cc
 80024dc:	58000800 	.word	0x58000800
 80024e0:	58000400 	.word	0x58000400

080024e4 <LL_PWR_SetPowerMode>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <LL_PWR_SetPowerMode+0x24>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	@ (8002508 <LL_PWR_SetPowerMode+0x24>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	58000400 	.word	0x58000400

0800250c <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <LL_PWR_ClearFlag_WU+0x14>)
 8002512:	2209      	movs	r2, #9
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	58000400 	.word	0x58000400

08002524 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8002528:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002536:	d101      	bne.n	800253c <LL_PWR_IsActiveFlag_C2SB+0x18>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <LL_PWR_IsActiveFlag_C2SB+0x1a>
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	58000400 	.word	0x58000400

0800254c <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800255a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800255e:	d101      	bne.n	8002564 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	58000400 	.word	0x58000400

08002574 <LL_EXTI_EnableEvent_32_63>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <LL_EXTI_EnableEvent_32_63+0x24>)
 800257e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002582:	4905      	ldr	r1, [pc, #20]	@ (8002598 <LL_EXTI_EnableEvent_32_63+0x24>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58000800 	.word	0x58000800

0800259c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	4904      	ldr	r1, [pc, #16]	@ (80025bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	620b      	str	r3, [r1, #32]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	58000800 	.word	0x58000800

080025c0 <LL_RCC_HSI_Enable>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_RCC_HSI_IsReady>:
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f0:	d101      	bne.n	80025f6 <LL_RCC_HSI_IsReady+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_RCC_HSI_IsReady+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_RCC_SetSysClkSource>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 0203 	bic.w	r2, r3, #3
 8002614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_RCC_GetSysClkSource>:
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_SetSMPSClockSource>:
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	f023 0203 	bic.w	r2, r3, #3
 8002654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4313      	orrs	r3, r2
 800265c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800267a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800267e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_LPM_EnableSleep>:
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <LL_LPM_EnableSleep+0x1c>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <LL_LPM_EnableSleep+0x1c>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6113      	str	r3, [r2, #16]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <LL_LPM_EnableDeepSleep+0x1c>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <LL_LPM_EnableDeepSleep+0x1c>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6113      	str	r3, [r2, #16]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <LL_HSEM_1StepLock>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	3220      	adds	r2, #32
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	4a05      	ldr	r2, [pc, #20]	@ (80026f8 <LL_HSEM_1StepLock+0x2c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d001      	beq.n	80026ea <LL_HSEM_1StepLock+0x1e>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_HSEM_1StepLock+0x20>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	80000400 	.word	0x80000400

080026fc <LL_HSEM_ReleaseLock>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8002726:	f000 fba7 	bl	8002e78 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800272a:	f7ff ff9e 	bl	800266a <LL_RCC_ClearResetFlags>

  EnterLowPower();
 800272e:	f000 f857 	bl	80027e0 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8002732:	f7ff feeb 	bl	800250c <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8002736:	2003      	movs	r0, #3
 8002738:	f7ff fed4 	bl	80024e4 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800273c:	f7ff ffb6 	bl	80026ac <LL_LPM_EnableDeepSleep>
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

#if (CFG_LPM_STANDBY_SUPPORTED != 0)
  LL_EXTI_EnableRisingTrig_32_63(LL_EXTI_LINE_40);
 8002740:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002744:	f7ff ff2a 	bl	800259c <LL_EXTI_EnableRisingTrig_32_63>
  LL_EXTI_EnableEvent_32_63(LL_EXTI_LINE_40);
 8002748:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800274c:	f7ff ff12 	bl	8002574 <LL_EXTI_EnableEvent_32_63>

  STBY_AppHwSave();
 8002750:	f7ff fde5 	bl	800231e <STBY_AppHwSave>
  STBY_SysHwSave();
 8002754:	f7ff fdf4 	bl	8002340 <STBY_SysHwSave>

  CPUcontextSave();/* this function will call WFI instruction */
 8002758:	f000 f83b 	bl	80027d2 <CPUcontextSave>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 800275c:	bf00      	nop
}
 800275e:	bd80      	pop	{r7, pc}

08002760 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
#if (CFG_LPM_STANDBY_SUPPORTED != 0)
  if(STBY_BootStatus != 0)
 8002764:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <PWR_ExitOffMode+0x24>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <PWR_ExitOffMode+0x1a>
  {
    STBY_SysHwRestore();
 800276c:	f7ff fe00 	bl	8002370 <STBY_SysHwRestore>
    ExitLowPower_standby();
 8002770:	f000 f892 	bl	8002898 <ExitLowPower_standby>
    STBY_AppHwRestore();
 8002774:	f7ff fdda 	bl	800232c <STBY_AppHwRestore>
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8002778:	e002      	b.n	8002780 <PWR_ExitOffMode+0x20>
    ExitLowPower();
 800277a:	f000 f86d 	bl	8002858 <ExitLowPower>
  return;
 800277e:	bf00      	nop
}
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000294 	.word	0x20000294

08002788 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800278c:	f000 fb74 	bl	8002e78 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8002790:	f000 f826 	bl	80027e0 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8002794:	2001      	movs	r0, #1
 8002796:	f7ff fea5 	bl	80024e4 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800279a:	f7ff ff87 	bl	80026ac <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 800279e:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80027a0:	bf00      	nop
}
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80027a8:	f000 f856 	bl	8002858 <ExitLowPower>

  HAL_ResumeTick();
 80027ac:	f000 fb74 	bl	8002e98 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80027b0:	bf00      	nop
}
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80027b8:	f000 fb5e 	bl	8002e78 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80027bc:	f7ff ff66 	bl	800268c <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 80027c0:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 80027c2:	bf00      	nop
}
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 80027ca:	f000 fb65 	bl	8002e98 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 80027ce:	bf00      	nop
}
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <CPUcontextSave>:
* @brief Weak CPUcontextSave function definition to implement in startup file.
* @param none
* @retval none
*/
__WEAK void CPUcontextSave(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /*
   * If you are here, you have to update your startup_stm32wb15xx_cm4.s file to
   * implement CPUcontextSave function like done in latest STM32CubeWB package
   * into STM32WB15 BLE applications.
   */
  Error_Handler();
 80027d6:	f7ff fce2 	bl	800219e <Error_Handler>
#endif

  return;
 80027da:	bf00      	nop
}
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80027e4:	bf00      	nop
 80027e6:	2103      	movs	r1, #3
 80027e8:	4819      	ldr	r0, [pc, #100]	@ (8002850 <EnterLowPower+0x70>)
 80027ea:	f7ff ff6f 	bl	80026cc <LL_HSEM_1StepLock>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f8      	bne.n	80027e6 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 80027f4:	2104      	movs	r1, #4
 80027f6:	4816      	ldr	r0, [pc, #88]	@ (8002850 <EnterLowPower+0x70>)
 80027f8:	f7ff ff68 	bl	80026cc <LL_HSEM_1StepLock>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d117      	bne.n	8002832 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002802:	f7ff fea3 	bl	800254c <LL_PWR_IsActiveFlag_C2DS>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <EnterLowPower+0x36>
 800280c:	f7ff fe8a 	bl	8002524 <LL_PWR_IsActiveFlag_C2SB>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2104      	movs	r1, #4
 800281a:	480d      	ldr	r0, [pc, #52]	@ (8002850 <EnterLowPower+0x70>)
 800281c:	f7ff ff6e 	bl	80026fc <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8002820:	f000 f858 	bl	80028d4 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <EnterLowPower+0x74>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <EnterLowPower+0x74>)
 800282a:	f023 0307 	bic.w	r3, r3, #7
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e007      	b.n	8002842 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8002832:	f000 f84f 	bl	80028d4 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002836:	4b07      	ldr	r3, [pc, #28]	@ (8002854 <EnterLowPower+0x74>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a06      	ldr	r2, [pc, #24]	@ (8002854 <EnterLowPower+0x74>)
 800283c:	f023 0307 	bic.w	r3, r3, #7
 8002840:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2103      	movs	r1, #3
 8002846:	4802      	ldr	r0, [pc, #8]	@ (8002850 <EnterLowPower+0x70>)
 8002848:	f7ff ff58 	bl	80026fc <LL_HSEM_ReleaseLock>

  return;
 800284c:	bf00      	nop
}
 800284e:	bd80      	pop	{r7, pc}
 8002850:	58001400 	.word	0x58001400
 8002854:	58004000 	.word	0x58004000

08002858 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2104      	movs	r1, #4
 8002860:	480b      	ldr	r0, [pc, #44]	@ (8002890 <ExitLowPower+0x38>)
 8002862:	f7ff ff4b 	bl	80026fc <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002866:	bf00      	nop
 8002868:	2103      	movs	r1, #3
 800286a:	4809      	ldr	r0, [pc, #36]	@ (8002890 <ExitLowPower+0x38>)
 800286c:	f7ff ff2e 	bl	80026cc <LL_HSEM_1StepLock>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f8      	bne.n	8002868 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002876:	f7ff fed8 	bl	800262a <LL_RCC_GetSysClkSource>

/* USER CODE END ExitLowPower_2 */
  }
#if (CFG_LPM_STANDBY_SUPPORTED != 0)

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <ExitLowPower+0x3c>)
 800287c:	2201      	movs	r2, #1
 800287e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2103      	movs	r1, #3
 8002886:	4802      	ldr	r0, [pc, #8]	@ (8002890 <ExitLowPower+0x38>)
 8002888:	f7ff ff38 	bl	80026fc <LL_HSEM_ReleaseLock>

  return;
 800288c:	bf00      	nop
}
 800288e:	bd80      	pop	{r7, pc}
 8002890:	58001400 	.word	0x58001400
 8002894:	58000400 	.word	0x58000400

08002898 <ExitLowPower_standby>:
  * @brief Restore the system to exit standby mode
  * @param none
  * @retval none
  */
static void ExitLowPower_standby(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
/* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2104      	movs	r1, #4
 80028a0:	480a      	ldr	r0, [pc, #40]	@ (80028cc <ExitLowPower_standby+0x34>)
 80028a2:	f7ff ff2b 	bl	80026fc <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80028a6:	bf00      	nop
 80028a8:	2103      	movs	r1, #3
 80028aa:	4808      	ldr	r0, [pc, #32]	@ (80028cc <ExitLowPower_standby+0x34>)
 80028ac:	f7ff ff0e 	bl	80026cc <LL_HSEM_1StepLock>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f8      	bne.n	80028a8 <ExitLowPower_standby+0x10>
/* USER CODE BEGIN ExitLowPower_standby */

/* USER CODE END ExitLowPower_standby */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <ExitLowPower_standby+0x38>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2103      	movs	r1, #3
 80028c2:	4802      	ldr	r0, [pc, #8]	@ (80028cc <ExitLowPower_standby+0x34>)
 80028c4:	f7ff ff1a 	bl	80026fc <LL_HSEM_ReleaseLock>

  return;
 80028c8:	bf00      	nop
}
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	58001400 	.word	0x58001400
 80028d0:	58000400 	.word	0x58000400

080028d4 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 80028d8:	f7ff fe72 	bl	80025c0 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 80028dc:	bf00      	nop
 80028de:	f7ff fe7e 	bl	80025de <LL_RCC_HSI_IsReady>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0fa      	beq.n	80028de <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7ff fe8a 	bl	8002602 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7ff fea7 	bl	8002642 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 80028f4:	bf00      	nop
 80028f6:	f7ff fe98 	bl	800262a <LL_RCC_GetSysClkSource>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d1fa      	bne.n	80028f6 <Switch_On_HSI+0x22>
  return;
 8002900:	bf00      	nop
}
 8002902:	bd80      	pop	{r7, pc}

08002904 <LL_RCC_EnableRTC>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_AHB2_GRP1_EnableClock>:
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4313      	orrs	r3, r2
 800293c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_AHB3_GRP1_EnableClock>:
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800297c:	68fb      	ldr	r3, [r7, #12]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_APB1_GRP1_EnableClock>:
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002996:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4013      	ands	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_APB2_GRP1_EnableClock>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e0:	68fb      	ldr	r3, [r7, #12]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80029f2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029f6:	f7ff ffaf 	bl	8002958 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	202e      	movs	r0, #46	@ 0x2e
 8002a00:	f000 fba1 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a04:	202e      	movs	r0, #46	@ 0x2e
 8002a06:	f000 fbb8 	bl	800317a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <HAL_IPCC_MspInit+0x44>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d113      	bne.n	8002a4a <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a22:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002a26:	f7ff ff97 	bl	8002958 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	202c      	movs	r0, #44	@ 0x2c
 8002a30:	f000 fb89 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a34:	202c      	movs	r0, #44	@ 0x2c
 8002a36:	f000 fba0 	bl	800317a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	202d      	movs	r0, #45	@ 0x2d
 8002a40:	f000 fb81 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a44:	202d      	movs	r0, #45	@ 0x2d
 8002a46:	f000 fb98 	bl	800317a <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	58000c00 	.word	0x58000c00

08002a58 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08e      	sub	sp, #56	@ 0x38
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	2230      	movs	r2, #48	@ 0x30
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f007 fa45 	bl	8009ef8 <memset>
  if(hlptim->Instance==LPTIM1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_LPTIM_MspInit+0x50>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d112      	bne.n	8002a9e <HAL_LPTIM_MspInit+0x46>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002a78:	2310      	movs	r3, #16
 8002a7a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002a7c:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 8002a80:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fa82 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002a92:	f7ff fb84 	bl	800219e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002a96:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002a9a:	f7ff ff76 	bl	800298a <LL_APB1_GRP1_EnableClock>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8002a9e:	bf00      	nop
 8002aa0:	3738      	adds	r7, #56	@ 0x38
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40007c00 	.word	0x40007c00

08002aac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08e      	sub	sp, #56	@ 0x38
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	2230      	movs	r2, #48	@ 0x30
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f007 fa1b 	bl	8009ef8 <memset>
  if(hrtc->Instance==RTC)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <HAL_RTC_MspInit+0x64>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d11d      	bne.n	8002b08 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002acc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ad0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fa57 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002ae8:	f7ff fb59 	bl	800219e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aec:	f7ff ff0a 	bl	8002904 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002af0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002af4:	f7ff ff49 	bl	800298a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	2003      	movs	r0, #3
 8002afe:	f000 fb22 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002b02:	2003      	movs	r0, #3
 8002b04:	f000 fb39 	bl	800317a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002b08:	bf00      	nop
 8002b0a:	3738      	adds	r7, #56	@ 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40002800 	.word	0x40002800

08002b14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0f      	ldr	r2, [pc, #60]	@ (8002b70 <HAL_SPI_MspInit+0x5c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d117      	bne.n	8002b66 <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b36:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002b3a:	f7ff ff3f 	bl	80029bc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff fef1 	bl	8002926 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 8002b44:	23e0      	movs	r3, #224	@ 0xe0
 8002b46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b54:	2305      	movs	r3, #5
 8002b56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b62:	f000 fb4f 	bl	8003204 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b66:	bf00      	nop
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40013000 	.word	0x40013000

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <NMI_Handler+0x4>

08002b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <HardFault_Handler+0x4>

08002b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <MemManage_Handler+0x4>

08002b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bca:	f000 f91d 	bl	8002e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002bd6:	f7fe fb37 	bl	8001248 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002be2:	f006 fcff 	bl	80095e4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}

08002bea <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002bee:	f006 fd2f 	bl	8009650 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002bfa:	f000 fc83 	bl	8003504 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002c08:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <SystemInit+0x90>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <SystemInit+0x90>)
 8002c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002c30:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c3c:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <SystemInit+0x94>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c4e:	f023 0305 	bic.w	r3, r3, #5
 8002c52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c9c <SystemInit+0x98>)
 8002c70:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	faf6fefb 	.word	0xfaf6fefb
 8002c9c:	22041000 	.word	0x22041000

08002ca0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002ca0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca4:	3304      	adds	r3, #4

08002ca6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002caa:	d3f9      	bcc.n	8002ca0 <CopyDataInit>
  bx lr
 8002cac:	4770      	bx	lr

08002cae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002cae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002cb0:	3004      	adds	r0, #4

08002cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002cb2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002cb4:	d3fb      	bcc.n	8002cae <FillZerobss>
  bx lr
 8002cb6:	4770      	bx	lr

08002cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cbc:	f7ff ffa2 	bl	8002c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002cc0:	480b      	ldr	r0, [pc, #44]	@ (8002cf0 <LoopForever+0x6>)
 8002cc2:	490c      	ldr	r1, [pc, #48]	@ (8002cf4 <LoopForever+0xa>)
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <LoopForever+0xe>)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f7ff ffed 	bl	8002ca6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002ccc:	480b      	ldr	r0, [pc, #44]	@ (8002cfc <LoopForever+0x12>)
 8002cce:	490c      	ldr	r1, [pc, #48]	@ (8002d00 <LoopForever+0x16>)
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <LoopForever+0x1a>)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f7ff ffe7 	bl	8002ca6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002cd8:	480b      	ldr	r0, [pc, #44]	@ (8002d08 <LoopForever+0x1e>)
 8002cda:	490c      	ldr	r1, [pc, #48]	@ (8002d0c <LoopForever+0x22>)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f7ff ffe8 	bl	8002cb2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ce2:	f007 f911 	bl	8009f08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002ce6:	f7fe fe11 	bl	800190c <main>

08002cea <LoopForever>:

LoopForever:
  b LoopForever
 8002cea:	e7fe      	b.n	8002cea <LoopForever>
  ldr   r0, =_estack
 8002cec:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	20000050 	.word	0x20000050
 8002cf8:	0800a208 	.word	0x0800a208
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002cfc:	200301e4 	.word	0x200301e4
 8002d00:	20030a67 	.word	0x20030a67
 8002d04:	0800a296 	.word	0x0800a296
  INIT_BSS _sbss, _ebss
 8002d08:	2000009c 	.word	0x2000009c
 8002d0c:	20000450 	.word	0x20000450

08002d10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC1_IRQHandler>
	...

08002d14 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6053      	str	r3, [r2, #4]
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e0042000 	.word	0xe0042000

08002d34 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	6053      	str	r3, [r2, #4]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e0042000 	.word	0xe0042000

08002d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <HAL_Init+0x3c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <HAL_Init+0x3c>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	f000 f9e0 	bl	8003130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d70:	200f      	movs	r0, #15
 8002d72:	f000 f80f 	bl	8002d94 <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	71fb      	strb	r3, [r7, #7]
 8002d80:	e001      	b.n	8002d86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d82:	f7ff fe34 	bl	80029ee <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d86:	79fb      	ldrb	r3, [r7, #7]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	58004000 	.word	0x58004000

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <HAL_InitTick+0x6c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d024      	beq.n	8002df2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002da8:	f001 ff08 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <HAL_InitTick+0x6c>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	4619      	mov	r1, r3
 8002db4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002db8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f9f6 	bl	80031b2 <HAL_SYSTICK_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	d809      	bhi.n	8002de6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	f000 f9b4 	bl	8003146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dde:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <HAL_InitTick+0x70>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e007      	b.n	8002df6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e004      	b.n	8002df6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000028 	.word	0x20000028
 8002e04:	20000024 	.word	0x20000024

08002e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <HAL_IncTick+0x20>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_IncTick+0x24>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4a04      	ldr	r2, [pc, #16]	@ (8002e2c <HAL_IncTick+0x24>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000028 	.word	0x20000028
 8002e2c:	20000298 	.word	0x20000298

08002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_GetTick+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000298 	.word	0x20000298

08002e48 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_GetTickPrio+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000024 	.word	0x20000024

08002e60 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTickFreq+0x14>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000028 	.word	0x20000028

08002e78 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_SuspendTick+0x1c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <HAL_SuspendTick+0x1c>)
 8002e82:	f023 0302 	bic.w	r3, r3, #2
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_ResumeTick+0x1c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_ResumeTick+0x1c>)
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002ebc:	f7ff ff2a 	bl	8002d14 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002ec8:	f7ff ff34 	bl	8002d34 <LL_DBGMCU_EnableDBGStopMode>
}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	@ (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	@ (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db12      	blt.n	8002fa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	490a      	ldr	r1, [pc, #40]	@ (8002fb4 <__NVIC_DisableIRQ+0x44>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	3320      	adds	r3, #32
 8002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f9c:	f3bf 8f4f 	dsb	sy
}
 8002fa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fa2:	f3bf 8f6f 	isb	sy
}
 8002fa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0c      	blt.n	8002fe4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	@ (8002ff0 <__NVIC_SetPendingIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	3340      	adds	r3, #64	@ 0x40
 8002fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	2b00      	cmp	r3, #0
 8003004:	db0c      	blt.n	8003020 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4907      	ldr	r1, [pc, #28]	@ (800302c <__NVIC_ClearPendingIRQ+0x38>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2001      	movs	r0, #1
 8003016:	fa00 f202 	lsl.w	r2, r0, r2
 800301a:	3360      	adds	r3, #96	@ 0x60
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100

08003030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db0a      	blt.n	800305a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	490c      	ldr	r1, [pc, #48]	@ (800307c <__NVIC_SetPriority+0x4c>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003058:	e00a      	b.n	8003070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4908      	ldr	r1, [pc, #32]	@ (8003080 <__NVIC_SetPriority+0x50>)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	3b04      	subs	r3, #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	440b      	add	r3, r1
 800306e:	761a      	strb	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf28      	it	cs
 80030a2:	2304      	movcs	r3, #4
 80030a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d902      	bls.n	80030b4 <NVIC_EncodePriority+0x30>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b03      	subs	r3, #3
 80030b2:	e000      	b.n	80030b6 <NVIC_EncodePriority+0x32>
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43d9      	mvns	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	4313      	orrs	r3, r2
         );
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	@ 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030fc:	d301      	bcc.n	8003102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fe:	2301      	movs	r3, #1
 8003100:	e00f      	b.n	8003122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <SysTick_Config+0x40>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310a:	210f      	movs	r1, #15
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	f7ff ff8e 	bl	8003030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <SysTick_Config+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311a:	4b04      	ldr	r3, [pc, #16]	@ (800312c <SysTick_Config+0x40>)
 800311c:	2207      	movs	r2, #7
 800311e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	e000e010 	.word	0xe000e010

08003130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fec9 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff fee0 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff90 	bl	8003084 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5f 	bl	8003030 <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fed3 	bl	8002f34 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fee3 	bl	8002f70 <__NVIC_DisableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff96 	bl	80030ec <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff feed 	bl	8002fb8 <__NVIC_SetPendingIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	4603      	mov	r3, r0
 80031ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fefd 	bl	8002ff4 <__NVIC_ClearPendingIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003212:	e146      	b.n	80034a2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2101      	movs	r1, #1
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8138 	beq.w	800349c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d005      	beq.n	8003244 <HAL_GPIO_Init+0x40>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d130      	bne.n	80032a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800327a:	2201      	movs	r2, #1
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0201 	and.w	r2, r3, #1
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d017      	beq.n	80032e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d123      	bne.n	8003336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	08da      	lsrs	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3208      	adds	r2, #8
 8003330:	6939      	ldr	r1, [r7, #16]
 8003332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8092 	beq.w	800349c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003378:	4a51      	ldr	r2, [pc, #324]	@ (80034c0 <HAL_GPIO_Init+0x2bc>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033a2:	d013      	beq.n	80033cc <HAL_GPIO_Init+0x1c8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a47      	ldr	r2, [pc, #284]	@ (80034c4 <HAL_GPIO_Init+0x2c0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00d      	beq.n	80033c8 <HAL_GPIO_Init+0x1c4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a46      	ldr	r2, [pc, #280]	@ (80034c8 <HAL_GPIO_Init+0x2c4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <HAL_GPIO_Init+0x1c0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a45      	ldr	r2, [pc, #276]	@ (80034cc <HAL_GPIO_Init+0x2c8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_GPIO_Init+0x1bc>
 80033bc:	2304      	movs	r3, #4
 80033be:	e006      	b.n	80033ce <HAL_GPIO_Init+0x1ca>
 80033c0:	2307      	movs	r3, #7
 80033c2:	e004      	b.n	80033ce <HAL_GPIO_Init+0x1ca>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e002      	b.n	80033ce <HAL_GPIO_Init+0x1ca>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_GPIO_Init+0x1ca>
 80033cc:	2300      	movs	r3, #0
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	f002 0203 	and.w	r2, r2, #3
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	4093      	lsls	r3, r2
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033de:	4938      	ldr	r1, [pc, #224]	@ (80034c0 <HAL_GPIO_Init+0x2bc>)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ec:	4b38      	ldr	r3, [pc, #224]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003410:	4a2f      	ldr	r2, [pc, #188]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003416:	4b2e      	ldr	r3, [pc, #184]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800343a:	4a25      	ldr	r2, [pc, #148]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003440:	4b23      	ldr	r3, [pc, #140]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003466:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 8003470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43db      	mvns	r3, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003494:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <HAL_GPIO_Init+0x2cc>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f aeb1 	bne.w	8003214 <HAL_GPIO_Init+0x10>
  }
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40010000 	.word	0x40010000
 80034c4:	48000400 	.word	0x48000400
 80034c8:	48000800 	.word	0x48000800
 80034cc:	48001000 	.word	0x48001000
 80034d0:	58000800 	.word	0x58000800

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
 80034e0:	4613      	mov	r3, r2
 80034e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e4:	787b      	ldrb	r3, [r7, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800350a:	4b0a      	ldr	r3, [pc, #40]	@ (8003534 <HAL_HSEM_IRQHandler+0x30>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <HAL_HSEM_IRQHandler+0x30>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	43db      	mvns	r3, r3
 8003518:	4906      	ldr	r1, [pc, #24]	@ (8003534 <HAL_HSEM_IRQHandler+0x30>)
 800351a:	4013      	ands	r3, r2
 800351c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800351e:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <HAL_HSEM_IRQHandler+0x30>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f807 	bl	8003538 <HAL_HSEM_FreeCallback>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58001500 	.word	0x58001500

08003538 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01e      	beq.n	800359c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800355e:	4b13      	ldr	r3, [pc, #76]	@ (80035ac <HAL_IPCC_Init+0x60>)
 8003560:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fa4e 	bl	8002a10 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003574:	68b8      	ldr	r0, [r7, #8]
 8003576:	f000 f85b 	bl	8003630 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f82c 	bl	80035e4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800359a:	e001      	b.n	80035a0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	58000c00 	.word	0x58000c00

080035b0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e00f      	b.n	8003612 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003628 <IPCC_SetDefaultCallbacks+0x44>)
 80035fc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3306      	adds	r3, #6
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	4a08      	ldr	r2, [pc, #32]	@ (800362c <IPCC_SetDefaultCallbacks+0x48>)
 800360a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d9ec      	bls.n	80035f2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	080035b1 	.word	0x080035b1
 800362c:	080035cb 	.word	0x080035cb

08003630 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003644:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	223f      	movs	r2, #63	@ 0x3f
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_APB1_GRP1_ForceReset>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4313      	orrs	r3, r2
 800366e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_APB1_GRP2_ForceReset>:
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800368a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4313      	orrs	r3, r2
 8003692:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_APB1_GRP1_ReleaseReset>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b6:	4013      	ands	r3, r2
 80036b8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_APB1_GRP2_ReleaseReset>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036dc:	4013      	ands	r3, r2
 80036de:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e08c      	b.n	8003818 <HAL_LPTIM_Init+0x12c>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff f99d 	bl	8002a58 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d004      	beq.n	8003740 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800373e:	d103      	bne.n	8003748 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 031e 	bic.w	r3, r3, #30
 8003746:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003750:	4293      	cmp	r3, r2
 8003752:	d005      	beq.n	8003760 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800375a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800375e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4b2f      	ldr	r3, [pc, #188]	@ (8003820 <HAL_LPTIM_Init+0x134>)
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003770:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003776:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800377c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003782:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800379a:	4313      	orrs	r3, r2
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d004      	beq.n	80037b4 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037b2:	d107      	bne.n	80037c4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80037bc:	4313      	orrs	r3, r2
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00a      	beq.n	80037e6 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80037d8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80037de:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003824 <HAL_LPTIM_Init+0x138>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d105      	bne.n	8003804 <HAL_LPTIM_Init+0x118>
#else
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	e004      	b.n	800380e <HAL_LPTIM_Init+0x122>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800380c:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	ff19f1fe 	.word	0xff19f1fe
 8003824:	40007c00 	.word	0x40007c00

08003828 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a39      	ldr	r2, [pc, #228]	@ (8003924 <HAL_LPTIM_Counter_Start_IT+0xfc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <HAL_LPTIM_Counter_Start_IT+0x2e>
 8003844:	4b38      	ldr	r3, [pc, #224]	@ (8003928 <HAL_LPTIM_Counter_Start_IT+0x100>)
 8003846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800384a:	4a37      	ldr	r2, [pc, #220]	@ (8003928 <HAL_LPTIM_Counter_Start_IT+0x100>)
 800384c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003850:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003854:	e007      	b.n	8003866 <HAL_LPTIM_Counter_Start_IT+0x3e>
 8003856:	4b34      	ldr	r3, [pc, #208]	@ (8003928 <HAL_LPTIM_Counter_Start_IT+0x100>)
 8003858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800385c:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_LPTIM_Counter_Start_IT+0x100>)
 800385e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003862:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d00c      	beq.n	8003888 <HAL_LPTIM_Counter_Start_IT+0x60>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003876:	d107      	bne.n	8003888 <HAL_LPTIM_Counter_Start_IT+0x60>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8003886:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2210      	movs	r2, #16
 800389e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80038a8:	2110      	movs	r1, #16
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f84c 	bl	8003948 <LPTIM_WaitForFlag>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d101      	bne.n	80038ba <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e02f      	b.n	800391a <HAL_LPTIM_Counter_Start_IT+0xf2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f874 	bl	80039a8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f833 	bl	800392c <HAL_LPTIM_GetState>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d101      	bne.n	80038d0 <HAL_LPTIM_Counter_Start_IT+0xa8>
  {
    return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e024      	b.n	800391a <HAL_LPTIM_Counter_Start_IT+0xf2>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0210 	orr.w	r2, r2, #16
 80038de:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0202 	orr.w	r2, r2, #2
 80038ee:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0204 	orr.w	r2, r2, #4
 800390e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40007c00 	.word	0x40007c00
 8003928:	58000800 	.word	0x58000800

0800392c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800393a:	b2db      	uxtb	r3, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <LPTIM_WaitForFlag+0x58>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a12      	ldr	r2, [pc, #72]	@ (80039a4 <LPTIM_WaitForFlag+0x5c>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	0b9b      	lsrs	r3, r3, #14
 8003962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	3b01      	subs	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	4013      	ands	r3, r2
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d002      	beq.n	8003992 <LPTIM_WaitForFlag+0x4a>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ec      	bne.n	800396c <LPTIM_WaitForFlag+0x24>

  return result;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	20000020 	.word	0x20000020
 80039a4:	d1b71759 	.word	0xd1b71759

080039a8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	@ 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b0:	f3ef 8310 	mrs	r3, PRIMASK
 80039b4:	613b      	str	r3, [r7, #16]
  return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ba:	2301      	movs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  tmpIER = hlptim->Instance->IER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCFGR = hlptim->Instance->CFGR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCMP = hlptim->Instance->CMP;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	623b      	str	r3, [r7, #32]
  tmpARR = hlptim->Instance->ARR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	61fb      	str	r3, [r7, #28]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	61bb      	str	r3, [r7, #24]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae0 <LPTIM_Disable+0x138>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <LPTIM_Disable+0x58>
 80039f8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae4 <LPTIM_Disable+0x13c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <LPTIM_Disable+0x6a>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80039fe:	e00f      	b.n	8003a20 <LPTIM_Disable+0x78>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003a00:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003a04:	f7ff fe28 	bl	8003658 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003a08:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003a0c:	f7ff fe48 	bl	80036a0 <LL_APB1_GRP1_ReleaseReset>
      break;
 8003a10:	e006      	b.n	8003a20 <LPTIM_Disable+0x78>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003a12:	2020      	movs	r0, #32
 8003a14:	f7ff fe32 	bl	800367c <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003a18:	2020      	movs	r0, #32
 8003a1a:	f7ff fe54 	bl	80036c6 <LL_APB1_GRP2_ReleaseReset>
      break;
 8003a1e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <LPTIM_Disable+0x84>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d03b      	beq.n	8003aa4 <LPTIM_Disable+0xfc>
  {
    if (tmpCMP != 0UL)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01a      	beq.n	8003a68 <LPTIM_Disable+0xc0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003a4a:	2108      	movs	r1, #8
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff7b 	bl	8003948 <LPTIM_WaitForFlag>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d103      	bne.n	8003a60 <LPTIM_Disable+0xb8>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2208      	movs	r2, #8
 8003a66:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <LPTIM_Disable+0xfc>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003a86:	2110      	movs	r1, #16
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff5d 	bl	8003948 <LPTIM_WaitForFlag>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d103      	bne.n	8003a9c <LPTIM_Disable+0xf4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	605a      	str	r2, [r3, #4]
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aba:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac2:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	621a      	str	r2, [r3, #32]
 8003acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ace:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003ad8:	bf00      	nop
 8003ada:	3730      	adds	r7, #48	@ 0x30
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40007c00 	.word	0x40007c00
 8003ae4:	40009400 	.word	0x40009400

08003ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	58000400 	.word	0x58000400

08003b08 <LL_PWR_EnableSRAM2Retention>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b16:	6093      	str	r3, [r2, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	58000400 	.word	0x58000400

08003b28 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8003b2c:	f7ff ffec 	bl	8003b08 <LL_PWR_EnableSRAM2Retention>
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_PWREx_GetWakeupFlag>:
  *            @arg PWR_FLAG_WUF4: A wakeup event was received from PA2.
  *            @arg PWR_FLAG_WUF5: A wakeup event was received from PC5.
  * @retval The Wake-Up pin flag.
  */
uint32_t  HAL_PWREx_GetWakeupFlag(uint32_t WakeUpFlag)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return (PWR->SR1 & (1UL << ((WakeUpFlag) & 31U)));
 8003b3c:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <HAL_PWREx_GetWakeupFlag+0x28>)
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	4013      	ands	r3, r2
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	58000400 	.word	0x58000400

08003b60 <HAL_PWREx_ClearWakeupFlag>:
  *            @arg PWR_FLAG_WUF4: A wakeup event was received from PA2.
  *            @arg PWR_FLAG_WUF5: A wakeup event was received from PC5.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag(uint32_t WakeUpFlag)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  PWR->SCR = (1UL << ((WakeUpFlag) & 31U));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba0 <HAL_PWREx_ClearWakeupFlag+0x40>)
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	6193      	str	r3, [r2, #24]

  if ((PWR->SR1 & (1UL << ((WakeUpFlag) & 31U))) != 0U)
 8003b78:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_PWREx_ClearWakeupFlag+0x40>)
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_PWREx_ClearWakeupFlag+0x32>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_PWREx_ClearWakeupFlag+0x34>
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	58000400 	.word	0x58000400

08003ba4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb6:	d101      	bne.n	8003bbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_HSE_Enable>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_HSE_Disable>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_HSE_IsReady>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c16:	d101      	bne.n	8003c1c <LL_RCC_HSE_IsReady+0x18>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <LL_RCC_HSE_IsReady+0x1a>
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_RCC_HSI_Enable>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_HSI_Disable>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_HSI_IsReady>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d101      	bne.n	8003c7c <LL_RCC_HSI_IsReady+0x18>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LL_RCC_HSI_IsReady+0x1a>
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_RCC_LSE_Enable>:
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_LSE_Disable>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_LSE_EnableBypass>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d06:	f043 0304 	orr.w	r3, r3, #4
 8003d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_RCC_LSE_DisableBypass>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_LSE_IsReady>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d101      	bne.n	8003d52 <LL_RCC_LSE_IsReady+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_RCC_LSE_IsReady+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_LSI1_Enable>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_LSI1_Disable>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_LSI1_IsReady>:
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d101      	bne.n	8003dba <LL_RCC_LSI1_IsReady+0x18>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <LL_RCC_LSI1_IsReady+0x1a>
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_LSI2_Enable>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_LSI2_Disable>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_LSI2_IsReady>:
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d101      	bne.n	8003e22 <LL_RCC_LSI2_IsReady+0x18>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_RCC_LSI2_IsReady+0x1a>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_LSI2_SetTrimming>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_MSI_Enable>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_MSI_Disable>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_MSI_IsReady>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d101      	bne.n	8003eae <LL_RCC_MSI_IsReady+0x16>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_RCC_MSI_IsReady+0x18>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_MSI_SetRange>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_MSI_GetRange>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003ef8:	d901      	bls.n	8003efe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003efa:	23b0      	movs	r3, #176	@ 0xb0
 8003efc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003efe:	687b      	ldr	r3, [r7, #4]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_RCC_SetSysClkSource>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 0203 	bic.w	r2, r3, #3
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_GetSysClkSource>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_SetAHBPrescaler>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003faa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_SetAHB4Prescaler>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_SetAPB1Prescaler>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_SetAPB2Prescaler>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_RCC_GetAHBPrescaler>:
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_GetAHB4Prescaler>:
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004068:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_RCC_PLL_Enable>:
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_RCC_PLL_Disable>:
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ac:	6013      	str	r3, [r2, #0]
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_PLL_IsReady>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ca:	d101      	bne.n	80040d0 <LL_RCC_PLL_IsReady+0x18>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <LL_RCC_PLL_IsReady+0x1a>
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_RCC_PLL_GetN>:
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_RCC_PLL_GetR>:
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_PLL_GetDivider>:
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_RCC_PLL_GetMainSource>:
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0303 	and.w	r3, r3, #3
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_RCC_IsActiveFlag_HPRE>:
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d101      	bne.n	8004156 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004176:	d101      	bne.n	800417c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004190:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419c:	d101      	bne.n	80041a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_IsActiveFlag_PPRE1>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c0:	d101      	bne.n	80041c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041e4:	d101      	bne.n	80041ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b08d      	sub	sp, #52	@ 0x34
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e324      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 808d 	beq.w	8004332 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004218:	f7ff fea1 	bl	8003f5e <LL_RCC_GetSysClkSource>
 800421c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800421e:	f7ff ff82 	bl	8004126 <LL_RCC_PLL_GetMainSource>
 8004222:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_RCC_OscConfig+0x3e>
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d147      	bne.n	80042c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	2b01      	cmp	r3, #1
 8004234:	d144      	bne.n	80042c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e308      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004246:	f7ff fe4c 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 800424a:	4603      	mov	r3, r0
 800424c:	429c      	cmp	r4, r3
 800424e:	d914      	bls.n	800427a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fcc5 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e2f7      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fe26 	bl	8003eba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fe4a 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>
 8004278:	e013      	b.n	80042a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fe1b 	bl	8003eba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fe3f 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fca6 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e2d8      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042a2:	f000 fc8b 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4aa4      	ldr	r2, [pc, #656]	@ (800453c <HAL_RCC_OscConfig+0x344>)
 80042aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042ac:	4ba4      	ldr	r3, [pc, #656]	@ (8004540 <HAL_RCC_OscConfig+0x348>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fd6f 	bl	8002d94 <HAL_InitTick>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d039      	beq.n	8004330 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e2c9      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01e      	beq.n	8004306 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042c8:	f7ff fdc8 	bl	8003e5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042cc:	f7fe fdb0 	bl	8002e30 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d4:	f7fe fdac 	bl	8002e30 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e2b6      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042e6:	f7ff fdd7 	bl	8003e98 <LL_RCC_MSI_IsReady>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f1      	beq.n	80042d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fde0 	bl	8003eba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fe04 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>
 8004304:	e015      	b.n	8004332 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004306:	f7ff fdb8 	bl	8003e7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800430a:	f7fe fd91 	bl	8002e30 <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004312:	f7fe fd8d 	bl	8002e30 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e297      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004324:	f7ff fdb8 	bl	8003e98 <LL_RCC_MSI_IsReady>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f1      	bne.n	8004312 <HAL_RCC_OscConfig+0x11a>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004330:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d047      	beq.n	80043ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	f7ff fe0e 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004342:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004344:	f7ff feef 	bl	8004126 <LL_RCC_PLL_GetMainSource>
 8004348:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x164>
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d108      	bne.n	8004368 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d105      	bne.n	8004368 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d134      	bne.n	80043ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e275      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004370:	d102      	bne.n	8004378 <HAL_RCC_OscConfig+0x180>
 8004372:	f7ff fc29 	bl	8003bc8 <LL_RCC_HSE_Enable>
 8004376:	e001      	b.n	800437c <HAL_RCC_OscConfig+0x184>
 8004378:	f7ff fc35 	bl	8003be6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fe fd54 	bl	8002e30 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7fe fd50 	bl	8002e30 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e25a      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800439e:	f7ff fc31 	bl	8003c04 <LL_RCC_HSE_IsReady>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f1      	beq.n	800438c <HAL_RCC_OscConfig+0x194>
 80043a8:	e011      	b.n	80043ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fe fd41 	bl	8002e30 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b2:	f7fe fd3d 	bl	8002e30 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	@ 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e247      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80043c4:	f7ff fc1e 	bl	8003c04 <LL_RCC_HSE_IsReady>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f1      	bne.n	80043b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d04c      	beq.n	8004474 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043da:	f7ff fdc0 	bl	8003f5e <LL_RCC_GetSysClkSource>
 80043de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043e0:	f7ff fea1 	bl	8004126 <LL_RCC_PLL_GetMainSource>
 80043e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_OscConfig+0x200>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	d10e      	bne.n	8004410 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d10b      	bne.n	8004410 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e227      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fc3d 	bl	8003c88 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800440e:	e031      	b.n	8004474 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d019      	beq.n	800444c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	f7ff fc06 	bl	8003c28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fd08 	bl	8002e30 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004424:	f7fe fd04 	bl	8002e30 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e20e      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004436:	f7ff fc15 	bl	8003c64 <LL_RCC_HSI_IsReady>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f1      	beq.n	8004424 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fc1f 	bl	8003c88 <LL_RCC_HSI_SetCalibTrimming>
 800444a:	e013      	b.n	8004474 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444c:	f7ff fbfb 	bl	8003c46 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe fcee 	bl	8002e30 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004458:	f7fe fcea 	bl	8002e30 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1f4      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800446a:	f7ff fbfb 	bl	8003c64 <LL_RCC_HSI_IsReady>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f1      	bne.n	8004458 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a3 	beq.w	80045d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d076      	beq.n	8004584 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d046      	beq.n	8004530 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80044a2:	f7ff fc7e 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80044ac:	f7ff fc57 	bl	8003d5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044b0:	f7fe fcbe 	bl	8002e30 <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044b8:	f7fe fcba 	bl	8002e30 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1c4      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044ca:	f7ff fc6a 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f1      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80044d4:	f7ff fc77 	bl	8003dc6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fcaa 	bl	8002e30 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044e0:	f7fe fca6 	bl	8002e30 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e1b0      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044f2:	f7ff fc8a 	bl	8003e0a <LL_RCC_LSI2_IsReady>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f1      	beq.n	80044e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fc94 	bl	8003e2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004506:	f7ff fc3b 	bl	8003d80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fe fc91 	bl	8002e30 <HAL_GetTick>
 800450e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004512:	f7fe fc8d 	bl	8002e30 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e197      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004524:	f7ff fc3d 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f1      	bne.n	8004512 <HAL_RCC_OscConfig+0x31a>
 800452e:	e051      	b.n	80045d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004530:	f7ff fc15 	bl	8003d5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fc7c 	bl	8002e30 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800453a:	e00c      	b.n	8004556 <HAL_RCC_OscConfig+0x35e>
 800453c:	20000020 	.word	0x20000020
 8004540:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004544:	f7fe fc74 	bl	8002e30 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e17e      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004556:	f7ff fc24 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f1      	beq.n	8004544 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004560:	f7ff fc42 	bl	8003de8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004566:	f7fe fc63 	bl	8002e30 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b03      	cmp	r3, #3
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e16d      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004578:	f7ff fc47 	bl	8003e0a <LL_RCC_LSI2_IsReady>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f1      	bne.n	8004566 <HAL_RCC_OscConfig+0x36e>
 8004582:	e027      	b.n	80045d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004584:	f7ff fc30 	bl	8003de8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fe fc52 	bl	8002e30 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004590:	f7fe fc4e 	bl	8002e30 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e158      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045a2:	f7ff fc32 	bl	8003e0a <LL_RCC_LSI2_IsReady>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f1      	bne.n	8004590 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80045ac:	f7ff fbe8 	bl	8003d80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fe fc3e 	bl	8002e30 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045b8:	f7fe fc3a 	bl	8002e30 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e144      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045ca:	f7ff fbea 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f1      	bne.n	80045b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05b      	beq.n	8004698 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e0:	4b9e      	ldr	r3, [pc, #632]	@ (800485c <HAL_RCC_OscConfig+0x664>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d114      	bne.n	8004616 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80045ec:	f7ff fa7c 	bl	8003ae8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f0:	f7fe fc1e 	bl	8002e30 <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fe fc1a 	bl	8002e30 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e124      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460a:	4b94      	ldr	r3, [pc, #592]	@ (800485c <HAL_RCC_OscConfig+0x664>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d102      	bne.n	8004624 <HAL_RCC_OscConfig+0x42c>
 800461e:	f7ff fb48 	bl	8003cb2 <LL_RCC_LSE_Enable>
 8004622:	e00c      	b.n	800463e <HAL_RCC_OscConfig+0x446>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d104      	bne.n	8004636 <HAL_RCC_OscConfig+0x43e>
 800462c:	f7ff fb63 	bl	8003cf6 <LL_RCC_LSE_EnableBypass>
 8004630:	f7ff fb3f 	bl	8003cb2 <LL_RCC_LSE_Enable>
 8004634:	e003      	b.n	800463e <HAL_RCC_OscConfig+0x446>
 8004636:	f7ff fb4d 	bl	8003cd4 <LL_RCC_LSE_Disable>
 800463a:	f7ff fb6d 	bl	8003d18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d014      	beq.n	8004670 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fe fbf3 	bl	8002e30 <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fe fbef 	bl	8002e30 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0f7      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004664:	f7ff fb69 	bl	8003d3a <LL_RCC_LSE_IsReady>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ef      	beq.n	800464e <HAL_RCC_OscConfig+0x456>
 800466e:	e013      	b.n	8004698 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fe fbde 	bl	8002e30 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fe fbda 	bl	8002e30 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0e2      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800468e:	f7ff fb54 	bl	8003d3a <LL_RCC_LSE_IsReady>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ef      	bne.n	8004678 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80d8 	beq.w	8004852 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a2:	f7ff fc5c 	bl	8003f5e <LL_RCC_GetSysClkSource>
 80046a6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	f040 80a6 	bne.w	8004806 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0203 	and.w	r2, r3, #3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d123      	bne.n	8004710 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d11c      	bne.n	8004710 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d114      	bne.n	8004710 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d10d      	bne.n	8004710 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d106      	bne.n	8004710 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d054      	beq.n	80047ba <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d04f      	beq.n	80047b6 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004716:	f7ff fcc0 	bl	800409a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800471a:	f7fe fb89 	bl	8002e30 <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004722:	f7fe fb85 	bl	8002e30 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e08f      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	4b45      	ldr	r3, [pc, #276]	@ (8004860 <HAL_RCC_OscConfig+0x668>)
 800474a:	4013      	ands	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800475a:	0212      	lsls	r2, r2, #8
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004768:	4311      	orrs	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800476e:	430a      	orrs	r2, r1
 8004770:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004774:	4313      	orrs	r3, r2
 8004776:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004778:	f7ff fc80 	bl	800407c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800478c:	f7fe fb50 	bl	8002e30 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fe fb4c 	bl	8002e30 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e056      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b4:	e04d      	b.n	8004852 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e04c      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d144      	bne.n	8004852 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047c8:	f7ff fc58 	bl	800407c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047dc:	f7fe fb28 	bl	8002e30 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fe fb24 	bl	8002e30 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e02e      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ef      	beq.n	80047e4 <HAL_RCC_OscConfig+0x5ec>
 8004804:	e025      	b.n	8004852 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d020      	beq.n	800484e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	f7ff fc45 	bl	800409a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fe fb0e 	bl	8002e30 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fe fb0a 	bl	8002e30 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e014      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ef      	bne.n	8004818 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	60d3      	str	r3, [r2, #12]
 800484c:	e001      	b.n	8004852 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3734      	adds	r7, #52	@ 0x34
 8004858:	46bd      	mov	sp, r7
 800485a:	bd90      	pop	{r4, r7, pc}
 800485c:	58000400 	.word	0x58000400
 8004860:	11c1808c 	.word	0x11c1808c

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e12d      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b98      	ldr	r3, [pc, #608]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d91b      	bls.n	80048be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b95      	ldr	r3, [pc, #596]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	4993      	ldr	r1, [pc, #588]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004896:	f7fe facb 	bl	8002e30 <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800489e:	f7fe fac7 	bl	8002e30 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e111      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b0:	4b8a      	ldr	r3, [pc, #552]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d1ef      	bne.n	800489e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fb51 	bl	8003f76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048d4:	f7fe faac 	bl	8002e30 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048dc:	f7fe faa8 	bl	8002e30 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0f2      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048ee:	f7ff fc26 	bl	800413e <LL_RCC_IsActiveFlag_HPRE>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f1      	beq.n	80048dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d016      	beq.n	8004932 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fb48 	bl	8003f9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800490e:	f7fe fa8f 	bl	8002e30 <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004916:	f7fe fa8b 	bl	8002e30 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0d5      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004928:	f7ff fc1b 	bl	8004162 <LL_RCC_IsActiveFlag_C2HPRE>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f1      	beq.n	8004916 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fb41 	bl	8003fca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004948:	f7fe fa72 	bl	8002e30 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004950:	f7fe fa6e 	bl	8002e30 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0b8      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004962:	f7ff fc11 	bl	8004188 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f1      	beq.n	8004950 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d016      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fb3b 	bl	8003ff8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004982:	f7fe fa55 	bl	8002e30 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800498a:	f7fe fa51 	bl	8002e30 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e09b      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800499c:	f7ff fc07 	bl	80041ae <LL_RCC_IsActiveFlag_PPRE1>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f1      	beq.n	800498a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fb31 	bl	8004020 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049be:	f7fe fa37 	bl	8002e30 <HAL_GetTick>
 80049c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049c6:	f7fe fa33 	bl	8002e30 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e07d      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049d8:	f7ff fbfb 	bl	80041d2 <LL_RCC_IsActiveFlag_PPRE2>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f1      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d043      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80049f6:	f7ff f905 	bl	8003c04 <LL_RCC_HSE_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11e      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e067      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a0c:	f7ff fb54 	bl	80040b8 <LL_RCC_PLL_IsReady>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d113      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e05c      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a22:	f7ff fa39 	bl	8003e98 <LL_RCC_MSI_IsReady>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d108      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e051      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a30:	f7ff f918 	bl	8003c64 <LL_RCC_HSI_IsReady>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e04a      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fa77 	bl	8003f36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fe f9f2 	bl	8002e30 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fe f9ee 	bl	8002e30 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e036      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	f7ff fa7a 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d1ec      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a76:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d21b      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 0207 	bic.w	r2, r3, #7
 8004a8c:	4913      	ldr	r1, [pc, #76]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fe f9cc 	bl	8002e30 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a9c:	f7fe f9c8 	bl	8002e30 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e012      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1ef      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004abc:	f000 f87e 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4a07      	ldr	r2, [pc, #28]	@ (8004ae0 <HAL_RCC_ClockConfig+0x27c>)
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004ac6:	f7fe f9bf 	bl	8002e48 <HAL_GetTickPrio>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe f961 	bl	8002d94 <HAL_InitTick>
 8004ad2:	4603      	mov	r3, r0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58004000 	.word	0x58004000
 8004ae0:	20000020 	.word	0x20000020

08004ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	f7ff fa38 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004aee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004af6:	f7ff f9f4 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004afa:	4603      	mov	r3, r0
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	4a2b      	ldr	r2, [pc, #172]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e04b      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b12:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e045      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d10a      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b1e:	f7ff f841 	bl	8003ba4 <LL_RCC_HSE_IsEnabledDiv2>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b28:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e03a      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b2e:	4b22      	ldr	r3, [pc, #136]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e037      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b34:	f7ff faf7 	bl	8004126 <LL_RCC_PLL_GetMainSource>
 8004b38:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d003      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x64>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x6a>
 8004b46:	e00d      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b48:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b4a:	60bb      	str	r3, [r7, #8]
        break;
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b4e:	f7ff f829 	bl	8003ba4 <LL_RCC_HSE_IsEnabledDiv2>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d102      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b58:	4b16      	ldr	r3, [pc, #88]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b5a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b5c:	e00d      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b5e:	4b16      	ldr	r3, [pc, #88]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b60:	60bb      	str	r3, [r7, #8]
        break;
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b64:	f7ff f9bd 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	60bb      	str	r3, [r7, #8]
        break;
 8004b78:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b7a:	f7ff faaf 	bl	80040dc <LL_RCC_PLL_GetN>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	fb03 f402 	mul.w	r4, r3, r2
 8004b86:	f7ff fac2 	bl	800410e <LL_RCC_PLL_GetDivider>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	3301      	adds	r3, #1
 8004b90:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b94:	f7ff faaf 	bl	80040f6 <LL_RCC_PLL_GetR>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	0f5b      	lsrs	r3, r3, #29
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ba2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	0800a190 	.word	0x0800a190
 8004bb4:	00f42400 	.word	0x00f42400
 8004bb8:	01e84800 	.word	0x01e84800

08004bbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b598      	push	{r3, r4, r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004bc0:	f7ff ff90 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	f7ff fa3f 	bl	8004048 <LL_RCC_GetAHBPrescaler>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a03      	ldr	r2, [pc, #12]	@ (8004be0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd98      	pop	{r3, r4, r7, pc}
 8004be0:	0800a150 	.word	0x0800a150

08004be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2bb0      	cmp	r3, #176	@ 0xb0
 8004bf0:	d903      	bls.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004bf2:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e007      	b.n	8004c0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	4a10      	ldr	r2, [pc, #64]	@ (8004c44 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c0a:	f7ff fa29 	bl	8004060 <LL_RCC_GetAHB4Prescaler>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	4a0c      	ldr	r2, [pc, #48]	@ (8004c48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	0c9b      	lsrs	r3, r3, #18
 8004c2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f80c 	bl	8004c50 <RCC_SetFlashLatency>
 8004c38:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	0800a190 	.word	0x0800a190
 8004c48:	0800a150 	.word	0x0800a150
 8004c4c:	431bde83 	.word	0x431bde83

08004c50 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b08f      	sub	sp, #60	@ 0x3c
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c5a:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <RCC_SetFlashLatency+0x9c>)
 8004c5c:	f107 041c 	add.w	r4, r7, #28
 8004c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c66:	4b22      	ldr	r3, [pc, #136]	@ (8004cf0 <RCC_SetFlashLatency+0xa0>)
 8004c68:	f107 040c 	add.w	r4, r7, #12
 8004c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c72:	2300      	movs	r3, #0
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7a:	e013      	b.n	8004ca4 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	3338      	adds	r3, #56	@ 0x38
 8004c82:	443b      	add	r3, r7
 8004c84:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d807      	bhi.n	8004c9e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	3338      	adds	r3, #56	@ 0x38
 8004c94:	443b      	add	r3, r7
 8004c96:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8004c9c:	e005      	b.n	8004caa <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d9e8      	bls.n	8004c7c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <RCC_SetFlashLatency+0xa4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 0207 	bic.w	r2, r3, #7
 8004cb2:	4910      	ldr	r1, [pc, #64]	@ (8004cf4 <RCC_SetFlashLatency+0xa4>)
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cba:	f7fe f8b9 	bl	8002e30 <HAL_GetTick>
 8004cbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cc0:	e008      	b.n	8004cd4 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cc2:	f7fe f8b5 	bl	8002e30 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e007      	b.n	8004ce4 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cd4:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <RCC_SetFlashLatency+0xa4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d1ef      	bne.n	8004cc2 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	373c      	adds	r7, #60	@ 0x3c
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	08009fa0 	.word	0x08009fa0
 8004cf0:	08009fb0 	.word	0x08009fb0
 8004cf4:	58004000 	.word	0x58004000

08004cf8 <LL_RCC_LSE_IsEnabled>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <LL_RCC_LSE_IsEnabled+0x18>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <LL_RCC_LSE_IsReady>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d101      	bne.n	8004d34 <LL_RCC_LSE_IsReady+0x18>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <LL_RCC_LSE_IsReady+0x1a>
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_RCC_SetRFWKPClockSource>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <LL_RCC_SetSMPSClockSource>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_RCC_SetSMPSPrescaler>:
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_SetUSARTClockSource>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dcc:	f023 0203 	bic.w	r2, r3, #3
 8004dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_RCC_SetLPUARTClockSource>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_SetI2CClockSource>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_RCC_SetLPTIMClockSource>:
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	43db      	mvns	r3, r3
 8004e66:	401a      	ands	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <LL_RCC_SetRNGClockSource>:
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004e96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <LL_RCC_SetCLK48ClockSource>:
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ec2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_SetADCClockSource>:
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004eee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <LL_RCC_SetRTCClockSource>:
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <LL_RCC_GetRTCClockSource>:
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_RCC_ForceBackupDomainReset>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_RCC_ReleaseBackupDomainReset>:
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f86:	bf00      	nop
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d046      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004fac:	f7ff ffc1 	bl	8004f32 <LL_RCC_GetRTCClockSource>
 8004fb0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d03c      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fbc:	f7fe fd94 	bl	8003ae8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff9b 	bl	8004f06 <LL_RCC_SetRTCClockSource>
 8004fd0:	e02e      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004fdc:	f7ff ffb6 	bl	8004f4c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004fe0:	f7ff ffc5 	bl	8004f6e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004ffc:	f7ff fe7c 	bl	8004cf8 <LL_RCC_LSE_IsEnabled>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d114      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005006:	f7fd ff13 	bl	8002e30 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800500c:	e00b      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fd ff0f 	bl	8002e30 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d902      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	77fb      	strb	r3, [r7, #31]
              break;
 8005024:	e004      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005026:	f7ff fe79 	bl	8004d1c <LL_RCC_LSE_IsReady>
 800502a:	4603      	mov	r3, r0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d1ee      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005030:	7ffb      	ldrb	r3, [r7, #31]
 8005032:	77bb      	strb	r3, [r7, #30]
 8005034:	e001      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	7ffb      	ldrb	r3, [r7, #31]
 8005038:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff feb6 	bl	8004dbc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fec1 	bl	8004de8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fee9 	bl	8004e4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fede 	bl	8004e4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff feb6 	bl	8004e14 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02b      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050c6:	d003      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fed4 	bl	8004e82 <LL_RCC_SetRNGClockSource>
 80050da:	e00a      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	2000      	movs	r0, #0
 80050e8:	f7ff fecb 	bl	8004e82 <LL_RCC_SetRNGClockSource>
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fede 	bl	8004eae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80050fa:	d107      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800510a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fedc 	bl	8004eda <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800512a:	d107      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513a:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fdf7 	bl	8004d40 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fe16 	bl	8004d94 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fdfd 	bl	8004d6c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005172:	7fbb      	ldrb	r3, [r7, #30]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e077      	b.n	8005282 <HAL_RTC_Init+0x106>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fc80 	bl	8002aac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d055      	beq.n	800526e <HAL_RTC_Init+0xf2>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	22ca      	movs	r2, #202	@ 0xca
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2253      	movs	r2, #83	@ 0x53
 80051d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f880 	bl	80052d8 <RTC_EnterInitMode>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d12c      	bne.n	800523c <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80051f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68d2      	ldr	r2, [r2, #12]
 800521c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6919      	ldr	r1, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f888 	bl	8005348 <RTC_ExitInitMode>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <HAL_RTC_Init+0xe8>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_REMAP_POS1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0202 	bic.w	r2, r2, #2
 8005250:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695a      	ldr	r2, [r3, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	22ff      	movs	r2, #255	@ 0xff
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24
 800526c:	e001      	b.n	8005272 <HAL_RTC_Init+0xf6>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <HAL_RTC_Init+0x104>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <HAL_RTC_WaitForSynchro+0x48>)
 800529e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a0:	f7fd fdc6 	bl	8002e30 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052a6:	e009      	b.n	80052bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052a8:	f7fd fdc2 	bl	8002e30 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052b6:	d901      	bls.n	80052bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e007      	b.n	80052cc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ee      	beq.n	80052a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	00015f5f 	.word	0x00015f5f

080052d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d123      	bne.n	800533e <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005304:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005306:	f7fd fd93 	bl	8002e30 <HAL_GetTick>
 800530a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800530c:	e00d      	b.n	800532a <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800530e:	f7fd fd8f 	bl	8002e30 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800531c:	d905      	bls.n	800532a <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2204      	movs	r2, #4
 8005322:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <RTC_EnterInitMode+0x66>
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d1e7      	bne.n	800530e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005362:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff ff8a 	bl	800528c <HAL_RTC_WaitForSynchro>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80053a0:	4b5f      	ldr	r3, [pc, #380]	@ (8005520 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005524 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0adb      	lsrs	r3, r3, #11
 80053ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e0a7      	b.n	8005514 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	22ca      	movs	r2, #202	@ 0xca
 80053da:	625a      	str	r2, [r3, #36]	@ 0x24
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2253      	movs	r2, #83	@ 0x53
 80053e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2203      	movs	r2, #3
 800540a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e07c      	b.n	8005514 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e4      	bne.n	80053f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005436:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005448:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800544a:	4b35      	ldr	r3, [pc, #212]	@ (8005520 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a35      	ldr	r2, [pc, #212]	@ (8005524 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	0adb      	lsrs	r3, r3, #11
 8005456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3b01      	subs	r3, #1
 8005464:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10d      	bne.n	8005488 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	22ff      	movs	r2, #255	@ 0xff
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2203      	movs	r2, #3
 8005478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e045      	b.n	8005514 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0e4      	beq.n	8005460 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0207 	bic.w	r2, r2, #7
 80054a4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6899      	ldr	r1, [r3, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80054be:	4b1a      	ldr	r3, [pc, #104]	@ (8005528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80054c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c4:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80054c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80054ce:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a15      	ldr	r2, [pc, #84]	@ (8005528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80054d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054d8:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054e8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	22ff      	movs	r2, #255	@ 0xff
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	20000020 	.word	0x20000020
 8005524:	10624dd3 	.word	0x10624dd3
 8005528:	58000800 	.word	0x58000800

0800552c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e095      	b.n	800566a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800554e:	d009      	beq.n	8005564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	61da      	str	r2, [r3, #28]
 8005556:	e005      	b.n	8005564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fd fac8 	bl	8002b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800559a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055a4:	d902      	bls.n	80055ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e002      	b.n	80055b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80055ba:	d007      	beq.n	80055cc <HAL_SPI_Init+0xa0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560e:	ea42 0103 	orr.w	r1, r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005616:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	f003 0204 	and.w	r2, r3, #4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005648:	ea42 0103 	orr.w	r1, r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005682:	f7fd fbd5 	bl	8002e30 <HAL_GetTick>
 8005686:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d001      	beq.n	800569c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
 800569a:	e15c      	b.n	8005956 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0x36>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e154      	b.n	8005956 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_SPI_Transmit+0x48>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e14d      	b.n	8005956 <HAL_SPI_Transmit+0x2e4>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2203      	movs	r2, #3
 80056c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570c:	d10f      	bne.n	800572e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800571c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800572c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b40      	cmp	r3, #64	@ 0x40
 800573a:	d007      	beq.n	800574c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800574a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005754:	d952      	bls.n	80057fc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0xf2>
 800575e:	8b7b      	ldrh	r3, [r7, #26]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d145      	bne.n	80057f0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005788:	e032      	b.n	80057f0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d112      	bne.n	80057be <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	881a      	ldrh	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	1c9a      	adds	r2, r3, #2
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057bc:	e018      	b.n	80057f0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057be:	f7fd fb37 	bl	8002e30 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d803      	bhi.n	80057d6 <HAL_SPI_Transmit+0x164>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_Transmit+0x16a>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0b2      	b.n	8005956 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1c7      	bne.n	800578a <HAL_SPI_Transmit+0x118>
 80057fa:	e083      	b.n	8005904 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Transmit+0x198>
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d177      	bne.n	80058fa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d912      	bls.n	800583a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	1c9a      	adds	r2, r3, #2
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b02      	subs	r3, #2
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005838:	e05f      	b.n	80058fa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	7812      	ldrb	r2, [r2, #0]
 8005846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005860:	e04b      	b.n	80058fa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d12b      	bne.n	80058c8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d912      	bls.n	80058a0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588a:	1c9a      	adds	r2, r3, #2
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b02      	subs	r3, #2
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800589e:	e02c      	b.n	80058fa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058c6:	e018      	b.n	80058fa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c8:	f7fd fab2 	bl	8002e30 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d803      	bhi.n	80058e0 <HAL_SPI_Transmit+0x26e>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d102      	bne.n	80058e6 <HAL_SPI_Transmit+0x274>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e02d      	b.n	8005956 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1ae      	bne.n	8005862 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fcf5 	bl	80062f8 <SPI_EndRxTxTransaction>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005954:	2300      	movs	r3, #0
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b088      	sub	sp, #32
 8005962:	af02      	add	r7, sp, #8
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
 800597c:	e123      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_Receive+0x2c>
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e11b      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005996:	d112      	bne.n	80059be <HAL_SPI_Receive+0x60>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10e      	bne.n	80059be <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2204      	movs	r2, #4
 80059a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f90a 	bl	8005bce <HAL_SPI_TransmitReceive>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e103      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059be:	f7fd fa37 	bl	8002e30 <HAL_GetTick>
 80059c2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_SPI_Receive+0x74>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e0f9      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2204      	movs	r2, #4
 80059de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	88fa      	ldrh	r2, [r7, #6]
 80059f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a24:	d908      	bls.n	8005a38 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	e007      	b.n	8005a48 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a50:	d10f      	bne.n	8005a72 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b40      	cmp	r3, #64	@ 0x40
 8005a7e:	d007      	beq.n	8005a90 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a98:	d875      	bhi.n	8005b86 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a9a:	e037      	b.n	8005b0c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d117      	bne.n	8005ada <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f103 020c 	add.w	r2, r3, #12
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005ad8:	e018      	b.n	8005b0c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ada:	f7fd f9a9 	bl	8002e30 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d803      	bhi.n	8005af2 <HAL_SPI_Receive+0x194>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d102      	bne.n	8005af8 <HAL_SPI_Receive+0x19a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e05c      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1c1      	bne.n	8005a9c <HAL_SPI_Receive+0x13e>
 8005b18:	e03b      	b.n	8005b92 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d115      	bne.n	8005b54 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	b292      	uxth	r2, r2
 8005b34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	1c9a      	adds	r2, r3, #2
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b52:	e018      	b.n	8005b86 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b54:	f7fd f96c 	bl	8002e30 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d803      	bhi.n	8005b6c <HAL_SPI_Receive+0x20e>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d102      	bne.n	8005b72 <HAL_SPI_Receive+0x214>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e01f      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c3      	bne.n	8005b1a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fb56 	bl	8006248 <SPI_EndRxTransaction>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b08a      	sub	sp, #40	@ 0x28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be0:	f7fd f926 	bl	8002e30 <HAL_GetTick>
 8005be4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005bf8:	887b      	ldrh	r3, [r7, #2]
 8005bfa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bfc:	7ffb      	ldrb	r3, [r7, #31]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d00c      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x4e>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c08:	d106      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x4a>
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d001      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e1f3      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x60>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x60>
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e1e8      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_SPI_TransmitReceive+0x72>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e1e1      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d003      	beq.n	8005c5c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2205      	movs	r2, #5
 8005c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	887a      	ldrh	r2, [r7, #2]
 8005c74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	887a      	ldrh	r2, [r7, #2]
 8005c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	887a      	ldrh	r2, [r7, #2]
 8005c88:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c9e:	d802      	bhi.n	8005ca6 <HAL_SPI_TransmitReceive+0xd8>
 8005ca0:	8abb      	ldrh	r3, [r7, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d908      	bls.n	8005cb8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	e007      	b.n	8005cc8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d007      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cee:	f240 8083 	bls.w	8005df8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x132>
 8005cfa:	8afb      	ldrh	r3, [r7, #22]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d16f      	bne.n	8005de0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d24:	e05c      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11b      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x19e>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x19e>
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d113      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d11c      	bne.n	8005db4 <HAL_SPI_TransmitReceive+0x1e6>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d016      	beq.n	8005db4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	b292      	uxth	r2, r2
 8005d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005db0:	2301      	movs	r3, #1
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005db4:	f7fd f83c 	bl	8002e30 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d80d      	bhi.n	8005de0 <HAL_SPI_TransmitReceive+0x212>
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d009      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e111      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d19d      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x158>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d197      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x158>
 8005df6:	e0e5      	b.n	8005fc4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_SPI_TransmitReceive+0x23a>
 8005e00:	8afb      	ldrh	r3, [r7, #22]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f040 80d1 	bne.w	8005faa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d912      	bls.n	8005e38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	881a      	ldrh	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b02      	subs	r3, #2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e36:	e0b8      	b.n	8005faa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e5e:	e0a4      	b.n	8005faa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d134      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x30a>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d02f      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x30a>
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d12c      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d912      	bls.n	8005eae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	881a      	ldrh	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	1c9a      	adds	r2, r3, #2
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b02      	subs	r3, #2
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eac:	e012      	b.n	8005ed4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	7812      	ldrb	r2, [r2, #0]
 8005eba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d148      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x3aa>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d042      	beq.n	8005f78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d923      	bls.n	8005f46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f08:	b292      	uxth	r2, r2
 8005f0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b02      	subs	r3, #2
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d81f      	bhi.n	8005f74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	e016      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f103 020c 	add.w	r2, r3, #12
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	7812      	ldrb	r2, [r2, #0]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f74:	2301      	movs	r3, #1
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f78:	f7fc ff5a 	bl	8002e30 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d803      	bhi.n	8005f90 <HAL_SPI_TransmitReceive+0x3c2>
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d102      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x3c8>
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e02c      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f af55 	bne.w	8005e60 <HAL_SPI_TransmitReceive+0x292>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f47f af4e 	bne.w	8005e60 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f995 	bl	80062f8 <SPI_EndRxTxTransaction>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e00e      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006002:	2300      	movs	r3, #0
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3728      	adds	r7, #40	@ 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800601c:	f7fc ff08 	bl	8002e30 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4413      	add	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800602c:	f7fc ff00 	bl	8002e30 <HAL_GetTick>
 8006030:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006032:	4b39      	ldr	r3, [pc, #228]	@ (8006118 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	015b      	lsls	r3, r3, #5
 8006038:	0d1b      	lsrs	r3, r3, #20
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006042:	e054      	b.n	80060ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d050      	beq.n	80060ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800604c:	f7fc fef0 	bl	8002e30 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	429a      	cmp	r2, r3
 800605a:	d902      	bls.n	8006062 <SPI_WaitFlagStateUntilTimeout+0x56>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d13d      	bne.n	80060de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800607a:	d111      	bne.n	80060a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006084:	d004      	beq.n	8006090 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608e:	d107      	bne.n	80060a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a8:	d10f      	bne.n	80060ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e017      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	429a      	cmp	r2, r3
 800610a:	d19b      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000020 	.word	0x20000020

0800611c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	@ 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800612e:	f7fc fe7f 	bl	8002e30 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	4413      	add	r3, r2
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800613e:	f7fc fe77 	bl	8002e30 <HAL_GetTick>
 8006142:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800614c:	4b3d      	ldr	r3, [pc, #244]	@ (8006244 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00da      	lsls	r2, r3, #3
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	0d1b      	lsrs	r3, r3, #20
 800615c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006164:	e060      	b.n	8006228 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800616c:	d107      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x62>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800617c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d050      	beq.n	8006228 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006186:	f7fc fe53 	bl	8002e30 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006192:	429a      	cmp	r2, r3
 8006194:	d902      	bls.n	800619c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d13d      	bne.n	8006218 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061b4:	d111      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061be:	d004      	beq.n	80061ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c8:	d107      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e2:	d10f      	bne.n	8006204 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006202:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e010      	b.n	800623a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	3b01      	subs	r3, #1
 8006226:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4013      	ands	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d196      	bne.n	8006166 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	@ 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000020 	.word	0x20000020

08006248 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800625c:	d111      	bne.n	8006282 <SPI_EndRxTransaction+0x3a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006266:	d004      	beq.n	8006272 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006270:	d107      	bne.n	8006282 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006280:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	2180      	movs	r1, #128	@ 0x80
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff febd 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e023      	b.n	80062f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b0:	d11d      	bne.n	80062ee <SPI_EndRxTransaction+0xa6>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ba:	d004      	beq.n	80062c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c4:	d113      	bne.n	80062ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff ff22 	bl	800611c <SPI_WaitFifoStateUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e2:	f043 0220 	orr.w	r2, r3, #32
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e000      	b.n	80062f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff ff03 	bl	800611c <SPI_WaitFifoStateUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e027      	b.n	800637c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	2180      	movs	r1, #128	@ 0x80
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fe68 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e014      	b.n	800637c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff fedc 	bl	800611c <SPI_WaitFifoStateUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e000      	b.n	800637c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	2218      	movs	r2, #24
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f001 f9ec 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 800639c:	233f      	movs	r3, #63	@ 0x3f
 800639e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80063a0:	2381      	movs	r3, #129	@ 0x81
 80063a2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80063a8:	2301      	movs	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063ac:	f107 0308 	add.w	r3, r7, #8
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fc68 	bl	8007c88 <hci_send_req>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da01      	bge.n	80063c2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80063be:	23ff      	movs	r3, #255	@ 0xff
 80063c0:	e000      	b.n	80063c4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80063c2:	79fb      	ldrb	r3, [r7, #7]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80063cc:	b5b0      	push	{r4, r5, r7, lr}
 80063ce:	b0ce      	sub	sp, #312	@ 0x138
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4605      	mov	r5, r0
 80063d4:	460c      	mov	r4, r1
 80063d6:	4610      	mov	r0, r2
 80063d8:	4619      	mov	r1, r3
 80063da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063de:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80063e2:	462a      	mov	r2, r5
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80063ee:	4622      	mov	r2, r4
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063f6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80063fa:	4602      	mov	r2, r0
 80063fc:	801a      	strh	r2, [r3, #0]
 80063fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006402:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006406:	460a      	mov	r2, r1
 8006408:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800640a:	f107 0310 	add.w	r3, r7, #16
 800640e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006412:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006416:	3308      	adds	r3, #8
 8006418:	f107 0210 	add.w	r2, r7, #16
 800641c:	4413      	add	r3, r2
 800641e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006422:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006426:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800642a:	4413      	add	r3, r2
 800642c:	3309      	adds	r3, #9
 800642e:	f107 0210 	add.w	r2, r7, #16
 8006432:	4413      	add	r3, r2
 8006434:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800643c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800644a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800644e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006452:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800645a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800645e:	3301      	adds	r3, #1
 8006460:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006464:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006468:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800646c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006470:	8812      	ldrh	r2, [r2, #0]
 8006472:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006476:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800647a:	3302      	adds	r3, #2
 800647c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006480:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006484:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006488:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800648c:	8812      	ldrh	r2, [r2, #0]
 800648e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006492:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006496:	3302      	adds	r3, #2
 8006498:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800649c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064a0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80064a4:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80064ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80064b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064ba:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80064be:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80064c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064c4:	3301      	adds	r3, #1
 80064c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80064ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064ce:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80064d2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80064d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064d8:	3301      	adds	r3, #1
 80064da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80064de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064e2:	3308      	adds	r3, #8
 80064e4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80064e8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 f931 	bl	8007754 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80064f2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80064f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80064fa:	4413      	add	r3, r2
 80064fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006500:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006504:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006508:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800650a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800650e:	3301      	adds	r3, #1
 8006510:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006514:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006518:	3301      	adds	r3, #1
 800651a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800651e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f916 	bl	8007754 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006528:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800652c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006530:	4413      	add	r3, r2
 8006532:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800653a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800653e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006540:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006544:	3302      	adds	r3, #2
 8006546:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800654a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800654e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006552:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006554:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006558:	3302      	adds	r3, #2
 800655a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800655e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006562:	2218      	movs	r2, #24
 8006564:	2100      	movs	r1, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f001 f904 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 800656c:	233f      	movs	r3, #63	@ 0x3f
 800656e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006572:	2383      	movs	r3, #131	@ 0x83
 8006574:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006578:	f107 0310 	add.w	r3, r7, #16
 800657c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006580:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006584:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006588:	f107 030f 	add.w	r3, r7, #15
 800658c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006590:	2301      	movs	r3, #1
 8006592:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f001 fb73 	bl	8007c88 <hci_send_req>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	da01      	bge.n	80065ac <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80065a8:	23ff      	movs	r3, #255	@ 0xff
 80065aa:	e004      	b.n	80065b6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80065ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80065b0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80065b4:	781b      	ldrb	r3, [r3, #0]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80065bc:	46bd      	mov	sp, r7
 80065be:	bdb0      	pop	{r4, r5, r7, pc}

080065c0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b0cc      	sub	sp, #304	@ 0x130
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4602      	mov	r2, r0
 80065c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065cc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80065d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80065d2:	f107 0310 	add.w	r3, r7, #16
 80065d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80065da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006600:	3301      	adds	r3, #1
 8006602:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006606:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800660a:	2218      	movs	r2, #24
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f001 f8b0 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006614:	233f      	movs	r3, #63	@ 0x3f
 8006616:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800661a:	2385      	movs	r3, #133	@ 0x85
 800661c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006620:	f107 0310 	add.w	r3, r7, #16
 8006624:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006628:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800662c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006630:	f107 030f 	add.w	r3, r7, #15
 8006634:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006638:	2301      	movs	r3, #1
 800663a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800663e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fb1f 	bl	8007c88 <hci_send_req>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	da01      	bge.n	8006654 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006650:	23ff      	movs	r3, #255	@ 0xff
 8006652:	e004      	b.n	800665e <aci_gap_set_io_capability+0x9e>
  return status;
 8006654:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006658:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800665c:	781b      	ldrb	r3, [r3, #0]
}
 800665e:	4618      	mov	r0, r3
 8006660:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006668:	b5b0      	push	{r4, r5, r7, lr}
 800666a:	b0cc      	sub	sp, #304	@ 0x130
 800666c:	af00      	add	r7, sp, #0
 800666e:	4605      	mov	r5, r0
 8006670:	460c      	mov	r4, r1
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800667a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800667e:	462a      	mov	r2, r5
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006686:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800668a:	4622      	mov	r2, r4
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006692:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006696:	4602      	mov	r2, r0
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800669e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80066a2:	460a      	mov	r2, r1
 80066a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80066ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80066c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066c8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80066cc:	7812      	ldrb	r2, [r2, #0]
 80066ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066d4:	3301      	adds	r3, #1
 80066d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80066ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066ee:	3301      	adds	r3, #1
 80066f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80066f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066fc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006704:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006708:	3301      	adds	r3, #1
 800670a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800670e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006712:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006716:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800671a:	7812      	ldrb	r2, [r2, #0]
 800671c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800671e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006722:	3301      	adds	r3, #1
 8006724:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006728:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800672c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006730:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006732:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006736:	3301      	adds	r3, #1
 8006738:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800673c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006740:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006744:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006746:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800674a:	3301      	adds	r3, #1
 800674c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006750:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006754:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006758:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800675a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800675e:	3301      	adds	r3, #1
 8006760:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006764:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006768:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800676c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006770:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006774:	3304      	adds	r3, #4
 8006776:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800677a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800677e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006782:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006788:	3301      	adds	r3, #1
 800678a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800678e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006792:	2218      	movs	r2, #24
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ffec 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 800679c:	233f      	movs	r3, #63	@ 0x3f
 800679e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80067a2:	2386      	movs	r3, #134	@ 0x86
 80067a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067a8:	f107 0310 	add.w	r3, r7, #16
 80067ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80067b8:	f107 030f 	add.w	r3, r7, #15
 80067bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fa5b 	bl	8007c88 <hci_send_req>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da01      	bge.n	80067dc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80067d8:	23ff      	movs	r3, #255	@ 0xff
 80067da:	e004      	b.n	80067e6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80067dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80067e4:	781b      	ldrb	r3, [r3, #0]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bdb0      	pop	{r4, r5, r7, pc}

080067f0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b0cc      	sub	sp, #304	@ 0x130
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4602      	mov	r2, r0
 80067f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006800:	6019      	str	r1, [r3, #0]
 8006802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006806:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800680a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800680c:	f107 0310 	add.w	r3, r7, #16
 8006810:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006818:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800682a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800682e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006832:	8812      	ldrh	r2, [r2, #0]
 8006834:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006836:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800683a:	3302      	adds	r3, #2
 800683c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006844:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006848:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006852:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006856:	3304      	adds	r3, #4
 8006858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800685c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006860:	2218      	movs	r2, #24
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f000 ff85 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 800686a:	233f      	movs	r3, #63	@ 0x3f
 800686c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8006870:	2388      	movs	r3, #136	@ 0x88
 8006872:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006876:	f107 0310 	add.w	r3, r7, #16
 800687a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800687e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006882:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006886:	f107 030f 	add.w	r3, r7, #15
 800688a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800688e:	2301      	movs	r3, #1
 8006890:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006894:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f9f4 	bl	8007c88 <hci_send_req>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da01      	bge.n	80068aa <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80068a6:	23ff      	movs	r3, #255	@ 0xff
 80068a8:	e004      	b.n	80068b4 <aci_gap_pass_key_resp+0xc4>
  return status;
 80068aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068b2:	781b      	ldrb	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80068be:	b590      	push	{r4, r7, lr}
 80068c0:	b0cd      	sub	sp, #308	@ 0x134
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	4604      	mov	r4, r0
 80068c6:	4608      	mov	r0, r1
 80068c8:	4611      	mov	r1, r2
 80068ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80068ce:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068d8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80068dc:	4622      	mov	r2, r4
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80068e8:	4602      	mov	r2, r0
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068f0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80068f4:	460a      	mov	r2, r1
 80068f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006900:	f107 0308 	add.w	r3, r7, #8
 8006904:	2207      	movs	r2, #7
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f000 ff33 	bl	8007774 <Osal_MemSet>
  int index_input = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006918:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800691c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006924:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006928:	3301      	adds	r3, #1
 800692a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800692e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006932:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006936:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800693e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006942:	3301      	adds	r3, #1
 8006944:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006948:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800694c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006950:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006958:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800695c:	3301      	adds	r3, #1
 800695e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006962:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006966:	2218      	movs	r2, #24
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f000 ff02 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006970:	233f      	movs	r3, #63	@ 0x3f
 8006972:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006976:	238a      	movs	r3, #138	@ 0x8a
 8006978:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800697c:	f107 0310 	add.w	r3, r7, #16
 8006980:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006984:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006988:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006994:	2307      	movs	r3, #7
 8006996:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800699a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 f971 	bl	8007c88 <hci_send_req>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da01      	bge.n	80069b0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80069ac:	23ff      	movs	r3, #255	@ 0xff
 80069ae:	e02e      	b.n	8006a0e <aci_gap_init+0x150>
  if ( resp.Status )
 80069b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <aci_gap_init+0x10c>
    return resp.Status;
 80069be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	e021      	b.n	8006a0e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80069ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80069d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80069e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80069ec:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80069f6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80069f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006a00:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a0a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd90      	pop	{r4, r7, pc}

08006a18 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b0cc      	sub	sp, #304	@ 0x130
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4602      	mov	r2, r0
 8006a20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006a28:	6019      	str	r1, [r3, #0]
 8006a2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a2e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006a34:	f107 0310 	add.w	r3, r7, #16
 8006a38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a56:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a62:	3301      	adds	r3, #1
 8006a64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a6c:	1c58      	adds	r0, r3, #1
 8006a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a72:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a7c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006a80:	6819      	ldr	r1, [r3, #0]
 8006a82:	f000 fe67 	bl	8007754 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006a86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a8a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006a94:	4413      	add	r3, r2
 8006a96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a9e:	2218      	movs	r2, #24
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fe66 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006aa8:	233f      	movs	r3, #63	@ 0x3f
 8006aaa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8006aae:	238e      	movs	r3, #142	@ 0x8e
 8006ab0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006ab4:	f107 0310 	add.w	r3, r7, #16
 8006ab8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ac0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006ac4:	f107 030f 	add.w	r3, r7, #15
 8006ac8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ad2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f8d5 	bl	8007c88 <hci_send_req>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da01      	bge.n	8006ae8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006ae4:	23ff      	movs	r3, #255	@ 0xff
 8006ae6:	e004      	b.n	8006af2 <aci_gap_update_adv_data+0xda>
  return status;
 8006ae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006aec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006af0:	781b      	ldrb	r3, [r3, #0]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b06:	f107 0308 	add.w	r3, r7, #8
 8006b0a:	2218      	movs	r2, #24
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fe30 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b14:	233f      	movs	r3, #63	@ 0x3f
 8006b16:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006b18:	2392      	movs	r3, #146	@ 0x92
 8006b1a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b1c:	1dfb      	adds	r3, r7, #7
 8006b1e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b20:	2301      	movs	r3, #1
 8006b22:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b24:	f107 0308 	add.w	r3, r7, #8
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f8ac 	bl	8007c88 <hci_send_req>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da01      	bge.n	8006b3a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b36:	23ff      	movs	r3, #255	@ 0xff
 8006b38:	e000      	b.n	8006b3c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <aci_gap_terminate>:

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b0cc      	sub	sp, #304	@ 0x130
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b50:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b5a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006b5e:	460a      	mov	r2, r1
 8006b60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006b6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b6e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006b72:	2200      	movs	r2, #0
 8006b74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b80:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b84:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006b88:	8812      	ldrh	r2, [r2, #0]
 8006b8a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b90:	3302      	adds	r3, #2
 8006b92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 8006b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b9a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b9e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006baa:	3301      	adds	r3, #1
 8006bac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006bb4:	2218      	movs	r2, #24
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fddb 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bbe:	233f      	movs	r3, #63	@ 0x3f
 8006bc0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 8006bc4:	2393      	movs	r3, #147	@ 0x93
 8006bc6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8006bca:	230f      	movs	r3, #15
 8006bcc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8006bd0:	f107 0310 	add.w	r3, r7, #16
 8006bd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006bdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006be0:	f107 030f 	add.w	r3, r7, #15
 8006be4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 f847 	bl	8007c88 <hci_send_req>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	da01      	bge.n	8006c04 <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8006c00:	23ff      	movs	r3, #255	@ 0xff
 8006c02:	e004      	b.n	8006c0e <aci_gap_terminate+0xca>
  return status;
 8006c04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c0c:	781b      	ldrb	r3, [r3, #0]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b0cc      	sub	sp, #304	@ 0x130
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c24:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c2e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006c32:	460a      	mov	r2, r1
 8006c34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006c36:	f107 0310 	add.w	r3, r7, #16
 8006c3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006c3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c54:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c58:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006c5c:	8812      	ldrh	r2, [r2, #0]
 8006c5e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c64:	3302      	adds	r3, #2
 8006c66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c6e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c72:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006c76:	7812      	ldrb	r2, [r2, #0]
 8006c78:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c7e:	3301      	adds	r3, #1
 8006c80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c88:	2218      	movs	r2, #24
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fd71 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c92:	233f      	movs	r3, #63	@ 0x3f
 8006c94:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8006c98:	23a5      	movs	r3, #165	@ 0xa5
 8006c9a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006c9e:	f107 0310 	add.w	r3, r7, #16
 8006ca2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006caa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006cae:	f107 030f 	add.w	r3, r7, #15
 8006cb2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ffe0 	bl	8007c88 <hci_send_req>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da01      	bge.n	8006cd2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006cce:	23ff      	movs	r3, #255	@ 0xff
 8006cd0:	e004      	b.n	8006cdc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006cd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006cd6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006cda:	781b      	ldrb	r3, [r3, #0]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b088      	sub	sp, #32
 8006cea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	2218      	movs	r2, #24
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fd3b 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cfe:	233f      	movs	r3, #63	@ 0x3f
 8006d00:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006d02:	f240 1301 	movw	r3, #257	@ 0x101
 8006d06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006d08:	1dfb      	adds	r3, r7, #7
 8006d0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d10:	f107 0308 	add.w	r3, r7, #8
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 ffb6 	bl	8007c88 <hci_send_req>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da01      	bge.n	8006d26 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006d22:	23ff      	movs	r3, #255	@ 0xff
 8006d24:	e000      	b.n	8006d28 <aci_gatt_init+0x42>
  return status;
 8006d26:	79fb      	ldrb	r3, [r7, #7]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b0cf      	sub	sp, #316	@ 0x13c
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8006d3c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8006d40:	6001      	str	r1, [r0, #0]
 8006d42:	4610      	mov	r0, r2
 8006d44:	4619      	mov	r1, r3
 8006d46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d4a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006d4e:	4622      	mov	r2, r4
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d56:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d62:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006d66:	460a      	mov	r2, r1
 8006d68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d76:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d00a      	beq.n	8006d96 <aci_gatt_add_service+0x66>
 8006d80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d84:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d101      	bne.n	8006d92 <aci_gatt_add_service+0x62>
 8006d8e:	2311      	movs	r3, #17
 8006d90:	e002      	b.n	8006d98 <aci_gatt_add_service+0x68>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <aci_gatt_add_service+0x68>
 8006d96:	2303      	movs	r3, #3
 8006d98:	f107 0210 	add.w	r2, r7, #16
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006da2:	f107 030c 	add.w	r3, r7, #12
 8006da6:	2203      	movs	r2, #3
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fce2 	bl	8007774 <Osal_MemSet>
  int index_input = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006db6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006dba:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006dbe:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dd4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d002      	beq.n	8006de4 <aci_gatt_add_service+0xb4>
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d004      	beq.n	8006dec <aci_gatt_add_service+0xbc>
 8006de2:	e007      	b.n	8006df4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006de4:	2302      	movs	r3, #2
 8006de6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006dea:	e005      	b.n	8006df8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006dec:	2310      	movs	r3, #16
 8006dee:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006df2:	e001      	b.n	8006df8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006df4:	2397      	movs	r3, #151	@ 0x97
 8006df6:	e06c      	b.n	8006ed2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006df8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006dfc:	1c58      	adds	r0, r3, #1
 8006dfe:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8006e02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006e0a:	6819      	ldr	r1, [r3, #0]
 8006e0c:	f000 fca2 	bl	8007754 <Osal_MemCpy>
    index_input += size;
 8006e10:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8006e14:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006e18:	4413      	add	r3, r2
 8006e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e22:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006e26:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006e2a:	7812      	ldrb	r2, [r2, #0]
 8006e2c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e32:	3301      	adds	r3, #1
 8006e34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e3c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006e40:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e56:	2218      	movs	r2, #24
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fc8a 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e60:	233f      	movs	r3, #63	@ 0x3f
 8006e62:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8006e66:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006e6a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e6e:	f107 0310 	add.w	r3, r7, #16
 8006e72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006e7e:	f107 030c 	add.w	r3, r7, #12
 8006e82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006e86:	2303      	movs	r3, #3
 8006e88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fef8 	bl	8007c88 <hci_send_req>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da01      	bge.n	8006ea2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006e9e:	23ff      	movs	r3, #255	@ 0xff
 8006ea0:	e017      	b.n	8006ed2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006ea2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ea6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006eb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	e00a      	b.n	8006ed2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006ebc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ec4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8006ece:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd90      	pop	{r4, r7, pc}

08006edc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b0d1      	sub	sp, #324	@ 0x144
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006eea:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006eee:	600a      	str	r2, [r1, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006ef6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006efa:	4622      	mov	r2, r4
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f02:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006f06:	4602      	mov	r2, r0
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f0e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8006f12:	460a      	mov	r2, r1
 8006f14:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006f1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f22:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d00a      	beq.n	8006f42 <aci_gatt_add_char+0x66>
 8006f2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f30:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d101      	bne.n	8006f3e <aci_gatt_add_char+0x62>
 8006f3a:	2313      	movs	r3, #19
 8006f3c:	e002      	b.n	8006f44 <aci_gatt_add_char+0x68>
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e000      	b.n	8006f44 <aci_gatt_add_char+0x68>
 8006f42:	2305      	movs	r3, #5
 8006f44:	f107 0218 	add.w	r2, r7, #24
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	2203      	movs	r2, #3
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fc0c 	bl	8007774 <Osal_MemSet>
  int index_input = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8006f62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006f66:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006f6a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006f6e:	8812      	ldrh	r2, [r2, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006f72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f76:	3302      	adds	r3, #2
 8006f78:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006f7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006f80:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006f84:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006f88:	7812      	ldrb	r2, [r2, #0]
 8006f8a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f90:	3301      	adds	r3, #1
 8006f92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006f96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f9a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d002      	beq.n	8006faa <aci_gatt_add_char+0xce>
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d004      	beq.n	8006fb2 <aci_gatt_add_char+0xd6>
 8006fa8:	e007      	b.n	8006fba <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8006faa:	2302      	movs	r3, #2
 8006fac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006fb0:	e005      	b.n	8006fbe <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006fb8:	e001      	b.n	8006fbe <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006fba:	2397      	movs	r3, #151	@ 0x97
 8006fbc:	e091      	b.n	80070e2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006fbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006fc2:	1cd8      	adds	r0, r3, #3
 8006fc4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8006fc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006fcc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006fd0:	6819      	ldr	r1, [r3, #0]
 8006fd2:	f000 fbbf 	bl	8007754 <Osal_MemCpy>
    index_input += size;
 8006fd6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8006fda:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006fde:	4413      	add	r3, r2
 8006fe0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006fe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fe8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006fec:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006ff0:	8812      	ldrh	r2, [r2, #0]
 8006ff2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006ff4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006ffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007002:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8007006:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007008:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800700c:	3301      	adds	r3, #1
 800700e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007012:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007016:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800701a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800701c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007020:	3301      	adds	r3, #1
 8007022:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007026:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800702a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800702e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007030:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007034:	3301      	adds	r3, #1
 8007036:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800703a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800703e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007042:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007044:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007048:	3301      	adds	r3, #1
 800704a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800704e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007052:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8007056:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007058:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800705c:	3301      	adds	r3, #1
 800705e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007062:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007066:	2218      	movs	r2, #24
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fb82 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007070:	233f      	movs	r3, #63	@ 0x3f
 8007072:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8007076:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800707a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800707e:	f107 0318 	add.w	r3, r7, #24
 8007082:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007086:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800708a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800708e:	f107 0314 	add.w	r3, r7, #20
 8007092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007096:	2303      	movs	r3, #3
 8007098:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800709c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fdf0 	bl	8007c88 <hci_send_req>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da01      	bge.n	80070b2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80070ae:	23ff      	movs	r3, #255	@ 0xff
 80070b0:	e017      	b.n	80070e2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80070b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80070b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80070c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80070c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	e00a      	b.n	80070e2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80070cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80070d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80070d8:	b29a      	uxth	r2, r3
 80070da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80070de:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}

080070ec <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80070ec:	b5b0      	push	{r4, r5, r7, lr}
 80070ee:	b0cc      	sub	sp, #304	@ 0x130
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4605      	mov	r5, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007102:	462a      	mov	r2, r5
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800710a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800710e:	4622      	mov	r2, r4
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007116:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800711a:	4602      	mov	r2, r0
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007122:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007126:	460a      	mov	r2, r1
 8007128:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007132:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007136:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007144:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007148:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800714c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007150:	8812      	ldrh	r2, [r2, #0]
 8007152:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007154:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007158:	3302      	adds	r3, #2
 800715a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800715e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007162:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007166:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800716a:	8812      	ldrh	r2, [r2, #0]
 800716c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800716e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007172:	3302      	adds	r3, #2
 8007174:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800717c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007180:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800718c:	3301      	adds	r3, #1
 800718e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007196:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800719a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80071a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071a6:	3301      	adds	r3, #1
 80071a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071b0:	1d98      	adds	r0, r3, #6
 80071b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071b6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80071c2:	f000 fac7 	bl	8007754 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80071c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071ca:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80071d4:	4413      	add	r3, r2
 80071d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071de:	2218      	movs	r2, #24
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fac6 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071e8:	233f      	movs	r3, #63	@ 0x3f
 80071ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80071ee:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80071f2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80071f6:	f107 0310 	add.w	r3, r7, #16
 80071fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80071fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007202:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007206:	f107 030f 	add.w	r3, r7, #15
 800720a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fd34 	bl	8007c88 <hci_send_req>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	da01      	bge.n	800722a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007226:	23ff      	movs	r3, #255	@ 0xff
 8007228:	e004      	b.n	8007234 <aci_gatt_update_char_value+0x148>
  return status;
 800722a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800722e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007232:	781b      	ldrb	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800723a:	46bd      	mov	sp, r7
 800723c:	bdb0      	pop	{r4, r5, r7, pc}

0800723e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b0cc      	sub	sp, #304	@ 0x130
 8007242:	af00      	add	r7, sp, #0
 8007244:	4602      	mov	r2, r0
 8007246:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800724a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800724e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007250:	f107 0310 	add.w	r3, r7, #16
 8007254:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800725c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800726e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007272:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007276:	8812      	ldrh	r2, [r2, #0]
 8007278:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800727a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800727e:	3302      	adds	r3, #2
 8007280:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007284:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007288:	2218      	movs	r2, #24
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fa71 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007292:	233f      	movs	r3, #63	@ 0x3f
 8007294:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8007298:	f240 1325 	movw	r3, #293	@ 0x125
 800729c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80072a0:	f107 0310 	add.w	r3, r7, #16
 80072a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80072a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80072b0:	f107 030f 	add.w	r3, r7, #15
 80072b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fcdf 	bl	8007c88 <hci_send_req>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da01      	bge.n	80072d4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80072d0:	23ff      	movs	r3, #255	@ 0xff
 80072d2:	e004      	b.n	80072de <aci_gatt_confirm_indication+0xa0>
  return status;
 80072d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80072dc:	781b      	ldrb	r3, [r3, #0]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b0cc      	sub	sp, #304	@ 0x130
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4602      	mov	r2, r0
 80072f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80072f8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80072fa:	f107 0310 	add.w	r3, r7, #16
 80072fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007306:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007314:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007318:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800731c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007320:	8812      	ldrh	r2, [r2, #0]
 8007322:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007324:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007328:	3302      	adds	r3, #2
 800732a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800732e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007332:	2218      	movs	r2, #24
 8007334:	2100      	movs	r1, #0
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fa1c 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 800733c:	233f      	movs	r3, #63	@ 0x3f
 800733e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8007342:	f240 1327 	movw	r3, #295	@ 0x127
 8007346:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800734a:	f107 0310 	add.w	r3, r7, #16
 800734e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007352:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007356:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800735a:	f107 030f 	add.w	r3, r7, #15
 800735e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007362:	2301      	movs	r3, #1
 8007364:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007368:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fc8a 	bl	8007c88 <hci_send_req>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	da01      	bge.n	800737e <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800737a:	23ff      	movs	r3, #255	@ 0xff
 800737c:	e004      	b.n	8007388 <aci_gatt_allow_read+0xa0>
  return status;
 800737e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007382:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007386:	781b      	ldrb	r3, [r3, #0]
}
 8007388:	4618      	mov	r0, r3
 800738a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b0cc      	sub	sp, #304	@ 0x130
 8007396:	af00      	add	r7, sp, #0
 8007398:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80073aa:	4602      	mov	r2, r0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80073b6:	460a      	mov	r2, r1
 80073b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80073ba:	f107 0310 	add.w	r3, r7, #16
 80073be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80073c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80073d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80073dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80073e0:	7812      	ldrb	r2, [r2, #0]
 80073e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80073f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80073fa:	7812      	ldrb	r2, [r2, #0]
 80073fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80073fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007402:	3301      	adds	r3, #1
 8007404:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007408:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800740c:	1c98      	adds	r0, r3, #2
 800740e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007412:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800741c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	f000 f997 	bl	8007754 <Osal_MemCpy>
  index_input += Length;
 8007426:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800742a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007434:	4413      	add	r3, r2
 8007436:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800743a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800743e:	2218      	movs	r2, #24
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f996 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007448:	233f      	movs	r3, #63	@ 0x3f
 800744a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800744e:	230c      	movs	r3, #12
 8007450:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800745c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007460:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007464:	f107 030f 	add.w	r3, r7, #15
 8007468:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800746c:	2301      	movs	r3, #1
 800746e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fc05 	bl	8007c88 <hci_send_req>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	da01      	bge.n	8007488 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007484:	23ff      	movs	r3, #255	@ 0xff
 8007486:	e004      	b.n	8007492 <aci_hal_write_config_data+0x100>
  return status;
 8007488:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800748c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007490:	781b      	ldrb	r3, [r3, #0]
}
 8007492:	4618      	mov	r0, r3
 8007494:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b0cc      	sub	sp, #304	@ 0x130
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4602      	mov	r2, r0
 80074a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80074b6:	460a      	mov	r2, r1
 80074b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80074ba:	f107 0310 	add.w	r3, r7, #16
 80074be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80074c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80074d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074e8:	3301      	adds	r3, #1
 80074ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80074fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007502:	3301      	adds	r3, #1
 8007504:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800750c:	2218      	movs	r2, #24
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f000 f92f 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007516:	233f      	movs	r3, #63	@ 0x3f
 8007518:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800751c:	230f      	movs	r3, #15
 800751e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007522:	f107 0310 	add.w	r3, r7, #16
 8007526:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800752a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800752e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007532:	f107 030f 	add.w	r3, r7, #15
 8007536:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800753a:	2301      	movs	r3, #1
 800753c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007540:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fb9e 	bl	8007c88 <hci_send_req>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	da01      	bge.n	8007556 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007552:	23ff      	movs	r3, #255	@ 0xff
 8007554:	e004      	b.n	8007560 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800755a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800755e:	781b      	ldrb	r3, [r3, #0]
}
 8007560:	4618      	mov	r0, r3
 8007562:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b0cc      	sub	sp, #304	@ 0x130
 800756e:	af00      	add	r7, sp, #0
 8007570:	4602      	mov	r2, r0
 8007572:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007576:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800757a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800757c:	f107 0310 	add.w	r3, r7, #16
 8007580:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007584:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007588:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800758c:	2200      	movs	r2, #0
 800758e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007596:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800759a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800759e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80075a2:	8812      	ldrh	r2, [r2, #0]
 80075a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80075a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075aa:	3302      	adds	r3, #2
 80075ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80075b4:	2218      	movs	r2, #24
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f8db 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075be:	233f      	movs	r3, #63	@ 0x3f
 80075c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80075c4:	2318      	movs	r3, #24
 80075c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80075ca:	f107 0310 	add.w	r3, r7, #16
 80075ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80075d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80075da:	f107 030f 	add.w	r3, r7, #15
 80075de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fb4a 	bl	8007c88 <hci_send_req>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da01      	bge.n	80075fe <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80075fa:	23ff      	movs	r3, #255	@ 0xff
 80075fc:	e004      	b.n	8007608 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80075fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007602:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007606:	781b      	ldrb	r3, [r3, #0]
}
 8007608:	4618      	mov	r0, r3
 800760a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b088      	sub	sp, #32
 8007616:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800761c:	f107 0308 	add.w	r3, r7, #8
 8007620:	2218      	movs	r2, #24
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f8a5 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x03;
 800762a:	2303      	movs	r3, #3
 800762c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800762e:	2303      	movs	r3, #3
 8007630:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007632:	1dfb      	adds	r3, r7, #7
 8007634:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800763a:	f107 0308 	add.w	r3, r7, #8
 800763e:	2100      	movs	r1, #0
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fb21 	bl	8007c88 <hci_send_req>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	da01      	bge.n	8007650 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800764c:	23ff      	movs	r3, #255	@ 0xff
 800764e:	e000      	b.n	8007652 <hci_reset+0x40>
  return status;
 8007650:	79fb      	ldrb	r3, [r7, #7]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800765a:	b590      	push	{r4, r7, lr}
 800765c:	b0cd      	sub	sp, #308	@ 0x134
 800765e:	af00      	add	r7, sp, #0
 8007660:	4604      	mov	r4, r0
 8007662:	4608      	mov	r0, r1
 8007664:	4611      	mov	r1, r2
 8007666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800766a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800766e:	4622      	mov	r2, r4
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007676:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800767a:	4602      	mov	r2, r0
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007682:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007686:	460a      	mov	r2, r1
 8007688:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007692:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007696:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80076a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076ac:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80076b0:	7812      	ldrb	r2, [r2, #0]
 80076b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80076ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076d2:	3301      	adds	r3, #1
 80076d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80076d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076e0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80076e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80076f6:	2218      	movs	r2, #24
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f83a 	bl	8007774 <Osal_MemSet>
  rq.ogf = 0x08;
 8007700:	2308      	movs	r3, #8
 8007702:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007706:	2331      	movs	r3, #49	@ 0x31
 8007708:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800770c:	f107 0310 	add.w	r3, r7, #16
 8007710:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007718:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800771c:	f107 030f 	add.w	r3, r7, #15
 8007720:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007724:	2301      	movs	r3, #1
 8007726:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800772a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f000 faa9 	bl	8007c88 <hci_send_req>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	da01      	bge.n	8007740 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800773c:	23ff      	movs	r3, #255	@ 0xff
 800773e:	e004      	b.n	800774a <hci_le_set_default_phy+0xf0>
  return status;
 8007740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007744:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007748:	781b      	ldrb	r3, [r3, #0]
}
 800774a:	4618      	mov	r0, r3
 800774c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007750:	46bd      	mov	sp, r7
 8007752:	bd90      	pop	{r4, r7, pc}

08007754 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f002 fbf3 	bl	8009f50 <memcpy>
 800776a:	4603      	mov	r3, r0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f002 fbb7 	bl	8009ef8 <memset>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  return;
 8007798:	bf00      	nop
}
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80077a2:	b480      	push	{r7}
 80077a4:	af00      	add	r7, sp, #0
  return;
 80077a6:	bf00      	nop
}
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return;
 80077b4:	bf00      	nop
}
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80077be:	b480      	push	{r7}
 80077c0:	af00      	add	r7, sp, #0
  return;
 80077c2:	bf00      	nop
}
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return;
 80077d0:	bf00      	nop
}
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0
  return;
 80077de:	bf00      	nop
}
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  return;
 80077ec:	bf00      	nop
}
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80077f6:	b480      	push	{r7}
 80077f8:	af00      	add	r7, sp, #0
  return;
 80077fa:	bf00      	nop
}
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return;
 8007808:	bf00      	nop
}
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007812:	b480      	push	{r7}
 8007814:	af00      	add	r7, sp, #0
  return;
 8007816:	bf00      	nop
}
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return;
 8007824:	bf00      	nop
}
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800782e:	b480      	push	{r7}
 8007830:	af00      	add	r7, sp, #0
  return;
 8007832:	bf00      	nop
}
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return;
 8007840:	bf00      	nop
}
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800784a:	b480      	push	{r7}
 800784c:	af00      	add	r7, sp, #0
  return;
 800784e:	bf00      	nop
}
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  return;
 800785c:	bf00      	nop
}
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007866:	b480      	push	{r7}
 8007868:	af00      	add	r7, sp, #0
  return;
 800786a:	bf00      	nop
}
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return;
 8007878:	bf00      	nop
}
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007888:	4b04      	ldr	r3, [pc, #16]	@ (800789c <SVCCTL_Init+0x18>)
 800788a:	2200      	movs	r2, #0
 800788c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800788e:	4b04      	ldr	r3, [pc, #16]	@ (80078a0 <SVCCTL_Init+0x1c>)
 8007890:	2200      	movs	r2, #0
 8007892:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007894:	f000 f806 	bl	80078a4 <SVCCTL_SvcInit>

  return;
 8007898:	bf00      	nop
}
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000050 	.word	0x20000050
 80078a0:	20000070 	.word	0x20000070

080078a4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  BAS_Init();
 80078a8:	f7ff ff74 	bl	8007794 <BAS_Init>

  BLS_Init();
 80078ac:	f7ff ff79 	bl	80077a2 <BLS_Init>

  CRS_STM_Init();
 80078b0:	f7ff ff7e 	bl	80077b0 <CRS_STM_Init>

  DIS_Init();
 80078b4:	f7ff ff83 	bl	80077be <DIS_Init>

  EDS_STM_Init();
 80078b8:	f7ff ff88 	bl	80077cc <EDS_STM_Init>

  HIDS_Init();
 80078bc:	f7ff ff8d 	bl	80077da <HIDS_Init>

  HRS_Init();
 80078c0:	f7ff ff92 	bl	80077e8 <HRS_Init>

  HTS_Init();
 80078c4:	f7ff ff97 	bl	80077f6 <HTS_Init>

  IAS_Init();
 80078c8:	f7ff ff9c 	bl	8007804 <IAS_Init>

  LLS_Init();
 80078cc:	f7ff ffa1 	bl	8007812 <LLS_Init>

  TPS_Init();
 80078d0:	f7ff ffa6 	bl	8007820 <TPS_Init>

  MOTENV_STM_Init();
 80078d4:	f7ff ffab 	bl	800782e <MOTENV_STM_Init>

  P2PS_STM_Init();
 80078d8:	f7ff ffb0 	bl	800783c <P2PS_STM_Init>

  ZDD_STM_Init();
 80078dc:	f7ff ffb5 	bl	800784a <ZDD_STM_Init>

  OTAS_STM_Init();
 80078e0:	f7ff ffba 	bl	8007858 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80078e4:	f7ff ffc6 	bl	8007874 <BVOPUS_STM_Init>

  MESH_Init();
 80078e8:	f7ff ffbd 	bl	8007866 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80078ec:	f001 fcd4 	bl	8009298 <SVCCTL_InitCustomSvc>
  
  return;
 80078f0:	bf00      	nop
}
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80078fc:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <SVCCTL_RegisterSvcHandler+0x30>)
 80078fe:	7f1b      	ldrb	r3, [r3, #28]
 8007900:	4619      	mov	r1, r3
 8007902:	4a08      	ldr	r2, [pc, #32]	@ (8007924 <SVCCTL_RegisterSvcHandler+0x30>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800790a:	4b06      	ldr	r3, [pc, #24]	@ (8007924 <SVCCTL_RegisterSvcHandler+0x30>)
 800790c:	7f1b      	ldrb	r3, [r3, #28]
 800790e:	3301      	adds	r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <SVCCTL_RegisterSvcHandler+0x30>)
 8007914:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007916:	bf00      	nop
}
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000050 	.word	0x20000050

08007928 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3301      	adds	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2bff      	cmp	r3, #255	@ 0xff
 8007940:	d125      	bne.n	800798e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3302      	adds	r3, #2
 8007946:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007952:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007956:	d118      	bne.n	800798a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007958:	2300      	movs	r3, #0
 800795a:	757b      	strb	r3, [r7, #21]
 800795c:	e00d      	b.n	800797a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800795e:	7d7b      	ldrb	r3, [r7, #21]
 8007960:	4a1a      	ldr	r2, [pc, #104]	@ (80079cc <SVCCTL_UserEvtRx+0xa4>)
 8007962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d108      	bne.n	8007986 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007974:	7d7b      	ldrb	r3, [r7, #21]
 8007976:	3301      	adds	r3, #1
 8007978:	757b      	strb	r3, [r7, #21]
 800797a:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <SVCCTL_UserEvtRx+0xa4>)
 800797c:	7f1b      	ldrb	r3, [r3, #28]
 800797e:	7d7a      	ldrb	r2, [r7, #21]
 8007980:	429a      	cmp	r2, r3
 8007982:	d3ec      	bcc.n	800795e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007984:	e002      	b.n	800798c <SVCCTL_UserEvtRx+0x64>
              break;
 8007986:	bf00      	nop
          break;
 8007988:	e000      	b.n	800798c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800798a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800798c:	e000      	b.n	8007990 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800798e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d00f      	beq.n	80079b6 <SVCCTL_UserEvtRx+0x8e>
 8007996:	2b02      	cmp	r3, #2
 8007998:	dc10      	bgt.n	80079bc <SVCCTL_UserEvtRx+0x94>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <SVCCTL_UserEvtRx+0x7c>
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d006      	beq.n	80079b0 <SVCCTL_UserEvtRx+0x88>
 80079a2:	e00b      	b.n	80079bc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 ff89 	bl	80088bc <SVCCTL_App_Notification>
 80079aa:	4603      	mov	r3, r0
 80079ac:	75bb      	strb	r3, [r7, #22]
      break;
 80079ae:	e008      	b.n	80079c2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80079b0:	2301      	movs	r3, #1
 80079b2:	75bb      	strb	r3, [r7, #22]
      break;
 80079b4:	e005      	b.n	80079c2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75bb      	strb	r3, [r7, #22]
      break;
 80079ba:	e002      	b.n	80079c2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80079bc:	2301      	movs	r3, #1
 80079be:	75bb      	strb	r3, [r7, #22]
      break;
 80079c0:	bf00      	nop
  }

  return (return_status);
 80079c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000050 	.word	0x20000050

080079d0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80079d8:	f107 030c 	add.w	r3, r7, #12
 80079dc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	212e      	movs	r1, #46	@ 0x2e
 80079e8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80079ec:	f000 fae8 	bl	8007fc0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	330b      	adds	r3, #11
 80079f4:	78db      	ldrb	r3, [r3, #3]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b088      	sub	sp, #32
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	210f      	movs	r1, #15
 8007a16:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8007a1a:	f000 fad1 	bl	8007fc0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	330b      	adds	r3, #11
 8007a22:	78db      	ldrb	r3, [r3, #3]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a34:	f107 030c 	add.w	r3, r7, #12
 8007a38:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	2110      	movs	r1, #16
 8007a40:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8007a44:	f000 fabc 	bl	8007fc0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	330b      	adds	r3, #11
 8007a4c:	78db      	ldrb	r3, [r3, #3]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b08b      	sub	sp, #44	@ 0x2c
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007a80:	4b4a      	ldr	r3, [pc, #296]	@ (8007bac <SHCI_GetWirelessFwInfo+0x154>)
 8007a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007a88:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007a92:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a44      	ldr	r2, [pc, #272]	@ (8007bb0 <SHCI_GetWirelessFwInfo+0x158>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d10f      	bne.n	8007ac4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e01a      	b.n	8007afa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007acc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007ad0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	0e1b      	lsrs	r3, r3, #24
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	0c1b      	lsrs	r3, r3, #16
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	091b      	lsrs	r3, r3, #4
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	0e1b      	lsrs	r3, r3, #24
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	0a1b      	lsrs	r3, r3, #8
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	0e1b      	lsrs	r3, r3, #24
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	0e1b      	lsrs	r3, r3, #24
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	0c1b      	lsrs	r3, r3, #16
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	372c      	adds	r7, #44	@ 0x2c
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	58004000 	.word	0x58004000
 8007bb0:	a94656b9 	.word	0xa94656b9

08007bb4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	4a08      	ldr	r2, [pc, #32]	@ (8007be4 <hci_init+0x30>)
 8007bc4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007bc6:	4a08      	ldr	r2, [pc, #32]	@ (8007be8 <hci_init+0x34>)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007bcc:	4806      	ldr	r0, [pc, #24]	@ (8007be8 <hci_init+0x34>)
 8007bce:	f000 f979 	bl	8007ec4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 f8da 	bl	8007d90 <TlInit>

  return;
 8007bdc:	bf00      	nop
}
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	200002c4 	.word	0x200002c4
 8007be8:	2000029c 	.word	0x2000029c

08007bec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007bf2:	4822      	ldr	r0, [pc, #136]	@ (8007c7c <hci_user_evt_proc+0x90>)
 8007bf4:	f000 fd32 	bl	800865c <LST_is_empty>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d12b      	bne.n	8007c56 <hci_user_evt_proc+0x6a>
 8007bfe:	4b20      	ldr	r3, [pc, #128]	@ (8007c80 <hci_user_evt_proc+0x94>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d027      	beq.n	8007c56 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007c06:	f107 030c 	add.w	r3, r7, #12
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	481b      	ldr	r0, [pc, #108]	@ (8007c7c <hci_user_evt_proc+0x90>)
 8007c0e:	f000 fdb4 	bl	800877a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007c12:	4b1c      	ldr	r3, [pc, #112]	@ (8007c84 <hci_user_evt_proc+0x98>)
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007c22:	4b18      	ldr	r3, [pc, #96]	@ (8007c84 <hci_user_evt_proc+0x98>)
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	1d3a      	adds	r2, r7, #4
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007c2c:	793a      	ldrb	r2, [r7, #4]
 8007c2e:	4b14      	ldr	r3, [pc, #80]	@ (8007c80 <hci_user_evt_proc+0x94>)
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007c34:	4b12      	ldr	r3, [pc, #72]	@ (8007c80 <hci_user_evt_proc+0x94>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007c3a:	4b11      	ldr	r3, [pc, #68]	@ (8007c80 <hci_user_evt_proc+0x94>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fc0d 	bl	8008464 <TL_MM_EvtDone>
 8007c4a:	e004      	b.n	8007c56 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	480a      	ldr	r0, [pc, #40]	@ (8007c7c <hci_user_evt_proc+0x90>)
 8007c52:	f000 fd25 	bl	80086a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c56:	4809      	ldr	r0, [pc, #36]	@ (8007c7c <hci_user_evt_proc+0x90>)
 8007c58:	f000 fd00 	bl	800865c <LST_is_empty>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d107      	bne.n	8007c72 <hci_user_evt_proc+0x86>
 8007c62:	4b07      	ldr	r3, [pc, #28]	@ (8007c80 <hci_user_evt_proc+0x94>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007c6a:	4804      	ldr	r0, [pc, #16]	@ (8007c7c <hci_user_evt_proc+0x90>)
 8007c6c:	f001 f85a 	bl	8008d24 <hci_notify_asynch_evt>
  }


  return;
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
}
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000078 	.word	0x20000078
 8007c80:	20000084 	.word	0x20000084
 8007c84:	2000029c 	.word	0x2000029c

08007c88 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007c94:	2000      	movs	r0, #0
 8007c96:	f000 f8d1 	bl	8007e3c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	885b      	ldrh	r3, [r3, #2]
 8007ca2:	b21b      	sxth	r3, r3
 8007ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca8:	b21a      	sxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	029b      	lsls	r3, r3, #10
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	b21b      	sxth	r3, r3
 8007cb8:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007cba:	4b33      	ldr	r3, [pc, #204]	@ (8007d88 <hci_send_req+0x100>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	b2d9      	uxtb	r1, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	8bbb      	ldrh	r3, [r7, #28]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f88f 	bl	8007df0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007cd2:	e04e      	b.n	8007d72 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007cd4:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007cd8:	f001 f83b 	bl	8008d52 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007cdc:	e043      	b.n	8007d66 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007cde:	f107 030c 	add.w	r3, r7, #12
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4829      	ldr	r0, [pc, #164]	@ (8007d8c <hci_send_req+0x104>)
 8007ce6:	f000 fd48 	bl	800877a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	7a5b      	ldrb	r3, [r3, #9]
 8007cee:	2b0f      	cmp	r3, #15
 8007cf0:	d114      	bne.n	8007d1c <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	330b      	adds	r3, #11
 8007cf6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	885b      	ldrh	r3, [r3, #2]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	8bba      	ldrh	r2, [r7, #28]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d104      	bne.n	8007d0e <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d027      	beq.n	8007d66 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d16:	2301      	movs	r3, #1
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e024      	b.n	8007d66 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	330b      	adds	r3, #11
 8007d20:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8bba      	ldrh	r2, [r7, #28]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d114      	bne.n	8007d5a <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	7a9b      	ldrb	r3, [r3, #10]
 8007d34:	3b03      	subs	r3, #3
 8007d36:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	695a      	ldr	r2, [r3, #20]
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	bfa8      	it	ge
 8007d42:	461a      	movge	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6918      	ldr	r0, [r3, #16]
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	1cd9      	adds	r1, r3, #3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	461a      	mov	r2, r3
 8007d56:	f002 f8fb 	bl	8009f50 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d62:	2301      	movs	r3, #1
 8007d64:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007d66:	4809      	ldr	r0, [pc, #36]	@ (8007d8c <hci_send_req+0x104>)
 8007d68:	f000 fc78 	bl	800865c <LST_is_empty>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0b5      	beq.n	8007cde <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0ad      	beq.n	8007cd4 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007d78:	2001      	movs	r0, #1
 8007d7a:	f000 f85f 	bl	8007e3c <NotifyCmdStatus>

  return 0;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	200002c8 	.word	0x200002c8
 8007d8c:	200002bc 	.word	0x200002bc

08007d90 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007d98:	480f      	ldr	r0, [pc, #60]	@ (8007dd8 <TlInit+0x48>)
 8007d9a:	f000 fc4f 	bl	800863c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8007ddc <TlInit+0x4c>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007da4:	480e      	ldr	r0, [pc, #56]	@ (8007de0 <TlInit+0x50>)
 8007da6:	f000 fc49 	bl	800863c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007daa:	4b0e      	ldr	r3, [pc, #56]	@ (8007de4 <TlInit+0x54>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007db0:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <TlInit+0x58>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007dec <TlInit+0x5c>)
 8007dbe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007dc0:	4b09      	ldr	r3, [pc, #36]	@ (8007de8 <TlInit+0x58>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f107 0208 	add.w	r2, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
  }

  return;
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
}
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200002bc 	.word	0x200002bc
 8007ddc:	20000080 	.word	0x20000080
 8007de0:	20000078 	.word	0x20000078
 8007de4:	20000084 	.word	0x20000084
 8007de8:	2000029c 	.word	0x2000029c
 8007dec:	08007e7d 	.word	0x08007e7d

08007df0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	603a      	str	r2, [r7, #0]
 8007dfa:	80fb      	strh	r3, [r7, #6]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <SendCmd+0x44>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	88fa      	ldrh	r2, [r7, #6]
 8007e06:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e34 <SendCmd+0x44>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	797a      	ldrb	r2, [r7, #5]
 8007e10:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007e12:	4b08      	ldr	r3, [pc, #32]	@ (8007e34 <SendCmd+0x44>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	797a      	ldrb	r2, [r7, #5]
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f002 f897 	bl	8009f50 <memcpy>

  hciContext.io.Send(0,0);
 8007e22:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <SendCmd+0x48>)
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2100      	movs	r1, #0
 8007e28:	2000      	movs	r0, #0
 8007e2a:	4798      	blx	r3

  return;
 8007e2c:	bf00      	nop
}
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000080 	.word	0x20000080
 8007e38:	2000029c 	.word	0x2000029c

08007e3c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d108      	bne.n	8007e5e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <NotifyCmdStatus+0x3c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00d      	beq.n	8007e70 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007e54:	4b08      	ldr	r3, [pc, #32]	@ (8007e78 <NotifyCmdStatus+0x3c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2000      	movs	r0, #0
 8007e5a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007e5c:	e008      	b.n	8007e70 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007e5e:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <NotifyCmdStatus+0x3c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d004      	beq.n	8007e70 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007e66:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <NotifyCmdStatus+0x3c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	4798      	blx	r3
  return;
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
}
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200002c4 	.word	0x200002c4

08007e7c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7a5b      	ldrb	r3, [r3, #9]
 8007e88:	2b0f      	cmp	r3, #15
 8007e8a:	d003      	beq.n	8007e94 <TlEvtReceived+0x18>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7a5b      	ldrb	r3, [r3, #9]
 8007e90:	2b0e      	cmp	r3, #14
 8007e92:	d107      	bne.n	8007ea4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4809      	ldr	r0, [pc, #36]	@ (8007ebc <TlEvtReceived+0x40>)
 8007e98:	f000 fc28 	bl	80086ec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f000 ff4d 	bl	8008d3c <hci_cmd_resp_release>
 8007ea2:	e006      	b.n	8007eb2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4806      	ldr	r0, [pc, #24]	@ (8007ec0 <TlEvtReceived+0x44>)
 8007ea8:	f000 fc20 	bl	80086ec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007eac:	4804      	ldr	r0, [pc, #16]	@ (8007ec0 <TlEvtReceived+0x44>)
 8007eae:	f000 ff39 	bl	8008d24 <hci_notify_asynch_evt>
  }

  return;
 8007eb2:	bf00      	nop
}
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200002bc 	.word	0x200002bc
 8007ec0:	20000078 	.word	0x20000078

08007ec4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a05      	ldr	r2, [pc, #20]	@ (8007ee4 <hci_register_io_bus+0x20>)
 8007ed0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	@ (8007ee8 <hci_register_io_bus+0x24>)
 8007ed6:	611a      	str	r2, [r3, #16]

  return;
 8007ed8:	bf00      	nop
}
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	080081dd 	.word	0x080081dd
 8007ee8:	08008245 	.word	0x08008245

08007eec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4a08      	ldr	r2, [pc, #32]	@ (8007f1c <shci_init+0x30>)
 8007efc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007efe:	4a08      	ldr	r2, [pc, #32]	@ (8007f20 <shci_init+0x34>)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007f04:	4806      	ldr	r0, [pc, #24]	@ (8007f20 <shci_init+0x34>)
 8007f06:	f000 f915 	bl	8008134 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f898 	bl	8008044 <TlInit>

  return;
 8007f14:	bf00      	nop
}
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	200002ec 	.word	0x200002ec
 8007f20:	200002cc 	.word	0x200002cc

08007f24 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f2a:	4822      	ldr	r0, [pc, #136]	@ (8007fb4 <shci_user_evt_proc+0x90>)
 8007f2c:	f000 fb96 	bl	800865c <LST_is_empty>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d12b      	bne.n	8007f8e <shci_user_evt_proc+0x6a>
 8007f36:	4b20      	ldr	r3, [pc, #128]	@ (8007fb8 <shci_user_evt_proc+0x94>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d027      	beq.n	8007f8e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007f3e:	f107 030c 	add.w	r3, r7, #12
 8007f42:	4619      	mov	r1, r3
 8007f44:	481b      	ldr	r0, [pc, #108]	@ (8007fb4 <shci_user_evt_proc+0x90>)
 8007f46:	f000 fc18 	bl	800877a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007fbc <shci_user_evt_proc+0x98>)
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007f56:	2301      	movs	r3, #1
 8007f58:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007f5a:	4b18      	ldr	r3, [pc, #96]	@ (8007fbc <shci_user_evt_proc+0x98>)
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	1d3a      	adds	r2, r7, #4
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007f64:	793a      	ldrb	r2, [r7, #4]
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <shci_user_evt_proc+0x94>)
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e002      	b.n	8007f72 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007f6c:	4b12      	ldr	r3, [pc, #72]	@ (8007fb8 <shci_user_evt_proc+0x94>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007f72:	4b11      	ldr	r3, [pc, #68]	@ (8007fb8 <shci_user_evt_proc+0x94>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fa71 	bl	8008464 <TL_MM_EvtDone>
 8007f82:	e004      	b.n	8007f8e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4619      	mov	r1, r3
 8007f88:	480a      	ldr	r0, [pc, #40]	@ (8007fb4 <shci_user_evt_proc+0x90>)
 8007f8a:	f000 fb89 	bl	80086a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f8e:	4809      	ldr	r0, [pc, #36]	@ (8007fb4 <shci_user_evt_proc+0x90>)
 8007f90:	f000 fb64 	bl	800865c <LST_is_empty>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d107      	bne.n	8007faa <shci_user_evt_proc+0x86>
 8007f9a:	4b07      	ldr	r3, [pc, #28]	@ (8007fb8 <shci_user_evt_proc+0x94>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007fa2:	4804      	ldr	r0, [pc, #16]	@ (8007fb4 <shci_user_evt_proc+0x90>)
 8007fa4:	f7f8 fde2 	bl	8000b6c <shci_notify_asynch_evt>
  }


  return;
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
}
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000088 	.word	0x20000088
 8007fb8:	20000098 	.word	0x20000098
 8007fbc:	200002cc 	.word	0x200002cc

08007fc0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60ba      	str	r2, [r7, #8]
 8007fc8:	607b      	str	r3, [r7, #4]
 8007fca:	4603      	mov	r3, r0
 8007fcc:	81fb      	strh	r3, [r7, #14]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	f000 f868 	bl	80080a8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007fd8:	4b17      	ldr	r3, [pc, #92]	@ (8008038 <shci_send+0x78>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	89fa      	ldrh	r2, [r7, #14]
 8007fde:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007fe2:	4b15      	ldr	r3, [pc, #84]	@ (8008038 <shci_send+0x78>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	7b7a      	ldrb	r2, [r7, #13]
 8007fe8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007fea:	4b13      	ldr	r3, [pc, #76]	@ (8008038 <shci_send+0x78>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	7b7a      	ldrb	r2, [r7, #13]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 ffab 	bl	8009f50 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8007ffa:	4b10      	ldr	r3, [pc, #64]	@ (800803c <shci_send+0x7c>)
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008000:	4b0f      	ldr	r3, [pc, #60]	@ (8008040 <shci_send+0x80>)
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2100      	movs	r1, #0
 8008006:	2000      	movs	r0, #0
 8008008:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800800a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800800e:	f7f8 fdc4 	bl	8000b9a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f103 0008 	add.w	r0, r3, #8
 8008018:	4b07      	ldr	r3, [pc, #28]	@ (8008038 <shci_send+0x78>)
 800801a:	6819      	ldr	r1, [r3, #0]
 800801c:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <shci_send+0x78>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	789b      	ldrb	r3, [r3, #2]
 8008022:	3303      	adds	r3, #3
 8008024:	461a      	mov	r2, r3
 8008026:	f001 ff93 	bl	8009f50 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800802a:	2001      	movs	r0, #1
 800802c:	f000 f83c 	bl	80080a8 <Cmd_SetStatus>

  return;
 8008030:	bf00      	nop
}
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000094 	.word	0x20000094
 800803c:	200002f0 	.word	0x200002f0
 8008040:	200002cc 	.word	0x200002cc

08008044 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800804c:	4a10      	ldr	r2, [pc, #64]	@ (8008090 <TlInit+0x4c>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008052:	4810      	ldr	r0, [pc, #64]	@ (8008094 <TlInit+0x50>)
 8008054:	f000 faf2 	bl	800863c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008058:	2001      	movs	r0, #1
 800805a:	f000 f825 	bl	80080a8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800805e:	4b0e      	ldr	r3, [pc, #56]	@ (8008098 <TlInit+0x54>)
 8008060:	2201      	movs	r2, #1
 8008062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008064:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <TlInit+0x58>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008070:	4b0b      	ldr	r3, [pc, #44]	@ (80080a0 <TlInit+0x5c>)
 8008072:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008074:	4b0b      	ldr	r3, [pc, #44]	@ (80080a4 <TlInit+0x60>)
 8008076:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008078:	4b08      	ldr	r3, [pc, #32]	@ (800809c <TlInit+0x58>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f107 020c 	add.w	r2, r7, #12
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
  }

  return;
 8008084:	bf00      	nop
 8008086:	bf00      	nop
}
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000094 	.word	0x20000094
 8008094:	20000088 	.word	0x20000088
 8008098:	20000098 	.word	0x20000098
 800809c:	200002cc 	.word	0x200002cc
 80080a0:	080080f9 	.word	0x080080f9
 80080a4:	08008111 	.word	0x08008111

080080a8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80080b8:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <Cmd_SetStatus+0x48>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80080c0:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <Cmd_SetStatus+0x48>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2000      	movs	r0, #0
 80080c6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	@ (80080f4 <Cmd_SetStatus+0x4c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80080ce:	e00b      	b.n	80080e8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80080d0:	4b08      	ldr	r3, [pc, #32]	@ (80080f4 <Cmd_SetStatus+0x4c>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80080d6:	4b06      	ldr	r3, [pc, #24]	@ (80080f0 <Cmd_SetStatus+0x48>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80080de:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <Cmd_SetStatus+0x48>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2001      	movs	r0, #1
 80080e4:	4798      	blx	r3
  return;
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
}
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	200002ec 	.word	0x200002ec
 80080f4:	20000090 	.word	0x20000090

080080f8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008100:	2000      	movs	r0, #0
 8008102:	f7f8 fd3f 	bl	8000b84 <shci_cmd_resp_release>

  return;
 8008106:	bf00      	nop
}
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4805      	ldr	r0, [pc, #20]	@ (8008130 <TlUserEvtReceived+0x20>)
 800811c:	f000 fae6 	bl	80086ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008120:	4803      	ldr	r0, [pc, #12]	@ (8008130 <TlUserEvtReceived+0x20>)
 8008122:	f7f8 fd23 	bl	8000b6c <shci_notify_asynch_evt>

  return;
 8008126:	bf00      	nop
}
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000088 	.word	0x20000088

08008134 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a05      	ldr	r2, [pc, #20]	@ (8008154 <shci_register_io_bus+0x20>)
 8008140:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a04      	ldr	r2, [pc, #16]	@ (8008158 <shci_register_io_bus+0x24>)
 8008146:	611a      	str	r2, [r3, #16]

  return;
 8008148:	bf00      	nop
}
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	080082f1 	.word	0x080082f1
 8008158:	08008345 	.word	0x08008345

0800815c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008160:	f001 faac 	bl	80096bc <HW_IPCC_Enable>

  return;
 8008164:	bf00      	nop
}
 8008166:	bd80      	pop	{r7, pc}

08008168 <TL_Init>:


void TL_Init( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800816c:	4b10      	ldr	r3, [pc, #64]	@ (80081b0 <TL_Init+0x48>)
 800816e:	4a11      	ldr	r2, [pc, #68]	@ (80081b4 <TL_Init+0x4c>)
 8008170:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008172:	4b0f      	ldr	r3, [pc, #60]	@ (80081b0 <TL_Init+0x48>)
 8008174:	4a10      	ldr	r2, [pc, #64]	@ (80081b8 <TL_Init+0x50>)
 8008176:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008178:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <TL_Init+0x48>)
 800817a:	4a10      	ldr	r2, [pc, #64]	@ (80081bc <TL_Init+0x54>)
 800817c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <TL_Init+0x48>)
 8008180:	4a0f      	ldr	r2, [pc, #60]	@ (80081c0 <TL_Init+0x58>)
 8008182:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008184:	4b0a      	ldr	r3, [pc, #40]	@ (80081b0 <TL_Init+0x48>)
 8008186:	4a0f      	ldr	r2, [pc, #60]	@ (80081c4 <TL_Init+0x5c>)
 8008188:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800818a:	4b09      	ldr	r3, [pc, #36]	@ (80081b0 <TL_Init+0x48>)
 800818c:	4a0e      	ldr	r2, [pc, #56]	@ (80081c8 <TL_Init+0x60>)
 800818e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <TL_Init+0x48>)
 8008192:	4a0e      	ldr	r2, [pc, #56]	@ (80081cc <TL_Init+0x64>)
 8008194:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008196:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <TL_Init+0x48>)
 8008198:	4a0d      	ldr	r2, [pc, #52]	@ (80081d0 <TL_Init+0x68>)
 800819a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <TL_Init+0x48>)
 800819e:	4a0d      	ldr	r2, [pc, #52]	@ (80081d4 <TL_Init+0x6c>)
 80081a0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80081a2:	4b03      	ldr	r3, [pc, #12]	@ (80081b0 <TL_Init+0x48>)
 80081a4:	4a0c      	ldr	r2, [pc, #48]	@ (80081d8 <TL_Init+0x70>)
 80081a6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80081a8:	f001 fa9c 	bl	80096e4 <HW_IPCC_Init>

  return;
 80081ac:	bf00      	nop
}
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20030000 	.word	0x20030000
 80081b4:	20030028 	.word	0x20030028
 80081b8:	20030048 	.word	0x20030048
 80081bc:	20030058 	.word	0x20030058
 80081c0:	20030068 	.word	0x20030068
 80081c4:	20030070 	.word	0x20030070
 80081c8:	20030078 	.word	0x20030078
 80081cc:	20030080 	.word	0x20030080
 80081d0:	2003009c 	.word	0x2003009c
 80081d4:	200300a0 	.word	0x200300a0
 80081d8:	200300ac 	.word	0x200300ac

080081dc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80081e8:	4811      	ldr	r0, [pc, #68]	@ (8008230 <TL_BLE_Init+0x54>)
 80081ea:	f000 fa27 	bl	800863c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80081ee:	4b11      	ldr	r3, [pc, #68]	@ (8008234 <TL_BLE_Init+0x58>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4a0c      	ldr	r2, [pc, #48]	@ (8008238 <TL_BLE_Init+0x5c>)
 8008208:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4a08      	ldr	r2, [pc, #32]	@ (8008230 <TL_BLE_Init+0x54>)
 800820e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008210:	f001 fa7e 	bl	8009710 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a08      	ldr	r2, [pc, #32]	@ (800823c <TL_BLE_Init+0x60>)
 800821a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4a07      	ldr	r2, [pc, #28]	@ (8008240 <TL_BLE_Init+0x64>)
 8008222:	6013      	str	r3, [r2, #0]

  return 0;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200300c8 	.word	0x200300c8
 8008234:	20030000 	.word	0x20030000
 8008238:	20030a58 	.word	0x20030a58
 800823c:	200002fc 	.word	0x200002fc
 8008240:	20000300 	.word	0x20000300

08008244 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008250:	4b09      	ldr	r3, [pc, #36]	@ (8008278 <TL_BLE_SendCmd+0x34>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2201      	movs	r2, #1
 8008258:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800825a:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <TL_BLE_SendCmd+0x34>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4619      	mov	r1, r3
 8008262:	2001      	movs	r0, #1
 8008264:	f000 f96c 	bl	8008540 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008268:	f001 fa6c 	bl	8009744 <HW_IPCC_BLE_SendCmd>

  return 0;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20030000 	.word	0x20030000

0800827c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008282:	e01c      	b.n	80082be <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008284:	1d3b      	adds	r3, r7, #4
 8008286:	4619      	mov	r1, r3
 8008288:	4812      	ldr	r0, [pc, #72]	@ (80082d4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800828a:	f000 fa76 	bl	800877a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7a5b      	ldrb	r3, [r3, #9]
 8008292:	2b0f      	cmp	r3, #15
 8008294:	d003      	beq.n	800829e <HW_IPCC_BLE_RxEvtNot+0x22>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7a5b      	ldrb	r3, [r3, #9]
 800829a:	2b0e      	cmp	r3, #14
 800829c:	d105      	bne.n	80082aa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4619      	mov	r1, r3
 80082a2:	2002      	movs	r0, #2
 80082a4:	f000 f94c 	bl	8008540 <OutputDbgTrace>
 80082a8:	e004      	b.n	80082b4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4619      	mov	r1, r3
 80082ae:	2003      	movs	r0, #3
 80082b0:	f000 f946 	bl	8008540 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80082b4:	4b08      	ldr	r3, [pc, #32]	@ (80082d8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4610      	mov	r0, r2
 80082bc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80082be:	4805      	ldr	r0, [pc, #20]	@ (80082d4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80082c0:	f000 f9cc 	bl	800865c <LST_is_empty>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0dc      	beq.n	8008284 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80082ca:	bf00      	nop
}
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200300c8 	.word	0x200300c8
 80082d8:	200002fc 	.word	0x200002fc

080082dc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80082e0:	4b02      	ldr	r3, [pc, #8]	@ (80082ec <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4798      	blx	r3

  return;
 80082e6:	bf00      	nop
}
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000300 	.word	0x20000300

080082f0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80082fc:	480d      	ldr	r0, [pc, #52]	@ (8008334 <TL_SYS_Init+0x44>)
 80082fe:	f000 f99d 	bl	800863c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008302:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <TL_SYS_Init+0x48>)
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4a08      	ldr	r2, [pc, #32]	@ (8008334 <TL_SYS_Init+0x44>)
 8008314:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008316:	f001 fa47 	bl	80097a8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a07      	ldr	r2, [pc, #28]	@ (800833c <TL_SYS_Init+0x4c>)
 8008320:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	4a06      	ldr	r2, [pc, #24]	@ (8008340 <TL_SYS_Init+0x50>)
 8008328:	6013      	str	r3, [r2, #0]

  return 0;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	200300d0 	.word	0x200300d0
 8008338:	20030000 	.word	0x20030000
 800833c:	20000304 	.word	0x20000304
 8008340:	20000308 	.word	0x20000308

08008344 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008350:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <TL_SYS_SendCmd+0x34>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2210      	movs	r2, #16
 8008358:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800835a:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <TL_SYS_SendCmd+0x34>)
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	2004      	movs	r0, #4
 8008364:	f000 f8ec 	bl	8008540 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008368:	f001 fa38 	bl	80097dc <HW_IPCC_SYS_SendCmd>

  return 0;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20030000 	.word	0x20030000

0800837c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4619      	mov	r1, r3
 8008388:	2005      	movs	r0, #5
 800838a:	f000 f8d9 	bl	8008540 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800838e:	4b05      	ldr	r3, [pc, #20]	@ (80083a4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a03      	ldr	r2, [pc, #12]	@ (80083a0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008394:	68d2      	ldr	r2, [r2, #12]
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3

  return;
 800839c:	bf00      	nop
}
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20030000 	.word	0x20030000
 80083a4:	20000304 	.word	0x20000304

080083a8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80083ae:	e00e      	b.n	80083ce <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80083b0:	1d3b      	adds	r3, r7, #4
 80083b2:	4619      	mov	r1, r3
 80083b4:	480b      	ldr	r0, [pc, #44]	@ (80083e4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80083b6:	f000 f9e0 	bl	800877a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4619      	mov	r1, r3
 80083be:	2006      	movs	r0, #6
 80083c0:	f000 f8be 	bl	8008540 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80083c4:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <HW_IPCC_SYS_EvtNot+0x40>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4610      	mov	r0, r2
 80083cc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80083ce:	4805      	ldr	r0, [pc, #20]	@ (80083e4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80083d0:	f000 f944 	bl	800865c <LST_is_empty>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0ea      	beq.n	80083b0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80083da:	bf00      	nop
}
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	200300d0 	.word	0x200300d0
 80083e8:	20000308 	.word	0x20000308

080083ec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80083f4:	4817      	ldr	r0, [pc, #92]	@ (8008454 <TL_MM_Init+0x68>)
 80083f6:	f000 f921 	bl	800863c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80083fa:	4817      	ldr	r0, [pc, #92]	@ (8008458 <TL_MM_Init+0x6c>)
 80083fc:	f000 f91e 	bl	800863c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008400:	4b16      	ldr	r3, [pc, #88]	@ (800845c <TL_MM_Init+0x70>)
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	4a16      	ldr	r2, [pc, #88]	@ (8008460 <TL_MM_Init+0x74>)
 8008406:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008408:	4b15      	ldr	r3, [pc, #84]	@ (8008460 <TL_MM_Init+0x74>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6892      	ldr	r2, [r2, #8]
 8008410:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008412:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <TL_MM_Init+0x74>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	68d2      	ldr	r2, [r2, #12]
 800841a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800841c:	4b10      	ldr	r3, [pc, #64]	@ (8008460 <TL_MM_Init+0x74>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a0c      	ldr	r2, [pc, #48]	@ (8008454 <TL_MM_Init+0x68>)
 8008422:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008424:	4b0e      	ldr	r3, [pc, #56]	@ (8008460 <TL_MM_Init+0x74>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800842e:	4b0c      	ldr	r3, [pc, #48]	@ (8008460 <TL_MM_Init+0x74>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6852      	ldr	r2, [r2, #4]
 8008436:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008438:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <TL_MM_Init+0x74>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6912      	ldr	r2, [r2, #16]
 8008440:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008442:	4b07      	ldr	r3, [pc, #28]	@ (8008460 <TL_MM_Init+0x74>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6952      	ldr	r2, [r2, #20]
 800844a:	619a      	str	r2, [r3, #24]

  return;
 800844c:	bf00      	nop
}
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	200300b8 	.word	0x200300b8
 8008458:	200002f4 	.word	0x200002f4
 800845c:	20030000 	.word	0x20030000
 8008460:	2000030c 	.word	0x2000030c

08008464 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4807      	ldr	r0, [pc, #28]	@ (800848c <TL_MM_EvtDone+0x28>)
 8008470:	f000 f93c 	bl	80086ec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	2000      	movs	r0, #0
 8008478:	f000 f862 	bl	8008540 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800847c:	4804      	ldr	r0, [pc, #16]	@ (8008490 <TL_MM_EvtDone+0x2c>)
 800847e:	f001 f9f3 	bl	8009868 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008482:	bf00      	nop
}
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200002f4 	.word	0x200002f4
 8008490:	08008495 	.word	0x08008495

08008494 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800849a:	e00c      	b.n	80084b6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800849c:	1d3b      	adds	r3, r7, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	480a      	ldr	r0, [pc, #40]	@ (80084cc <SendFreeBuf+0x38>)
 80084a2:	f000 f96a 	bl	800877a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80084a6:	4b0a      	ldr	r3, [pc, #40]	@ (80084d0 <SendFreeBuf+0x3c>)
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f91b 	bl	80086ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80084b6:	4805      	ldr	r0, [pc, #20]	@ (80084cc <SendFreeBuf+0x38>)
 80084b8:	f000 f8d0 	bl	800865c <LST_is_empty>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0ec      	beq.n	800849c <SendFreeBuf+0x8>
  }

  return;
 80084c2:	bf00      	nop
}
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200002f4 	.word	0x200002f4
 80084d0:	20030000 	.word	0x20030000

080084d4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80084d8:	4805      	ldr	r0, [pc, #20]	@ (80084f0 <TL_TRACES_Init+0x1c>)
 80084da:	f000 f8af 	bl	800863c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80084de:	4b05      	ldr	r3, [pc, #20]	@ (80084f4 <TL_TRACES_Init+0x20>)
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	4a03      	ldr	r2, [pc, #12]	@ (80084f0 <TL_TRACES_Init+0x1c>)
 80084e4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80084e6:	f001 fa11 	bl	800990c <HW_IPCC_TRACES_Init>

  return;
 80084ea:	bf00      	nop
}
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200300c0 	.word	0x200300c0
 80084f4:	20030000 	.word	0x20030000

080084f8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80084fe:	e008      	b.n	8008512 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4808      	ldr	r0, [pc, #32]	@ (8008528 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008506:	f000 f938 	bl	800877a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f80d 	bl	800852c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008512:	4805      	ldr	r0, [pc, #20]	@ (8008528 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008514:	f000 f8a2 	bl	800865c <LST_is_empty>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f0      	beq.n	8008500 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800851e:	bf00      	nop
}
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200300c0 	.word	0x200300c0

0800852c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	2b06      	cmp	r3, #6
 8008550:	d845      	bhi.n	80085de <OutputDbgTrace+0x9e>
 8008552:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <OutputDbgTrace+0x18>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	08008575 	.word	0x08008575
 800855c:	08008599 	.word	0x08008599
 8008560:	0800859f 	.word	0x0800859f
 8008564:	080085b3 	.word	0x080085b3
 8008568:	080085bf 	.word	0x080085bf
 800856c:	080085c5 	.word	0x080085c5
 8008570:	080085d3 	.word	0x080085d3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	7a5b      	ldrb	r3, [r3, #9]
 800857c:	2bff      	cmp	r3, #255	@ 0xff
 800857e:	d005      	beq.n	800858c <OutputDbgTrace+0x4c>
 8008580:	2bff      	cmp	r3, #255	@ 0xff
 8008582:	dc05      	bgt.n	8008590 <OutputDbgTrace+0x50>
 8008584:	2b0e      	cmp	r3, #14
 8008586:	d005      	beq.n	8008594 <OutputDbgTrace+0x54>
 8008588:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800858a:	e001      	b.n	8008590 <OutputDbgTrace+0x50>
          break;
 800858c:	bf00      	nop
 800858e:	e027      	b.n	80085e0 <OutputDbgTrace+0xa0>
          break;
 8008590:	bf00      	nop
 8008592:	e025      	b.n	80085e0 <OutputDbgTrace+0xa0>
          break;
 8008594:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008596:	e023      	b.n	80085e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800859c:	e020      	b.n	80085e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	7a5b      	ldrb	r3, [r3, #9]
 80085a6:	2b0e      	cmp	r3, #14
 80085a8:	d001      	beq.n	80085ae <OutputDbgTrace+0x6e>
 80085aa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80085ac:	e000      	b.n	80085b0 <OutputDbgTrace+0x70>
          break;
 80085ae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085b0:	e016      	b.n	80085e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	7a5b      	ldrb	r3, [r3, #9]
 80085ba:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085bc:	e010      	b.n	80085e0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80085c2:	e00d      	b.n	80085e0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 80085ce:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085d0:	e006      	b.n	80085e0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	7a5b      	ldrb	r3, [r3, #9]
 80085da:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085dc:	e000      	b.n	80085e0 <OutputDbgTrace+0xa0>

    default:
      break;
 80085de:	bf00      	nop
  }

  return;
 80085e0:	bf00      	nop
}
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80085f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <OTP_Read+0x48>)
 80085f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80085fa:	e002      	b.n	8008602 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3b08      	subs	r3, #8
 8008600:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3307      	adds	r3, #7
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	79fa      	ldrb	r2, [r7, #7]
 800860a:	429a      	cmp	r2, r3
 800860c:	d003      	beq.n	8008616 <OTP_Read+0x2a>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4a09      	ldr	r2, [pc, #36]	@ (8008638 <OTP_Read+0x4c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d1f2      	bne.n	80085fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3307      	adds	r3, #7
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	79fa      	ldrb	r2, [r7, #7]
 800861e:	429a      	cmp	r2, r3
 8008620:	d001      	beq.n	8008626 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008626:	68fb      	ldr	r3, [r7, #12]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	1fff73f8 	.word	0x1fff73f8
 8008638:	1fff7000 	.word	0x1fff7000

0800863c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008664:	f3ef 8310 	mrs	r3, PRIMASK
 8008668:	60fb      	str	r3, [r7, #12]
  return(result);
 800866a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800866c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800866e:	b672      	cpsid	i
}
 8008670:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	429a      	cmp	r2, r3
 800867a:	d102      	bne.n	8008682 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
 8008680:	e001      	b.n	8008686 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f383 8810 	msr	PRIMASK, r3
}
 8008690:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
}
 8008694:	4618      	mov	r0, r3
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086aa:	f3ef 8310 	mrs	r3, PRIMASK
 80086ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80086b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086b4:	b672      	cpsid	i
}
 80086b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	605a      	str	r2, [r3, #4]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f383 8810 	msr	PRIMASK, r3
}
 80086de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f6:	f3ef 8310 	mrs	r3, PRIMASK
 80086fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80086fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008700:	b672      	cpsid	i
}
 8008702:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f383 8810 	msr	PRIMASK, r3
}
 800872a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800872c:	bf00      	nop
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008740:	f3ef 8310 	mrs	r3, PRIMASK
 8008744:	60fb      	str	r3, [r7, #12]
  return(result);
 8008746:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800874a:	b672      	cpsid	i
}
 800874c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6852      	ldr	r2, [r2, #4]
 8008760:	605a      	str	r2, [r3, #4]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f383 8810 	msr	PRIMASK, r3
}
 800876c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008784:	f3ef 8310 	mrs	r3, PRIMASK
 8008788:	60fb      	str	r3, [r7, #12]
  return(result);
 800878a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800878c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800878e:	b672      	cpsid	i
}
 8008790:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff ffca 	bl	8008738 <LST_remove_node>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f383 8810 	msr	PRIMASK, r3
}
 80087ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80087b0:	bf00      	nop
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80087bc:	4b03      	ldr	r3, [pc, #12]	@ (80087cc <LL_FLASH_GetUDN+0x14>)
 80087be:	681b      	ldr	r3, [r3, #0]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	1fff7580 	.word	0x1fff7580

080087d0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80087d4:	4b03      	ldr	r3, [pc, #12]	@ (80087e4 <LL_FLASH_GetDeviceID+0x14>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	b2db      	uxtb	r3, r3
}
 80087da:	4618      	mov	r0, r3
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	1fff7584 	.word	0x1fff7584

080087e8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80087ec:	4b03      	ldr	r3, [pc, #12]	@ (80087fc <LL_FLASH_GetSTCompanyID+0x14>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	0a1b      	lsrs	r3, r3, #8
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	1fff7584 	.word	0x1fff7584

08008800 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008800:	b5b0      	push	{r4, r5, r7, lr}
 8008802:	b090      	sub	sp, #64	@ 0x40
 8008804:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008806:	2392      	movs	r3, #146	@ 0x92
 8008808:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800880c:	4b27      	ldr	r3, [pc, #156]	@ (80088ac <APP_BLE_Init+0xac>)
 800880e:	1d3c      	adds	r4, r7, #4
 8008810:	461d      	mov	r5, r3
 8008812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800881a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800881c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800881e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008822:	c403      	stmia	r4!, {r0, r1}
 8008824:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008826:	f000 f925 	bl	8008a74 <Ble_Tl_Init>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800882a:	4a21      	ldr	r2, [pc, #132]	@ (80088b0 <APP_BLE_Init+0xb0>)
 800882c:	2100      	movs	r1, #0
 800882e:	2002      	movs	r0, #2
 8008830:	f001 fa36 	bl	8009ca0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008834:	1d3b      	adds	r3, r7, #4
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff f8ca 	bl	80079d0 <SHCI_C2_BLE_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008842:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <APP_BLE_Init+0x4e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800884a:	f7f9 fca8 	bl	800219e <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800884e:	f000 f927 	bl	8008aa0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008852:	f7ff f817 	bl	8007884 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008856:	4b17      	ldr	r3, [pc, #92]	@ (80088b4 <APP_BLE_Init+0xb4>)
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800885e:	4b15      	ldr	r3, [pc, #84]	@ (80088b4 <APP_BLE_Init+0xb4>)
 8008860:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008864:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008866:	4a14      	ldr	r2, [pc, #80]	@ (80088b8 <APP_BLE_Init+0xb8>)
 8008868:	2100      	movs	r1, #0
 800886a:	2001      	movs	r0, #1
 800886c:	f001 fa18 	bl	8009ca0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008870:	2006      	movs	r0, #6
 8008872:	f7fe fe7a 	bl	800756a <aci_hal_set_radio_activity_mask>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800887c:	f000 fb04 	bl	8008e88 <Custom_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
	UTIL_LPM_SetStopMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008880:	2101      	movs	r1, #1
 8008882:	2002      	movs	r0, #2
 8008884:	f001 f87a 	bl	800997c <UTIL_LPM_SetStopMode>
	UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008888:	2101      	movs	r1, #1
 800888a:	2002      	movs	r0, #2
 800888c:	f001 f8a6 	bl	80099dc <UTIL_LPM_SetOffMode>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008890:	4b08      	ldr	r3, [pc, #32]	@ (80088b4 <APP_BLE_Init+0xb4>)
 8008892:	2200      	movs	r2, #0
 8008894:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008896:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <APP_BLE_Init+0xb4>)
 8008898:	2200      	movs	r2, #0
 800889a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800889c:	2001      	movs	r0, #1
 800889e:	f000 f9b3 	bl	8008c08 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80088a2:	bf00      	nop
}
 80088a4:	3740      	adds	r7, #64	@ 0x40
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bdb0      	pop	{r4, r5, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	08009fc0 	.word	0x08009fc0
 80088b0:	08007bed 	.word	0x08007bed
 80088b4:	20000318 	.word	0x20000318
 80088b8:	08008cf1 	.word	0x08008cf1

080088bc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08c      	sub	sp, #48	@ 0x30
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80088c4:	2392      	movs	r3, #146	@ 0x92
 80088c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3301      	adds	r3, #1
 80088ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 80088d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2bff      	cmp	r3, #255	@ 0xff
 80088d6:	d05c      	beq.n	8008992 <SVCCTL_App_Notification+0xd6>
 80088d8:	2bff      	cmp	r3, #255	@ 0xff
 80088da:	f300 80bd 	bgt.w	8008a58 <SVCCTL_App_Notification+0x19c>
 80088de:	2b3e      	cmp	r3, #62	@ 0x3e
 80088e0:	d02b      	beq.n	800893a <SVCCTL_App_Notification+0x7e>
 80088e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80088e4:	f300 80b8 	bgt.w	8008a58 <SVCCTL_App_Notification+0x19c>
 80088e8:	2b05      	cmp	r3, #5
 80088ea:	d002      	beq.n	80088f2 <SVCCTL_App_Notification+0x36>
 80088ec:	2b10      	cmp	r3, #16
 80088ee:	d020      	beq.n	8008932 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80088f0:	e0b2      	b.n	8008a58 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	3302      	adds	r3, #2
 80088f6:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	4b59      	ldr	r3, [pc, #356]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008902:	8adb      	ldrh	r3, [r3, #22]
 8008904:	429a      	cmp	r2, r3
 8008906:	d106      	bne.n	8008916 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008908:	4b57      	ldr	r3, [pc, #348]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 800890a:	2200      	movs	r2, #0
 800890c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800890e:	4b56      	ldr	r3, [pc, #344]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008916:	2001      	movs	r0, #1
 8008918:	f000 f976 	bl	8008c08 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800891c:	4b53      	ldr	r3, [pc, #332]	@ (8008a6c <SVCCTL_App_Notification+0x1b0>)
 800891e:	2201      	movs	r2, #1
 8008920:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008922:	4b51      	ldr	r3, [pc, #324]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008924:	8ada      	ldrh	r2, [r3, #22]
 8008926:	4b51      	ldr	r3, [pc, #324]	@ (8008a6c <SVCCTL_App_Notification+0x1b0>)
 8008928:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800892a:	4850      	ldr	r0, [pc, #320]	@ (8008a6c <SVCCTL_App_Notification+0x1b0>)
 800892c:	f000 fa86 	bl	8008e3c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008930:	e095      	b.n	8008a5e <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8008932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008934:	3302      	adds	r3, #2
 8008936:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8008938:	e091      	b.n	8008a5e <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800893a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893c:	3302      	adds	r3, #2
 800893e:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d001      	beq.n	800894c <SVCCTL_App_Notification+0x90>
 8008948:	2b03      	cmp	r3, #3
          break;
 800894a:	e021      	b.n	8008990 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	3301      	adds	r3, #1
 8008950:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008952:	4b45      	ldr	r3, [pc, #276]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008954:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008958:	2b04      	cmp	r3, #4
 800895a:	d104      	bne.n	8008966 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800895c:	4b42      	ldr	r3, [pc, #264]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 800895e:	2206      	movs	r2, #6
 8008960:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008964:	e003      	b.n	800896e <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008966:	4b40      	ldr	r3, [pc, #256]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008968:	2205      	movs	r2, #5
 800896a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008974:	b29a      	uxth	r2, r3
 8008976:	4b3c      	ldr	r3, [pc, #240]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008978:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800897a:	4b3c      	ldr	r3, [pc, #240]	@ (8008a6c <SVCCTL_App_Notification+0x1b0>)
 800897c:	2200      	movs	r2, #0
 800897e:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008980:	4b39      	ldr	r3, [pc, #228]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008982:	8ada      	ldrh	r2, [r3, #22]
 8008984:	4b39      	ldr	r3, [pc, #228]	@ (8008a6c <SVCCTL_App_Notification+0x1b0>)
 8008986:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008988:	4838      	ldr	r0, [pc, #224]	@ (8008a6c <SVCCTL_App_Notification+0x1b0>)
 800898a:	f000 fa57 	bl	8008e3c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800898e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008990:	e065      	b.n	8008a5e <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008994:	3302      	adds	r3, #2
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d048      	beq.n	8008a38 <SVCCTL_App_Notification+0x17c>
 80089a6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80089aa:	4293      	cmp	r3, r2
 80089ac:	dc56      	bgt.n	8008a5c <SVCCTL_App_Notification+0x1a0>
 80089ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b2:	d04b      	beq.n	8008a4c <SVCCTL_App_Notification+0x190>
 80089b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b8:	dc50      	bgt.n	8008a5c <SVCCTL_App_Notification+0x1a0>
 80089ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 80089be:	4293      	cmp	r3, r2
 80089c0:	dc4c      	bgt.n	8008a5c <SVCCTL_App_Notification+0x1a0>
 80089c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c6:	dc04      	bgt.n	80089d2 <SVCCTL_App_Notification+0x116>
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d041      	beq.n	8008a50 <SVCCTL_App_Notification+0x194>
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d039      	beq.n	8008a44 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80089d0:	e044      	b.n	8008a5c <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 80089d2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d840      	bhi.n	8008a5c <SVCCTL_App_Notification+0x1a0>
 80089da:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <SVCCTL_App_Notification+0x124>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a31 	.word	0x08008a31
 80089e4:	08008a09 	.word	0x08008a09
 80089e8:	08008a5d 	.word	0x08008a5d
 80089ec:	08008a5d 	.word	0x08008a5d
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a55 	.word	0x08008a55
 80089fc:	08008a5d 	.word	0x08008a5d
 8008a00:	08008a1d 	.word	0x08008a1d
 8008a04:	08008a55 	.word	0x08008a55
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008a08:	4b17      	ldr	r3, [pc, #92]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008a0a:	8adb      	ldrh	r3, [r3, #22]
 8008a0c:	4918      	ldr	r1, [pc, #96]	@ (8008a70 <SVCCTL_App_Notification+0x1b4>)
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fd feee 	bl	80067f0 <aci_gap_pass_key_resp>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8008a1a:	e01c      	b.n	8008a56 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008a1c:	4b12      	ldr	r3, [pc, #72]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008a1e:	8adb      	ldrh	r3, [r3, #22]
 8008a20:	2101      	movs	r1, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe f8f8 	bl	8006c18 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8008a2e:	e012      	b.n	8008a56 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	3302      	adds	r3, #2
 8008a34:	623b      	str	r3, [r7, #32]
          break;
 8008a36:	e00e      	b.n	8008a56 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008a38:	4b0b      	ldr	r3, [pc, #44]	@ (8008a68 <SVCCTL_App_Notification+0x1ac>)
 8008a3a:	8adb      	ldrh	r3, [r3, #22]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe fbfe 	bl	800723e <aci_gatt_confirm_indication>
        break;
 8008a42:	e008      	b.n	8008a56 <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	3302      	adds	r3, #2
 8008a48:	61fb      	str	r3, [r7, #28]
          break;
 8008a4a:	e004      	b.n	8008a56 <SVCCTL_App_Notification+0x19a>
          break;
 8008a4c:	bf00      	nop
 8008a4e:	e005      	b.n	8008a5c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008a50:	bf00      	nop
 8008a52:	e003      	b.n	8008a5c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008a54:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008a56:	e001      	b.n	8008a5c <SVCCTL_App_Notification+0x1a0>
      break;
 8008a58:	bf00      	nop
 8008a5a:	e000      	b.n	8008a5e <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008a5c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008a5e:	2301      	movs	r3, #1
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3730      	adds	r7, #48	@ 0x30
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20000318 	.word	0x20000318
 8008a6c:	2000039c 	.word	0x2000039c
 8008a70:	0001b207 	.word	0x0001b207

08008a74 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008a7a:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <Ble_Tl_Init+0x20>)
 8008a7c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008a7e:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <Ble_Tl_Init+0x24>)
 8008a80:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008a82:	463b      	mov	r3, r7
 8008a84:	4619      	mov	r1, r3
 8008a86:	4805      	ldr	r0, [pc, #20]	@ (8008a9c <Ble_Tl_Init+0x28>)
 8008a88:	f7ff f894 	bl	8007bb4 <hci_init>

  return;
 8008a8c:	bf00      	nop
}
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	200300d8 	.word	0x200300d8
 8008a98:	08008da1 	.word	0x08008da1
 8008a9c:	08008d69 	.word	0x08008d69

08008aa0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa2:	b08d      	sub	sp, #52	@ 0x34
 8008aa4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008aaa:	2392      	movs	r3, #146	@ 0x92
 8008aac:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008aae:	f7fe fdb0 	bl	8007612 <hci_reset>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008ab6:	f000 f8d7 	bl	8008c68 <BleGetBdAddress>
 8008aba:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	2106      	movs	r1, #6
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f7fe fc66 	bl	8007392 <aci_hal_write_config_data>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008aca:	4a4a      	ldr	r2, [pc, #296]	@ (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008acc:	2110      	movs	r1, #16
 8008ace:	2018      	movs	r0, #24
 8008ad0:	f7fe fc5f 	bl	8007392 <aci_hal_write_config_data>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008ad8:	4a47      	ldr	r2, [pc, #284]	@ (8008bf8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008ada:	2110      	movs	r1, #16
 8008adc:	2008      	movs	r0, #8
 8008ade:	f7fe fc58 	bl	8007392 <aci_hal_write_config_data>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008ae6:	211f      	movs	r1, #31
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7fe fcd7 	bl	800749c <aci_hal_set_tx_power_level>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008af2:	f7fe f8f8 	bl	8006ce6 <aci_gatt_init>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	f043 0301 	orr.w	r3, r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01f      	beq.n	8008b4c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008bfc <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008b0e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008b10:	1dba      	adds	r2, r7, #6
 8008b12:	7bf8      	ldrb	r0, [r7, #15]
 8008b14:	1cbb      	adds	r3, r7, #2
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	2208      	movs	r2, #8
 8008b20:	2100      	movs	r1, #0
 8008b22:	f7fd fecc 	bl	80068be <aci_gap_init>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008b2a:	88fc      	ldrh	r4, [r7, #6]
 8008b2c:	88bd      	ldrh	r5, [r7, #4]
 8008b2e:	68b8      	ldr	r0, [r7, #8]
 8008b30:	f7f7 fb24 	bl	800017c <strlen>
 8008b34:	4603      	mov	r3, r0
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4629      	mov	r1, r5
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7fe fad2 	bl	80070ec <aci_gatt_update_char_value>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008b4c:	88f8      	ldrh	r0, [r7, #6]
 8008b4e:	8879      	ldrh	r1, [r7, #2]
 8008b50:	463b      	mov	r3, r7
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	2200      	movs	r2, #0
 8008b58:	f7fe fac8 	bl	80070ec <aci_gatt_update_char_value>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008b60:	2202      	movs	r2, #2
 8008b62:	2102      	movs	r1, #2
 8008b64:	2000      	movs	r0, #0
 8008b66:	f7fe fd78 	bl	800765a <hci_le_set_default_phy>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008b6e:	4b24      	ldr	r3, [pc, #144]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008b74:	4b22      	ldr	r3, [pc, #136]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fd fd21 	bl	80065c0 <aci_gap_set_io_capability>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008b82:	4b1f      	ldr	r3, [pc, #124]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008b88:	4b1d      	ldr	r3, [pc, #116]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b90:	2210      	movs	r2, #16
 8008b92:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008b94:	4b1a      	ldr	r3, [pc, #104]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008b9a:	4b19      	ldr	r3, [pc, #100]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b9c:	4a19      	ldr	r2, [pc, #100]	@ (8008c04 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008b9e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008ba0:	4b17      	ldr	r3, [pc, #92]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008ba6:	4b16      	ldr	r3, [pc, #88]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ba8:	789c      	ldrb	r4, [r3, #2]
 8008baa:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008bac:	785d      	ldrb	r5, [r3, #1]
 8008bae:	4b14      	ldr	r3, [pc, #80]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008bb0:	791b      	ldrb	r3, [r3, #4]
 8008bb2:	4a13      	ldr	r2, [pc, #76]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008bb4:	7952      	ldrb	r2, [r2, #5]
 8008bb6:	4912      	ldr	r1, [pc, #72]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008bb8:	78c9      	ldrb	r1, [r1, #3]
 8008bba:	4811      	ldr	r0, [pc, #68]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008bbc:	6880      	ldr	r0, [r0, #8]
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	9604      	str	r6, [sp, #16]
 8008bc2:	9003      	str	r0, [sp, #12]
 8008bc4:	9102      	str	r1, [sp, #8]
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2201      	movs	r2, #1
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7fd fd49 	bl	8006668 <aci_gap_set_authentication_requirement>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008bda:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008bdc:	789b      	ldrb	r3, [r3, #2]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008be2:	f7fd ff8b 	bl	8006afc <aci_gap_configure_filter_accept_list>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	0800a1d8 	.word	0x0800a1d8
 8008bf8:	0800a1e8 	.word	0x0800a1e8
 8008bfc:	08009ffc 	.word	0x08009ffc
 8008c00:	20000318 	.word	0x20000318
 8008c04:	0001b207 	.word	0x0001b207

08008c08 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	@ 0x30
 8008c0c:	af08      	add	r7, sp, #32
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c12:	2392      	movs	r3, #146	@ 0x92
 8008c14:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008c16:	4a12      	ldr	r2, [pc, #72]	@ (8008c60 <Adv_Request+0x58>)
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9306      	str	r3, [sp, #24]
 8008c22:	2300      	movs	r3, #0
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	2300      	movs	r3, #0
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9302      	str	r3, [sp, #8]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	2300      	movs	r3, #0
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	22a0      	movs	r2, #160	@ 0xa0
 8008c3e:	2180      	movs	r1, #128	@ 0x80
 8008c40:	2000      	movs	r0, #0
 8008c42:	f7fd fbc3 	bl	80063cc <aci_gap_set_discoverable>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008c4a:	4906      	ldr	r1, [pc, #24]	@ (8008c64 <Adv_Request+0x5c>)
 8008c4c:	2019      	movs	r0, #25
 8008c4e:	f7fd fee3 	bl	8006a18 <aci_gap_update_adv_data>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8008c56:	bf00      	nop
}
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000318 	.word	0x20000318
 8008c64:	2000002c 	.word	0x2000002c

08008c68 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008c6e:	f7ff fda3 	bl	80087b8 <LL_FLASH_GetUDN>
 8008c72:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d023      	beq.n	8008cc4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008c7c:	f7ff fdb4 	bl	80087e8 <LL_FLASH_GetSTCompanyID>
 8008c80:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008c82:	f7ff fda5 	bl	80087d0 <LL_FLASH_GetDeviceID>
 8008c86:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	4b16      	ldr	r3, [pc, #88]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008c8e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	4b14      	ldr	r3, [pc, #80]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008c98:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008ca0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	4b10      	ldr	r3, [pc, #64]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008ca8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	0a1b      	lsrs	r3, r3, #8
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008cb2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	0c1b      	lsrs	r3, r3, #16
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008cbc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <BleGetBdAddress+0x80>)
 8008cc0:	617b      	str	r3, [r7, #20]
 8008cc2:	e00b      	b.n	8008cdc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f7ff fc91 	bl	80085ec <OTP_Read>
 8008cca:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e001      	b.n	8008cdc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008cd8:	4b04      	ldr	r3, [pc, #16]	@ (8008cec <BleGetBdAddress+0x84>)
 8008cda:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008cdc:	697b      	ldr	r3, [r7, #20]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000310 	.word	0x20000310
 8008cec:	0800a1d0 	.word	0x0800a1d0

08008cf0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8008d20 <Adv_Cancel+0x30>)
 8008cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d00a      	beq.n	8008d16 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008d00:	2392      	movs	r3, #146	@ 0x92
 8008d02:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008d04:	f7fd fb3e 	bl	8006384 <aci_gap_set_non_discoverable>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008d0c:	4b04      	ldr	r3, [pc, #16]	@ (8008d20 <Adv_Cancel+0x30>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
}
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000318 	.word	0x20000318

08008d24 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	2002      	movs	r0, #2
 8008d30:	f000 ffd8 	bl	8009ce4 <UTIL_SEQ_SetTask>

  return;
 8008d34:	bf00      	nop
}
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008d44:	2001      	movs	r0, #1
 8008d46:	f001 f839 	bl	8009dbc <UTIL_SEQ_SetEvt>

  return;
 8008d4a:	bf00      	nop
}
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	f001 f84e 	bl	8009dfc <UTIL_SEQ_WaitEvt>

  return;
 8008d60:	bf00      	nop
}
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	3308      	adds	r3, #8
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fdd4 	bl	8007928 <SVCCTL_UserEvtRx>
 8008d80:	4603      	mov	r3, r0
 8008d82:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008d90:	e003      	b.n	8008d9a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
  return;
 8008d98:	bf00      	nop
}
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <BLE_StatusNot+0x16>
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d006      	beq.n	8008dc2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008db4:	e00b      	b.n	8008dce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008db6:	2303      	movs	r3, #3
 8008db8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 ffbe 	bl	8009d3c <UTIL_SEQ_PauseTask>
      break;
 8008dc0:	e005      	b.n	8008dce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 ffd8 	bl	8009d7c <UTIL_SEQ_ResumeTask>
      break;
 8008dcc:	bf00      	nop
  }

  return;
 8008dce:	bf00      	nop
}
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <Custom_STM_App_Notification>:
static void Sensor_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d81f      	bhi.n	8008e28 <Custom_STM_App_Notification+0x50>
 8008de8:	a201      	add	r2, pc, #4	@ (adr r2, 8008df0 <Custom_STM_App_Notification+0x18>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e29 	.word	0x08008e29
 8008df4:	08008e01 	.word	0x08008e01
 8008df8:	08008e17 	.word	0x08008e17
 8008dfc:	08008e29 	.word	0x08008e29
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_READ_EVT */
      break;

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 1;
 8008e00:	4b0c      	ldr	r3, [pc, #48]	@ (8008e34 <Custom_STM_App_Notification+0x5c>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	701a      	strb	r2, [r3, #0]
		HW_TS_Start(TemperatureTimerId,
 8008e06:	4b0c      	ldr	r3, [pc, #48]	@ (8008e38 <Custom_STM_App_Notification+0x60>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7f8 fcba 	bl	8001788 <HW_TS_Start>
				MS_TO_RTC_TICKS(SENSOR_UPDATE_PERIOD_MS));
		APP_DBG_MSG("## Combined Notifications ENABLED\n");
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
      break;
 8008e14:	e009      	b.n	8008e2a <Custom_STM_App_Notification+0x52>

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8008e16:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <Custom_STM_App_Notification+0x5c>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	701a      	strb	r2, [r3, #0]
		HW_TS_Stop(TemperatureTimerId);
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <Custom_STM_App_Notification+0x60>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7f8 fc2d 	bl	8001680 <HW_TS_Stop>
		APP_DBG_MSG("## Combined Notifications DISABLED\n");

      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
      break;
 8008e26:	e000      	b.n	8008e2a <Custom_STM_App_Notification+0x52>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008e28:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008e2a:	bf00      	nop
}
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200003a0 	.word	0x200003a0
 8008e38:	200003a4 	.word	0x200003a4

08008e3c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <Custom_APP_Notification+0x16>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d005      	beq.n	8008e5c <Custom_APP_Notification+0x20>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008e50:	e011      	b.n	8008e76 <Custom_APP_Notification+0x3a>
		Custom_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	885a      	ldrh	r2, [r3, #2]
 8008e56:	4b0a      	ldr	r3, [pc, #40]	@ (8008e80 <Custom_APP_Notification+0x44>)
 8008e58:	805a      	strh	r2, [r3, #2]
      break;
 8008e5a:	e00c      	b.n	8008e76 <Custom_APP_Notification+0x3a>
		if (Custom_App_Context.Temperature_pressure_Notification_Status == 1) {
 8008e5c:	4b08      	ldr	r3, [pc, #32]	@ (8008e80 <Custom_APP_Notification+0x44>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d104      	bne.n	8008e6e <Custom_APP_Notification+0x32>
			HW_TS_Stop(TemperatureTimerId);
 8008e64:	4b07      	ldr	r3, [pc, #28]	@ (8008e84 <Custom_APP_Notification+0x48>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7f8 fc09 	bl	8001680 <HW_TS_Stop>
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8008e6e:	4b04      	ldr	r3, [pc, #16]	@ (8008e80 <Custom_APP_Notification+0x44>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
      break;
 8008e74:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008e76:	bf00      	nop
}
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200003a0 	.word	0x200003a0
 8008e84:	200003a4 	.word	0x200003a4

08008e88 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//Sensor_ReadCoefficients();
	HW_TS_Create(0, &TemperatureTimerId, hw_ts_Repeated, Sensor_Timer_Callback);
 8008e8c:	4b03      	ldr	r3, [pc, #12]	@ (8008e9c <Custom_APP_Init+0x14>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	4903      	ldr	r1, [pc, #12]	@ (8008ea0 <Custom_APP_Init+0x18>)
 8008e92:	2000      	movs	r0, #0
 8008e94:	f7f8 fb7a 	bl	800158c <HW_TS_Create>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008e98:	bf00      	nop
}
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	08009099 	.word	0x08009099
 8008ea0:	200003a4 	.word	0x200003a4

08008ea4 <Sensor_ReadTempPressure>:

  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Sensor_ReadTempPressure(void) {
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
	/* 1) Send START CONVERSION (temp+pressure) */
	TX_BUFFER[0] = start_conversion_cmd;
 8008ea8:	224c      	movs	r2, #76	@ 0x4c
 8008eaa:	4b66      	ldr	r3, [pc, #408]	@ (8009044 <Sensor_ReadTempPressure+0x1a0>)
 8008eac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2110      	movs	r1, #16
 8008eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008eb6:	f7fa fb0d 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8008eba:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4960      	ldr	r1, [pc, #384]	@ (8009044 <Sensor_ReadTempPressure+0x1a0>)
 8008ec2:	4861      	ldr	r0, [pc, #388]	@ (8009048 <Sensor_ReadTempPressure+0x1a4>)
 8008ec4:	f7fc fbd5 	bl	8005672 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008ec8:	2201      	movs	r2, #1
 8008eca:	2110      	movs	r1, #16
 8008ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ed0:	f7fa fb00 	bl	80034d4 <HAL_GPIO_WritePin>

	/* 2) Wait ~300 ms for conversion to complete */

	/* 3) Send READ ADC command, read 6 bytes total */
	TX_BUFFER[0] = read_adc_cmd;
 8008ed4:	225c      	movs	r2, #92	@ 0x5c
 8008ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8009044 <Sensor_ReadTempPressure+0x1a0>)
 8008ed8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8008eda:	2200      	movs	r2, #0
 8008edc:	2110      	movs	r1, #16
 8008ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ee2:	f7fa faf7 	bl	80034d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8008ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eea:	2201      	movs	r2, #1
 8008eec:	4955      	ldr	r1, [pc, #340]	@ (8009044 <Sensor_ReadTempPressure+0x1a0>)
 8008eee:	4856      	ldr	r0, [pc, #344]	@ (8009048 <Sensor_ReadTempPressure+0x1a4>)
 8008ef0:	f7fc fbbf 	bl	8005672 <HAL_SPI_Transmit>
	// We expect: RX_BUFFER[0..2] = raw_temp (MSB, mid, LSB)
	//            RX_BUFFER[3..5] = raw_pressure
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, HAL_MAX_DELAY);
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef8:	2206      	movs	r2, #6
 8008efa:	4954      	ldr	r1, [pc, #336]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008efc:	4852      	ldr	r0, [pc, #328]	@ (8009048 <Sensor_ReadTempPressure+0x1a4>)
 8008efe:	f7fc fd2e 	bl	800595e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008f02:	2201      	movs	r2, #1
 8008f04:	2110      	movs	r1, #16
 8008f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008f0a:	f7fa fae3 	bl	80034d4 <HAL_GPIO_WritePin>

	/* 4) Merge bytes: raw_temp = 24‐bit, raw_pressure = 24‐bit */
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 8008f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	041a      	lsls	r2, r3, #16
 8008f14:	4b4d      	ldr	r3, [pc, #308]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008f16:	785b      	ldrb	r3, [r3, #1]
 8008f18:	021b      	lsls	r3, r3, #8
 8008f1a:	4313      	orrs	r3, r2
			| (uint32_t) RX_BUFFER[2];
 8008f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008f1e:	7892      	ldrb	r2, [r2, #2]
 8008f20:	4313      	orrs	r3, r2
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 8008f22:	4a4b      	ldr	r2, [pc, #300]	@ (8009050 <Sensor_ReadTempPressure+0x1ac>)
 8008f24:	6013      	str	r3, [r2, #0]
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 8008f26:	4b49      	ldr	r3, [pc, #292]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008f28:	78db      	ldrb	r3, [r3, #3]
 8008f2a:	041a      	lsls	r2, r3, #16
			| ((uint32_t) RX_BUFFER[4] << 8) | (uint32_t) RX_BUFFER[5];
 8008f2c:	4b47      	ldr	r3, [pc, #284]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008f2e:	791b      	ldrb	r3, [r3, #4]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	4313      	orrs	r3, r2
 8008f34:	4a45      	ldr	r2, [pc, #276]	@ (800904c <Sensor_ReadTempPressure+0x1a8>)
 8008f36:	7952      	ldrb	r2, [r2, #5]
 8008f38:	4313      	orrs	r3, r2
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 8008f3a:	4a46      	ldr	r2, [pc, #280]	@ (8009054 <Sensor_ReadTempPressure+0x1b0>)
 8008f3c:	6013      	str	r3, [r2, #0]

	/* 5) Compute “temperature” per your formula (as float) */
	// temperature = C1 * raw_temp / 2^29 – C3 * raw_pressure / 2^35 – C2/64
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 8008f3e:	4b46      	ldr	r3, [pc, #280]	@ (8009058 <Sensor_ReadTempPressure+0x1b4>)
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f4a:	4b41      	ldr	r3, [pc, #260]	@ (8009050 <Sensor_ReadTempPressure+0x1ac>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5a:	eddf 6a40 	vldr	s13, [pc, #256]	@ 800905c <Sensor_ReadTempPressure+0x1b8>
 8008f5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / 34359738368.0f)
 8008f62:	4b3f      	ldr	r3, [pc, #252]	@ (8009060 <Sensor_ReadTempPressure+0x1bc>)
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6e:	4b39      	ldr	r3, [pc, #228]	@ (8009054 <Sensor_ReadTempPressure+0x1b0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008f7e:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8009064 <Sensor_ReadTempPressure+0x1c0>
 8008f82:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008f86:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / 64.0f);
 8008f8a:	4b37      	ldr	r3, [pc, #220]	@ (8009068 <Sensor_ReadTempPressure+0x1c4>)
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f96:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800906c <Sensor_ReadTempPressure+0x1c8>
 8008f9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 8008fa2:	4b33      	ldr	r3, [pc, #204]	@ (8009070 <Sensor_ReadTempPressure+0x1cc>)
 8008fa4:	edc3 7a00 	vstr	s15, [r3]

	/* 6) Compute offset & sensitivity */
	offset = (float) C6 + ((float) C7 * temperature / 512.0f);
 8008fa8:	4b32      	ldr	r3, [pc, #200]	@ (8009074 <Sensor_ReadTempPressure+0x1d0>)
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	ee07 3a90 	vmov	s15, r3
 8008fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fb4:	4b30      	ldr	r3, [pc, #192]	@ (8009078 <Sensor_ReadTempPressure+0x1d4>)
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8009070 <Sensor_ReadTempPressure+0x1cc>)
 8008fc2:	edd3 7a00 	vldr	s15, [r3]
 8008fc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008fca:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800907c <Sensor_ReadTempPressure+0x1d8>
 8008fce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8009080 <Sensor_ReadTempPressure+0x1dc>)
 8008fd8:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + ((float) C9 * temperature / 512.0f);
 8008fdc:	4b29      	ldr	r3, [pc, #164]	@ (8009084 <Sensor_ReadTempPressure+0x1e0>)
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fe8:	4b27      	ldr	r3, [pc, #156]	@ (8009088 <Sensor_ReadTempPressure+0x1e4>)
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	ee07 3a90 	vmov	s15, r3
 8008ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8009070 <Sensor_ReadTempPressure+0x1cc>)
 8008ff6:	edd3 7a00 	vldr	s15, [r3]
 8008ffa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008ffe:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 800907c <Sensor_ReadTempPressure+0x1d8>
 8009002:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800900a:	4b20      	ldr	r3, [pc, #128]	@ (800908c <Sensor_ReadTempPressure+0x1e8>)
 800900c:	edc3 7a00 	vstr	s15, [r3]

	/* 7) Finally, compute pressure: */
	// pressure = raw_pressure * sensitivity / 2^22 – offset
	pressure = ((float) raw_pressure * sensitivity / 4194304.0f) - offset;
 8009010:	4b10      	ldr	r3, [pc, #64]	@ (8009054 <Sensor_ReadTempPressure+0x1b0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800901c:	4b1b      	ldr	r3, [pc, #108]	@ (800908c <Sensor_ReadTempPressure+0x1e8>)
 800901e:	edd3 7a00 	vldr	s15, [r3]
 8009022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009026:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8009090 <Sensor_ReadTempPressure+0x1ec>
 800902a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800902e:	4b14      	ldr	r3, [pc, #80]	@ (8009080 <Sensor_ReadTempPressure+0x1dc>)
 8009030:	edd3 7a00 	vldr	s15, [r3]
 8009034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009038:	4b16      	ldr	r3, [pc, #88]	@ (8009094 <Sensor_ReadTempPressure+0x1f0>)
 800903a:	edc3 7a00 	vstr	s15, [r3]
}
 800903e:	bf00      	nop
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000280 	.word	0x20000280
 8009048:	200001f0 	.word	0x200001f0
 800904c:	20000284 	.word	0x20000284
 8009050:	2000026c 	.word	0x2000026c
 8009054:	20000268 	.word	0x20000268
 8009058:	20000254 	.word	0x20000254
 800905c:	4e000000 	.word	0x4e000000
 8009060:	20000258 	.word	0x20000258
 8009064:	51000000 	.word	0x51000000
 8009068:	20000256 	.word	0x20000256
 800906c:	42800000 	.word	0x42800000
 8009070:	20000270 	.word	0x20000270
 8009074:	2000025e 	.word	0x2000025e
 8009078:	20000260 	.word	0x20000260
 800907c:	44000000 	.word	0x44000000
 8009080:	20000274 	.word	0x20000274
 8009084:	20000262 	.word	0x20000262
 8009088:	20000264 	.word	0x20000264
 800908c:	20000278 	.word	0x20000278
 8009090:	4a800000 	.word	0x4a800000
 8009094:	2000027c 	.word	0x2000027c

08009098 <Sensor_Timer_Callback>:

static void Sensor_Timer_Callback(void) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
	// Only do something if a client is subscribed for notifications
	if (Custom_App_Context.Temperature_pressure_Notification_Status) {
 800909e:	4b14      	ldr	r3, [pc, #80]	@ (80090f0 <Sensor_Timer_Callback+0x58>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01f      	beq.n	80090e6 <Sensor_Timer_Callback+0x4e>
		uint8_t sensor_payload[8];

		// 1. Read the sensor to get the latest temperature and pressure
		Sensor_ReadTempPressure();
 80090a6:	f7ff fefd 	bl	8008ea4 <Sensor_ReadTempPressure>

		// 2. Pack both float values into the 8-byte array
		memcpy(&sensor_payload[0], &temperature, sizeof(float)); // First 4 bytes
 80090aa:	4b12      	ldr	r3, [pc, #72]	@ (80090f4 <Sensor_Timer_Callback+0x5c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	603b      	str	r3, [r7, #0]
		memcpy(&sensor_payload[4], &pressure, sizeof(float));    // Next 4 bytes
 80090b0:	4b11      	ldr	r3, [pc, #68]	@ (80090f8 <Sensor_Timer_Callback+0x60>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	607b      	str	r3, [r7, #4]

		APP_DBG_MSG("Sending Combined Temp/Pres Notification...\n");

		// 3. Send the single 8-byte notification
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMPERATURE_PRESSURE,
 80090b6:	463b      	mov	r3, r7
 80090b8:	4619      	mov	r1, r3
 80090ba:	2000      	movs	r0, #0
 80090bc:	f000 f962 	bl	8009384 <Custom_STM_App_Update_Char>
				sensor_payload);
		HAL_LPTIM_Counter_Start_IT(&hlptim1, 15360);
 80090c0:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 80090c4:	480d      	ldr	r0, [pc, #52]	@ (80090fc <Sensor_Timer_Callback+0x64>)
 80090c6:	f7fa fbaf 	bl	8003828 <HAL_LPTIM_Counter_Start_IT>
		aci_gap_terminate(Custom_App_Context.ConnectionHandle, 0x13);
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <Sensor_Timer_Callback+0x58>)
 80090cc:	885b      	ldrh	r3, [r3, #2]
 80090ce:	2113      	movs	r1, #19
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fd fd37 	bl	8006b44 <aci_gap_terminate>
		UTIL_LPM_SetStopMode( 1U<<CFG_LPM_APP_BLE, UTIL_LPM_ENABLE );
 80090d6:	2100      	movs	r1, #0
 80090d8:	2002      	movs	r0, #2
 80090da:	f000 fc4f 	bl	800997c <UTIL_LPM_SetStopMode>
		UTIL_LPM_SetOffMode(  1U<<CFG_LPM_APP_BLE, UTIL_LPM_ENABLE );
 80090de:	2100      	movs	r1, #0
 80090e0:	2002      	movs	r0, #2
 80090e2:	f000 fc7b 	bl	80099dc <UTIL_LPM_SetOffMode>
	}
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	200003a0 	.word	0x200003a0
 80090f4:	20000270 	.word	0x20000270
 80090f8:	2000027c 	.word	0x2000027c
 80090fc:	20000194 	.word	0x20000194

08009100 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b092      	sub	sp, #72	@ 0x48
 8009104:	af02      	add	r7, sp, #8
 8009106:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009108:	2300      	movs	r3, #0
 800910a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3301      	adds	r3, #1
 8009112:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch (event_pckt->evt)
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2bff      	cmp	r3, #255	@ 0xff
 800911a:	f040 80ad 	bne.w	8009278 <Custom_STM_Event_Handler+0x178>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800911e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009120:	3302      	adds	r3, #2
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (blecore_evt->ecode)
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800912e:	2b1a      	cmp	r3, #26
 8009130:	f200 809c 	bhi.w	800926c <Custom_STM_Event_Handler+0x16c>
 8009134:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <Custom_STM_Event_Handler+0x3c>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	080091a9 	.word	0x080091a9
 8009140:	0800926d 	.word	0x0800926d
 8009144:	0800926d 	.word	0x0800926d
 8009148:	0800926d 	.word	0x0800926d
 800914c:	0800926d 	.word	0x0800926d
 8009150:	0800926d 	.word	0x0800926d
 8009154:	0800926d 	.word	0x0800926d
 8009158:	0800926d 	.word	0x0800926d
 800915c:	0800926d 	.word	0x0800926d
 8009160:	0800926d 	.word	0x0800926d
 8009164:	0800926d 	.word	0x0800926d
 8009168:	0800926d 	.word	0x0800926d
 800916c:	0800926d 	.word	0x0800926d
 8009170:	0800926d 	.word	0x0800926d
 8009174:	0800926d 	.word	0x0800926d
 8009178:	0800926d 	.word	0x0800926d
 800917c:	0800926d 	.word	0x0800926d
 8009180:	0800926d 	.word	0x0800926d
 8009184:	0800926d 	.word	0x0800926d
 8009188:	080091f7 	.word	0x080091f7
 800918c:	0800926d 	.word	0x0800926d
 8009190:	0800926d 	.word	0x0800926d
 8009194:	0800926d 	.word	0x0800926d
 8009198:	0800926d 	.word	0x0800926d
 800919c:	0800926d 	.word	0x0800926d
 80091a0:	0800926d 	.word	0x0800926d
 80091a4:	0800924f 	.word	0x0800924f
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80091a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091aa:	3302      	adds	r3, #2
 80091ac:	62bb      	str	r3, [r7, #40]	@ 0x28
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	885b      	ldrh	r3, [r3, #2]
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	461a      	mov	r2, r3
 80091b6:	4b34      	ldr	r3, [pc, #208]	@ (8009288 <Custom_STM_Event_Handler+0x188>)
 80091b8:	885b      	ldrh	r3, [r3, #2]
 80091ba:	3302      	adds	r3, #2
 80091bc:	429a      	cmp	r2, r3
 80091be:	d157      	bne.n	8009270 <Custom_STM_Event_Handler+0x170>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	7a1b      	ldrb	r3, [r3, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d002      	beq.n	80091d4 <Custom_STM_Event_Handler+0xd4>
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d008      	beq.n	80091e4 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 80091d2:	e00f      	b.n	80091f4 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT;
 80091d4:	2302      	movs	r3, #2
 80091d6:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 80091d8:	f107 0314 	add.w	r3, r7, #20
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff fdfb 	bl	8008dd8 <Custom_STM_App_Notification>
                break;
 80091e2:	e007      	b.n	80091f4 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT;
 80091e4:	2301      	movs	r3, #1
 80091e6:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff fdf3 	bl	8008dd8 <Custom_STM_App_Notification>
                break;
 80091f2:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80091f4:	e03c      	b.n	8009270 <Custom_STM_Event_Handler+0x170>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	3302      	adds	r3, #2
 80091fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	885b      	ldrh	r3, [r3, #2]
 8009200:	b29b      	uxth	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <Custom_STM_Event_Handler+0x188>)
 8009206:	885b      	ldrh	r3, [r3, #2]
 8009208:	3301      	adds	r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	d132      	bne.n	8009274 <Custom_STM_Event_Handler+0x174>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800920e:	2301      	movs	r3, #1
 8009210:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
				uint8_t sensor_payload[8];
				Sensor_ReadTempPressure();
 8009214:	f7ff fe46 	bl	8008ea4 <Sensor_ReadTempPressure>
				memcpy(&sensor_payload[0], &temperature, sizeof(float));
 8009218:	4b1c      	ldr	r3, [pc, #112]	@ (800928c <Custom_STM_Event_Handler+0x18c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
				memcpy(&sensor_payload[4], &pressure, sizeof(float));
 800921e:	4b1c      	ldr	r3, [pc, #112]	@ (8009290 <Custom_STM_Event_Handler+0x190>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	613b      	str	r3, [r7, #16]

				aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 8009224:	4b18      	ldr	r3, [pc, #96]	@ (8009288 <Custom_STM_Event_Handler+0x188>)
 8009226:	8818      	ldrh	r0, [r3, #0]
 8009228:	4b17      	ldr	r3, [pc, #92]	@ (8009288 <Custom_STM_Event_Handler+0x188>)
 800922a:	8859      	ldrh	r1, [r3, #2]
 800922c:	4b19      	ldr	r3, [pc, #100]	@ (8009294 <Custom_STM_Event_Handler+0x194>)
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b2da      	uxtb	r2, r3
 8009232:	f107 030c 	add.w	r3, r7, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	2200      	movs	r2, #0
 800923c:	f7fd ff56 	bl	80070ec <aci_gatt_update_char_value>
						CustomContext.CustomTemperature_PressureHdle, 0,
						SizeTemperature_Pressure, // Use the 8-byte size
						sensor_payload);
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f84e 	bl	80072e8 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800924c:	e012      	b.n	8009274 <Custom_STM_Event_Handler+0x174>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800924e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009250:	3302      	adds	r3, #2
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009254:	2303      	movs	r3, #3
 8009256:	753b      	strb	r3, [r7, #20]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	84bb      	strh	r3, [r7, #36]	@ 0x24
          Custom_STM_App_Notification(&Notification);
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fdb7 	bl	8008dd8 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800926a:	e004      	b.n	8009276 <Custom_STM_Event_Handler+0x176>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800926c:	bf00      	nop
 800926e:	e004      	b.n	800927a <Custom_STM_Event_Handler+0x17a>
          break;
 8009270:	bf00      	nop
 8009272:	e002      	b.n	800927a <Custom_STM_Event_Handler+0x17a>
          break;
 8009274:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009276:	e000      	b.n	800927a <Custom_STM_Event_Handler+0x17a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009278:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800927a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}/* end Custom_STM_Event_Handler */
 800927e:	4618      	mov	r0, r3
 8009280:	3740      	adds	r7, #64	@ 0x40
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200003a8 	.word	0x200003a8
 800928c:	20000270 	.word	0x20000270
 8009290:	2000027c 	.word	0x2000027c
 8009294:	20000046 	.word	0x20000046

08009298 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08c      	sub	sp, #48	@ 0x30
 800929c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800929e:	2392      	movs	r3, #146	@ 0x92
 80092a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80092a2:	4834      	ldr	r0, [pc, #208]	@ (8009374 <SVCCTL_InitCustomSvc+0xdc>)
 80092a4:	f7fe fb26 	bl	80078f4 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 80092a8:	2304      	movs	r3, #4
 80092aa:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_SENSOR_UUID(uuid.Char_UUID_128);
 80092ac:	238f      	movs	r3, #143	@ 0x8f
 80092ae:	713b      	strb	r3, [r7, #4]
 80092b0:	23e5      	movs	r3, #229	@ 0xe5
 80092b2:	717b      	strb	r3, [r7, #5]
 80092b4:	23b3      	movs	r3, #179	@ 0xb3
 80092b6:	71bb      	strb	r3, [r7, #6]
 80092b8:	23d5      	movs	r3, #213	@ 0xd5
 80092ba:	71fb      	strb	r3, [r7, #7]
 80092bc:	232e      	movs	r3, #46	@ 0x2e
 80092be:	723b      	strb	r3, [r7, #8]
 80092c0:	237f      	movs	r3, #127	@ 0x7f
 80092c2:	727b      	strb	r3, [r7, #9]
 80092c4:	234a      	movs	r3, #74	@ 0x4a
 80092c6:	72bb      	strb	r3, [r7, #10]
 80092c8:	2398      	movs	r3, #152	@ 0x98
 80092ca:	72fb      	strb	r3, [r7, #11]
 80092cc:	232a      	movs	r3, #42	@ 0x2a
 80092ce:	733b      	strb	r3, [r7, #12]
 80092d0:	2348      	movs	r3, #72	@ 0x48
 80092d2:	737b      	strb	r3, [r7, #13]
 80092d4:	237a      	movs	r3, #122	@ 0x7a
 80092d6:	73bb      	strb	r3, [r7, #14]
 80092d8:	23cc      	movs	r3, #204	@ 0xcc
 80092da:	73fb      	strb	r3, [r7, #15]
 80092dc:	2325      	movs	r3, #37	@ 0x25
 80092de:	743b      	strb	r3, [r7, #16]
 80092e0:	2323      	movs	r3, #35	@ 0x23
 80092e2:	747b      	strb	r3, [r7, #17]
 80092e4:	2300      	movs	r3, #0
 80092e6:	74bb      	strb	r3, [r7, #18]
 80092e8:	2300      	movs	r3, #0
 80092ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80092ec:	7dbb      	ldrb	r3, [r7, #22]
 80092ee:	1d39      	adds	r1, r7, #4
 80092f0:	4a21      	ldr	r2, [pc, #132]	@ (8009378 <SVCCTL_InitCustomSvc+0xe0>)
 80092f2:	9200      	str	r2, [sp, #0]
 80092f4:	2201      	movs	r2, #1
 80092f6:	2002      	movs	r0, #2
 80092f8:	f7fd fd1a 	bl	8006d30 <aci_gatt_add_service>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Temperature_Pressure
   */
  COPY_TEMPERATURE_PRESSURE_UUID(uuid.Char_UUID_128);
 8009300:	2319      	movs	r3, #25
 8009302:	713b      	strb	r3, [r7, #4]
 8009304:	23ed      	movs	r3, #237	@ 0xed
 8009306:	717b      	strb	r3, [r7, #5]
 8009308:	2382      	movs	r3, #130	@ 0x82
 800930a:	71bb      	strb	r3, [r7, #6]
 800930c:	23ae      	movs	r3, #174	@ 0xae
 800930e:	71fb      	strb	r3, [r7, #7]
 8009310:	23ed      	movs	r3, #237	@ 0xed
 8009312:	723b      	strb	r3, [r7, #8]
 8009314:	2321      	movs	r3, #33	@ 0x21
 8009316:	727b      	strb	r3, [r7, #9]
 8009318:	234c      	movs	r3, #76	@ 0x4c
 800931a:	72bb      	strb	r3, [r7, #10]
 800931c:	239d      	movs	r3, #157	@ 0x9d
 800931e:	72fb      	strb	r3, [r7, #11]
 8009320:	2341      	movs	r3, #65	@ 0x41
 8009322:	733b      	strb	r3, [r7, #12]
 8009324:	2345      	movs	r3, #69	@ 0x45
 8009326:	737b      	strb	r3, [r7, #13]
 8009328:	2322      	movs	r3, #34	@ 0x22
 800932a:	73bb      	strb	r3, [r7, #14]
 800932c:	238e      	movs	r3, #142	@ 0x8e
 800932e:	73fb      	strb	r3, [r7, #15]
 8009330:	2322      	movs	r3, #34	@ 0x22
 8009332:	743b      	strb	r3, [r7, #16]
 8009334:	2323      	movs	r3, #35	@ 0x23
 8009336:	747b      	strb	r3, [r7, #17]
 8009338:	2300      	movs	r3, #0
 800933a:	74bb      	strb	r3, [r7, #18]
 800933c:	2300      	movs	r3, #0
 800933e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSensorHdle,
 8009340:	4b0d      	ldr	r3, [pc, #52]	@ (8009378 <SVCCTL_InitCustomSvc+0xe0>)
 8009342:	8818      	ldrh	r0, [r3, #0]
 8009344:	4b0d      	ldr	r3, [pc, #52]	@ (800937c <SVCCTL_InitCustomSvc+0xe4>)
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	1d3a      	adds	r2, r7, #4
 800934a:	490d      	ldr	r1, [pc, #52]	@ (8009380 <SVCCTL_InitCustomSvc+0xe8>)
 800934c:	9105      	str	r1, [sp, #20]
 800934e:	2101      	movs	r1, #1
 8009350:	9104      	str	r1, [sp, #16]
 8009352:	2110      	movs	r1, #16
 8009354:	9103      	str	r1, [sp, #12]
 8009356:	2104      	movs	r1, #4
 8009358:	9102      	str	r1, [sp, #8]
 800935a:	2100      	movs	r1, #0
 800935c:	9101      	str	r1, [sp, #4]
 800935e:	2112      	movs	r1, #18
 8009360:	9100      	str	r1, [sp, #0]
 8009362:	2102      	movs	r1, #2
 8009364:	f7fd fdba 	bl	8006edc <aci_gatt_add_char>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800936c:	bf00      	nop
}
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	08009101 	.word	0x08009101
 8009378:	200003a8 	.word	0x200003a8
 800937c:	20000046 	.word	0x20000046
 8009380:	200003aa 	.word	0x200003aa

08009384 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af02      	add	r7, sp, #8
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009390:	2392      	movs	r3, #146	@ 0x92
 8009392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10f      	bne.n	80093ba <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_TEMPERATURE_PRESSURE:
      ret = aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 800939a:	4b0b      	ldr	r3, [pc, #44]	@ (80093c8 <Custom_STM_App_Update_Char+0x44>)
 800939c:	8818      	ldrh	r0, [r3, #0]
 800939e:	4b0a      	ldr	r3, [pc, #40]	@ (80093c8 <Custom_STM_App_Update_Char+0x44>)
 80093a0:	8859      	ldrh	r1, [r3, #2]
 80093a2:	4b0a      	ldr	r3, [pc, #40]	@ (80093cc <Custom_STM_App_Update_Char+0x48>)
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4613      	mov	r3, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	f7fd fe9c 	bl	80070ec <aci_gatt_update_char_value>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMPERATURE_PRESSURE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 80093b8:	e000      	b.n	80093bc <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 80093ba:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200003a8 	.word	0x200003a8
 80093cc:	20000046 	.word	0x20000046

080093d0 <LL_PWR_EnableBootC2>:
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80093d4:	4b05      	ldr	r3, [pc, #20]	@ (80093ec <LL_PWR_EnableBootC2+0x1c>)
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	4a04      	ldr	r2, [pc, #16]	@ (80093ec <LL_PWR_EnableBootC2+0x1c>)
 80093da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093de:	60d3      	str	r3, [r2, #12]
}
 80093e0:	bf00      	nop
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	58000400 	.word	0x58000400

080093f0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80093f8:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80093fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80093fe:	4905      	ldr	r1, [pc, #20]	@ (8009414 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4313      	orrs	r3, r2
 8009404:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	58000800 	.word	0x58000800

08009418 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009420:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009422:	6a1a      	ldr	r2, [r3, #32]
 8009424:	4904      	ldr	r1, [pc, #16]	@ (8009438 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4313      	orrs	r3, r2
 800942a:	620b      	str	r3, [r1, #32]
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	58000800 	.word	0x58000800

0800943c <LL_AHB3_GRP1_EnableClock>:
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800944a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4313      	orrs	r3, r2
 8009452:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4013      	ands	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009460:	68fb      	ldr	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800947a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800947e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4313      	orrs	r3, r2
 8009486:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800948a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800948e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4013      	ands	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009498:	68fb      	ldr	r3, [r7, #12]
}
 800949a:	bf00      	nop
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <LL_C1_IPCC_EnableIT_TXF>:
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	601a      	str	r2, [r3, #0]
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <LL_C1_IPCC_EnableIT_RXO>:
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f043 0201 	orr.w	r2, r3, #1
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	601a      	str	r2, [r3, #0]
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	041b      	lsls	r3, r3, #16
 80094f8:	43db      	mvns	r3, r3
 80094fa:	401a      	ands	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	041b      	lsls	r3, r3, #16
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	43db      	mvns	r3, r3
 8009542:	401a      	ands	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	605a      	str	r2, [r3, #4]
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	609a      	str	r2, [r3, #8]
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	041a      	lsls	r2, r3, #16
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	609a      	str	r2, [r3, #8]
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	4013      	ands	r3, r2
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d101      	bne.n	80095aa <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	69da      	ldr	r2, [r3, #28]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	4013      	ands	r3, r2
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d101      	bne.n	80095d4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80095e8:	2102      	movs	r1, #2
 80095ea:	4818      	ldr	r0, [pc, #96]	@ (800964c <HW_IPCC_Rx_Handler+0x68>)
 80095ec:	f7ff ffe4 	bl	80095b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d008      	beq.n	8009608 <HW_IPCC_Rx_Handler+0x24>
 80095f6:	4b15      	ldr	r3, [pc, #84]	@ (800964c <HW_IPCC_Rx_Handler+0x68>)
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009602:	f000 f925 	bl	8009850 <HW_IPCC_SYS_EvtHandler>
 8009606:	e01e      	b.n	8009646 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009608:	2101      	movs	r1, #1
 800960a:	4810      	ldr	r0, [pc, #64]	@ (800964c <HW_IPCC_Rx_Handler+0x68>)
 800960c:	f7ff ffd4 	bl	80095b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d008      	beq.n	8009628 <HW_IPCC_Rx_Handler+0x44>
 8009616:	4b0d      	ldr	r3, [pc, #52]	@ (800964c <HW_IPCC_Rx_Handler+0x68>)
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009622:	f000 f899 	bl	8009758 <HW_IPCC_BLE_EvtHandler>
 8009626:	e00e      	b.n	8009646 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009628:	2108      	movs	r1, #8
 800962a:	4808      	ldr	r0, [pc, #32]	@ (800964c <HW_IPCC_Rx_Handler+0x68>)
 800962c:	f7ff ffc4 	bl	80095b8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d008      	beq.n	8009648 <HW_IPCC_Rx_Handler+0x64>
 8009636:	4b05      	ldr	r3, [pc, #20]	@ (800964c <HW_IPCC_Rx_Handler+0x68>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009642:	f000 f97d 	bl	8009940 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009646:	bf00      	nop
 8009648:	bf00      	nop
}
 800964a:	bd80      	pop	{r7, pc}
 800964c:	58000c00 	.word	0x58000c00

08009650 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009654:	2102      	movs	r1, #2
 8009656:	4818      	ldr	r0, [pc, #96]	@ (80096b8 <HW_IPCC_Tx_Handler+0x68>)
 8009658:	f7ff ff99 	bl	800958e <LL_C1_IPCC_IsActiveFlag_CHx>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d108      	bne.n	8009674 <HW_IPCC_Tx_Handler+0x24>
 8009662:	4b15      	ldr	r3, [pc, #84]	@ (80096b8 <HW_IPCC_Tx_Handler+0x68>)
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800966e:	f000 f8d3 	bl	8009818 <HW_IPCC_SYS_CmdEvtHandler>
 8009672:	e01e      	b.n	80096b2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009674:	2108      	movs	r1, #8
 8009676:	4810      	ldr	r0, [pc, #64]	@ (80096b8 <HW_IPCC_Tx_Handler+0x68>)
 8009678:	f7ff ff89 	bl	800958e <LL_C1_IPCC_IsActiveFlag_CHx>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d108      	bne.n	8009694 <HW_IPCC_Tx_Handler+0x44>
 8009682:	4b0d      	ldr	r3, [pc, #52]	@ (80096b8 <HW_IPCC_Tx_Handler+0x68>)
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800968e:	f000 f919 	bl	80098c4 <HW_IPCC_MM_FreeBufHandler>
 8009692:	e00e      	b.n	80096b2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009694:	2120      	movs	r1, #32
 8009696:	4808      	ldr	r0, [pc, #32]	@ (80096b8 <HW_IPCC_Tx_Handler+0x68>)
 8009698:	f7ff ff79 	bl	800958e <LL_C1_IPCC_IsActiveFlag_CHx>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d108      	bne.n	80096b4 <HW_IPCC_Tx_Handler+0x64>
 80096a2:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <HW_IPCC_Tx_Handler+0x68>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80096ae:	f000 f85f 	bl	8009770 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
}
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	58000c00 	.word	0x58000c00

080096bc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80096c0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80096c4:	f7ff fed3 	bl	800946e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80096c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80096cc:	f7ff fea4 	bl	8009418 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80096d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80096d4:	f7ff fe8c 	bl	80093f0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80096d8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80096da:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80096dc:	f7ff fe78 	bl	80093d0 <LL_PWR_EnableBootC2>

  return;
 80096e0:	bf00      	nop
}
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80096e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80096ec:	f7ff fea6 	bl	800943c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80096f0:	4806      	ldr	r0, [pc, #24]	@ (800970c <HW_IPCC_Init+0x28>)
 80096f2:	f7ff fee8 	bl	80094c6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80096f6:	4805      	ldr	r0, [pc, #20]	@ (800970c <HW_IPCC_Init+0x28>)
 80096f8:	f7ff fed5 	bl	80094a6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80096fc:	202c      	movs	r0, #44	@ 0x2c
 80096fe:	f7f9 fd3c 	bl	800317a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009702:	202d      	movs	r0, #45	@ 0x2d
 8009704:	f7f9 fd39 	bl	800317a <HAL_NVIC_EnableIRQ>

  return;
 8009708:	bf00      	nop
}
 800970a:	bd80      	pop	{r7, pc}
 800970c:	58000c00 	.word	0x58000c00

08009710 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009716:	f3ef 8310 	mrs	r3, PRIMASK
 800971a:	607b      	str	r3, [r7, #4]
  return(result);
 800971c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800971e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009720:	b672      	cpsid	i
}
 8009722:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009724:	2101      	movs	r1, #1
 8009726:	4806      	ldr	r0, [pc, #24]	@ (8009740 <HW_IPCC_BLE_Init+0x30>)
 8009728:	f7ff ff02 	bl	8009530 <LL_C1_IPCC_EnableReceiveChannel>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f383 8810 	msr	PRIMASK, r3
}
 8009736:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8009738:	bf00      	nop
}
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	58000c00 	.word	0x58000c00

08009744 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8009748:	2101      	movs	r1, #1
 800974a:	4802      	ldr	r0, [pc, #8]	@ (8009754 <HW_IPCC_BLE_SendCmd+0x10>)
 800974c:	f7ff ff10 	bl	8009570 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009750:	bf00      	nop
}
 8009752:	bd80      	pop	{r7, pc}
 8009754:	58000c00 	.word	0x58000c00

08009758 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800975c:	f7fe fd8e 	bl	800827c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009760:	2101      	movs	r1, #1
 8009762:	4802      	ldr	r0, [pc, #8]	@ (800976c <HW_IPCC_BLE_EvtHandler+0x14>)
 8009764:	f7ff fef6 	bl	8009554 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009768:	bf00      	nop
}
 800976a:	bd80      	pop	{r7, pc}
 800976c:	58000c00 	.word	0x58000c00

08009770 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009776:	f3ef 8310 	mrs	r3, PRIMASK
 800977a:	607b      	str	r3, [r7, #4]
  return(result);
 800977c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800977e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009780:	b672      	cpsid	i
}
 8009782:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009784:	2120      	movs	r1, #32
 8009786:	4807      	ldr	r0, [pc, #28]	@ (80097a4 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8009788:	f7ff fec0 	bl	800950c <LL_C1_IPCC_DisableTransmitChannel>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f383 8810 	msr	PRIMASK, r3
}
 8009796:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8009798:	f7fe fda0 	bl	80082dc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800979c:	bf00      	nop
}
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	58000c00 	.word	0x58000c00

080097a8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ae:	f3ef 8310 	mrs	r3, PRIMASK
 80097b2:	607b      	str	r3, [r7, #4]
  return(result);
 80097b4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80097b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80097b8:	b672      	cpsid	i
}
 80097ba:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80097bc:	2102      	movs	r1, #2
 80097be:	4806      	ldr	r0, [pc, #24]	@ (80097d8 <HW_IPCC_SYS_Init+0x30>)
 80097c0:	f7ff feb6 	bl	8009530 <LL_C1_IPCC_EnableReceiveChannel>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f383 8810 	msr	PRIMASK, r3
}
 80097ce:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80097d0:	bf00      	nop
}
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	58000c00 	.word	0x58000c00

080097dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80097e2:	2102      	movs	r1, #2
 80097e4:	480b      	ldr	r0, [pc, #44]	@ (8009814 <HW_IPCC_SYS_SendCmd+0x38>)
 80097e6:	f7ff fec3 	bl	8009570 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ea:	f3ef 8310 	mrs	r3, PRIMASK
 80097ee:	607b      	str	r3, [r7, #4]
  return(result);
 80097f0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80097f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80097f4:	b672      	cpsid	i
}
 80097f6:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80097f8:	2102      	movs	r1, #2
 80097fa:	4806      	ldr	r0, [pc, #24]	@ (8009814 <HW_IPCC_SYS_SendCmd+0x38>)
 80097fc:	f7ff fe73 	bl	80094e6 <LL_C1_IPCC_EnableTransmitChannel>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f383 8810 	msr	PRIMASK, r3
}
 800980a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800980c:	bf00      	nop
}
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	58000c00 	.word	0x58000c00

08009818 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800981e:	f3ef 8310 	mrs	r3, PRIMASK
 8009822:	607b      	str	r3, [r7, #4]
  return(result);
 8009824:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8009826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009828:	b672      	cpsid	i
}
 800982a:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800982c:	2102      	movs	r1, #2
 800982e:	4807      	ldr	r0, [pc, #28]	@ (800984c <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8009830:	f7ff fe6c 	bl	800950c <LL_C1_IPCC_DisableTransmitChannel>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f383 8810 	msr	PRIMASK, r3
}
 800983e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8009840:	f7fe fd9c 	bl	800837c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009844:	bf00      	nop
}
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	58000c00 	.word	0x58000c00

08009850 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009854:	f7fe fda8 	bl	80083a8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009858:	2102      	movs	r1, #2
 800985a:	4802      	ldr	r0, [pc, #8]	@ (8009864 <HW_IPCC_SYS_EvtHandler+0x14>)
 800985c:	f7ff fe7a 	bl	8009554 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009860:	bf00      	nop
}
 8009862:	bd80      	pop	{r7, pc}
 8009864:	58000c00 	.word	0x58000c00

08009868 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009870:	2108      	movs	r1, #8
 8009872:	4812      	ldr	r0, [pc, #72]	@ (80098bc <HW_IPCC_MM_SendFreeBuf+0x54>)
 8009874:	f7ff fe8b 	bl	800958e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d013      	beq.n	80098a6 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800987e:	4a10      	ldr	r2, [pc, #64]	@ (80098c0 <HW_IPCC_MM_SendFreeBuf+0x58>)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009884:	f3ef 8310 	mrs	r3, PRIMASK
 8009888:	60fb      	str	r3, [r7, #12]
  return(result);
 800988a:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800988c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800988e:	b672      	cpsid	i
}
 8009890:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009892:	2108      	movs	r1, #8
 8009894:	4809      	ldr	r0, [pc, #36]	@ (80098bc <HW_IPCC_MM_SendFreeBuf+0x54>)
 8009896:	f7ff fe26 	bl	80094e6 <LL_C1_IPCC_EnableTransmitChannel>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f383 8810 	msr	PRIMASK, r3
}
 80098a4:	e005      	b.n	80098b2 <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4798      	blx	r3

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098aa:	2108      	movs	r1, #8
 80098ac:	4803      	ldr	r0, [pc, #12]	@ (80098bc <HW_IPCC_MM_SendFreeBuf+0x54>)
 80098ae:	f7ff fe5f 	bl	8009570 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 80098b2:	bf00      	nop
}
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	58000c00 	.word	0x58000c00
 80098c0:	200003ac 	.word	0x200003ac

080098c4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ca:	f3ef 8310 	mrs	r3, PRIMASK
 80098ce:	607b      	str	r3, [r7, #4]
  return(result);
 80098d0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80098d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80098d4:	b672      	cpsid	i
}
 80098d6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098d8:	2108      	movs	r1, #8
 80098da:	480a      	ldr	r0, [pc, #40]	@ (8009904 <HW_IPCC_MM_FreeBufHandler+0x40>)
 80098dc:	f7ff fe16 	bl	800950c <LL_C1_IPCC_DisableTransmitChannel>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f383 8810 	msr	PRIMASK, r3
}
 80098ea:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 80098ec:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <HW_IPCC_MM_FreeBufHandler+0x44>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098f2:	2108      	movs	r1, #8
 80098f4:	4803      	ldr	r0, [pc, #12]	@ (8009904 <HW_IPCC_MM_FreeBufHandler+0x40>)
 80098f6:	f7ff fe3b 	bl	8009570 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80098fa:	bf00      	nop
}
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	58000c00 	.word	0x58000c00
 8009908:	200003ac 	.word	0x200003ac

0800990c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009912:	f3ef 8310 	mrs	r3, PRIMASK
 8009916:	607b      	str	r3, [r7, #4]
  return(result);
 8009918:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800991a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800991c:	b672      	cpsid	i
}
 800991e:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009920:	2108      	movs	r1, #8
 8009922:	4806      	ldr	r0, [pc, #24]	@ (800993c <HW_IPCC_TRACES_Init+0x30>)
 8009924:	f7ff fe04 	bl	8009530 <LL_C1_IPCC_EnableReceiveChannel>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f383 8810 	msr	PRIMASK, r3
}
 8009932:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8009934:	bf00      	nop
}
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	58000c00 	.word	0x58000c00

08009940 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009944:	f7fe fdd8 	bl	80084f8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009948:	2108      	movs	r1, #8
 800994a:	4802      	ldr	r0, [pc, #8]	@ (8009954 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800994c:	f7ff fe02 	bl	8009554 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009950:	bf00      	nop
}
 8009952:	bd80      	pop	{r7, pc}
 8009954:	58000c00 	.word	0x58000c00

08009958 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800995c:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <UTIL_LPM_Init+0x1c>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009962:	4b05      	ldr	r3, [pc, #20]	@ (8009978 <UTIL_LPM_Init+0x20>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009968:	bf00      	nop
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	200003b0 	.word	0x200003b0
 8009978:	200003b4 	.word	0x200003b4

0800997c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009988:	f3ef 8310 	mrs	r3, PRIMASK
 800998c:	613b      	str	r3, [r7, #16]
  return(result);
 800998e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009992:	b672      	cpsid	i
}
 8009994:	bf00      	nop
  
  switch( state )
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d008      	beq.n	80099ae <UTIL_LPM_SetStopMode+0x32>
 800999c:	2b01      	cmp	r3, #1
 800999e:	d10e      	bne.n	80099be <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80099a0:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <UTIL_LPM_SetStopMode+0x5c>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	4a0b      	ldr	r2, [pc, #44]	@ (80099d8 <UTIL_LPM_SetStopMode+0x5c>)
 80099aa:	6013      	str	r3, [r2, #0]
      break;
 80099ac:	e008      	b.n	80099c0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	43da      	mvns	r2, r3
 80099b2:	4b09      	ldr	r3, [pc, #36]	@ (80099d8 <UTIL_LPM_SetStopMode+0x5c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4013      	ands	r3, r2
 80099b8:	4a07      	ldr	r2, [pc, #28]	@ (80099d8 <UTIL_LPM_SetStopMode+0x5c>)
 80099ba:	6013      	str	r3, [r2, #0]
      break;
 80099bc:	e000      	b.n	80099c0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80099be:	bf00      	nop
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f383 8810 	msr	PRIMASK, r3
}
 80099ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	200003b0 	.word	0x200003b0

080099dc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099e8:	f3ef 8310 	mrs	r3, PRIMASK
 80099ec:	613b      	str	r3, [r7, #16]
  return(result);
 80099ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80099f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099f2:	b672      	cpsid	i
}
 80099f4:	bf00      	nop
  
  switch(state)
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d008      	beq.n	8009a0e <UTIL_LPM_SetOffMode+0x32>
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10e      	bne.n	8009a1e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009a00:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <UTIL_LPM_SetOffMode+0x5c>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	4a0b      	ldr	r2, [pc, #44]	@ (8009a38 <UTIL_LPM_SetOffMode+0x5c>)
 8009a0a:	6013      	str	r3, [r2, #0]
      break;
 8009a0c:	e008      	b.n	8009a20 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	43da      	mvns	r2, r3
 8009a12:	4b09      	ldr	r3, [pc, #36]	@ (8009a38 <UTIL_LPM_SetOffMode+0x5c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4013      	ands	r3, r2
 8009a18:	4a07      	ldr	r2, [pc, #28]	@ (8009a38 <UTIL_LPM_SetOffMode+0x5c>)
 8009a1a:	6013      	str	r3, [r2, #0]
      break;
 8009a1c:	e000      	b.n	8009a20 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009a1e:	bf00      	nop
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f383 8810 	msr	PRIMASK, r3
}
 8009a2a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009a2c:	bf00      	nop
 8009a2e:	371c      	adds	r7, #28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	200003b4 	.word	0x200003b4

08009a3c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a42:	f3ef 8310 	mrs	r3, PRIMASK
 8009a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a48:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009a4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a4c:	b672      	cpsid	i
}
 8009a4e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009a50:	4b12      	ldr	r3, [pc, #72]	@ (8009a9c <UTIL_LPM_EnterLowPower+0x60>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009a58:	4b11      	ldr	r3, [pc, #68]	@ (8009aa0 <UTIL_LPM_EnterLowPower+0x64>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009a5e:	4b10      	ldr	r3, [pc, #64]	@ (8009aa0 <UTIL_LPM_EnterLowPower+0x64>)
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	4798      	blx	r3
 8009a64:	e010      	b.n	8009a88 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009a66:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa4 <UTIL_LPM_EnterLowPower+0x68>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d006      	beq.n	8009a7c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa0 <UTIL_LPM_EnterLowPower+0x64>)
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009a74:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa0 <UTIL_LPM_EnterLowPower+0x64>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4798      	blx	r3
 8009a7a:	e005      	b.n	8009a88 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009a7c:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <UTIL_LPM_EnterLowPower+0x64>)
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009a82:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <UTIL_LPM_EnterLowPower+0x64>)
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	4798      	blx	r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f383 8810 	msr	PRIMASK, r3
}
 8009a92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200003b0 	.word	0x200003b0
 8009aa0:	0800a138 	.word	0x0800a138
 8009aa4:	200003b4 	.word	0x200003b4

08009aa8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b090      	sub	sp, #64	@ 0x40
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009ab0:	4b73      	ldr	r3, [pc, #460]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8009ab6:	4b72      	ldr	r3, [pc, #456]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4013      	ands	r3, r2
 8009abe:	4a70      	ldr	r2, [pc, #448]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009ac0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009ac2:	4b70      	ldr	r3, [pc, #448]	@ (8009c84 <UTIL_SEQ_Run+0x1dc>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8009c88 <UTIL_SEQ_Run+0x1e0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009ace:	4b6f      	ldr	r3, [pc, #444]	@ (8009c8c <UTIL_SEQ_Run+0x1e4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8009ad4:	4b6e      	ldr	r3, [pc, #440]	@ (8009c90 <UTIL_SEQ_Run+0x1e8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009ada:	e08d      	b.n	8009bf8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009ae0:	e002      	b.n	8009ae8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	401a      	ands	r2, r3
 8009af4:	4b62      	ldr	r3, [pc, #392]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4013      	ands	r3, r2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0f1      	beq.n	8009ae2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009afe:	4a65      	ldr	r2, [pc, #404]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b02:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b08:	401a      	ands	r2, r3
 8009b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009b12:	4a60      	ldr	r2, [pc, #384]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4413      	add	r3, r2
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	4013      	ands	r3, r2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009b24:	4a5b      	ldr	r2, [pc, #364]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b30:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009b32:	4a58      	ldr	r2, [pc, #352]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4413      	add	r3, r2
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	4013      	ands	r3, r2
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 f9c1 	bl	8009ec8 <SEQ_BitPosition>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b53      	ldr	r3, [pc, #332]	@ (8009c98 <UTIL_SEQ_Run+0x1f0>)
 8009b4c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009b4e:	4a51      	ldr	r2, [pc, #324]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	4b4f      	ldr	r3, [pc, #316]	@ (8009c98 <UTIL_SEQ_Run+0x1f0>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	43db      	mvns	r3, r3
 8009b64:	401a      	ands	r2, r3
 8009b66:	494b      	ldr	r1, [pc, #300]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	440b      	add	r3, r1
 8009b6e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b70:	f3ef 8310 	mrs	r3, PRIMASK
 8009b74:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b76:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009b78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b7a:	b672      	cpsid	i
}
 8009b7c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009b7e:	4b46      	ldr	r3, [pc, #280]	@ (8009c98 <UTIL_SEQ_Run+0x1f0>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2201      	movs	r2, #1
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	43da      	mvns	r2, r3
 8009b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c84 <UTIL_SEQ_Run+0x1dc>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	4a3c      	ldr	r2, [pc, #240]	@ (8009c84 <UTIL_SEQ_Run+0x1dc>)
 8009b92:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009b94:	2301      	movs	r3, #1
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b98:	e013      	b.n	8009bc2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009ba0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8009c98 <UTIL_SEQ_Run+0x1f0>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	fa02 f303 	lsl.w	r3, r2, r3
 8009bae:	43da      	mvns	r2, r3
 8009bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	400a      	ands	r2, r1
 8009bb6:	4937      	ldr	r1, [pc, #220]	@ (8009c94 <UTIL_SEQ_Run+0x1ec>)
 8009bb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e8      	bne.n	8009b9a <UTIL_SEQ_Run+0xf2>
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f383 8810 	msr	PRIMASK, r3
}
 8009bd2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009bd4:	4b30      	ldr	r3, [pc, #192]	@ (8009c98 <UTIL_SEQ_Run+0x1f0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a30      	ldr	r2, [pc, #192]	@ (8009c9c <UTIL_SEQ_Run+0x1f4>)
 8009bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bde:	4798      	blx	r3

    local_taskset = TaskSet;
 8009be0:	4b28      	ldr	r3, [pc, #160]	@ (8009c84 <UTIL_SEQ_Run+0x1dc>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8009be6:	4b28      	ldr	r3, [pc, #160]	@ (8009c88 <UTIL_SEQ_Run+0x1e0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8009bec:	4b27      	ldr	r3, [pc, #156]	@ (8009c8c <UTIL_SEQ_Run+0x1e4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8009bf2:	4b27      	ldr	r3, [pc, #156]	@ (8009c90 <UTIL_SEQ_Run+0x1e8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	401a      	ands	r2, r3
 8009bfe:	4b20      	ldr	r3, [pc, #128]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4013      	ands	r3, r2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <UTIL_SEQ_Run+0x16c>
 8009c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f43f af64 	beq.w	8009adc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009c14:	4b20      	ldr	r3, [pc, #128]	@ (8009c98 <UTIL_SEQ_Run+0x1f0>)
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009c1c:	f000 f946 	bl	8009eac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c20:	f3ef 8310 	mrs	r3, PRIMASK
 8009c24:	613b      	str	r3, [r7, #16]
  return(result);
 8009c26:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c2a:	b672      	cpsid	i
}
 8009c2c:	bf00      	nop
  local_taskset = TaskSet;
 8009c2e:	4b15      	ldr	r3, [pc, #84]	@ (8009c84 <UTIL_SEQ_Run+0x1dc>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009c34:	4b14      	ldr	r3, [pc, #80]	@ (8009c88 <UTIL_SEQ_Run+0x1e0>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009c3a:	4b14      	ldr	r3, [pc, #80]	@ (8009c8c <UTIL_SEQ_Run+0x1e4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	401a      	ands	r2, r3
 8009c46:	4b0e      	ldr	r3, [pc, #56]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d107      	bne.n	8009c60 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009c50:	4b0f      	ldr	r3, [pc, #60]	@ (8009c90 <UTIL_SEQ_Run+0x1e8>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009c5c:	f7f6 ff80 	bl	8000b60 <UTIL_SEQ_Idle>
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f383 8810 	msr	PRIMASK, r3
}
 8009c6a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009c6c:	f000 f925 	bl	8009eba <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009c70:	4a03      	ldr	r2, [pc, #12]	@ (8009c80 <UTIL_SEQ_Run+0x1d8>)
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	6013      	str	r3, [r2, #0]

  return;
 8009c76:	bf00      	nop
}
 8009c78:	3740      	adds	r7, #64	@ 0x40
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	2000004c 	.word	0x2000004c
 8009c84:	200003b8 	.word	0x200003b8
 8009c88:	200003bc 	.word	0x200003bc
 8009c8c:	20000048 	.word	0x20000048
 8009c90:	200003c0 	.word	0x200003c0
 8009c94:	20000448 	.word	0x20000448
 8009c98:	200003c4 	.word	0x200003c4
 8009c9c:	200003c8 	.word	0x200003c8

08009ca0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cac:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8009cb2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cb6:	b672      	cpsid	i
}
 8009cb8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 f904 	bl	8009ec8 <SEQ_BitPosition>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4a06      	ldr	r2, [pc, #24]	@ (8009ce0 <UTIL_SEQ_RegTask+0x40>)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f383 8810 	msr	PRIMASK, r3
}
 8009cd6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009cd8:	bf00      	nop
}
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	200003c8 	.word	0x200003c8

08009ce4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cee:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009cf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cf8:	b672      	cpsid	i
}
 8009cfa:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <UTIL_SEQ_SetTask+0x50>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	4a0b      	ldr	r2, [pc, #44]	@ (8009d34 <UTIL_SEQ_SetTask+0x50>)
 8009d06:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009d08:	4a0b      	ldr	r2, [pc, #44]	@ (8009d38 <UTIL_SEQ_SetTask+0x54>)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	4908      	ldr	r1, [pc, #32]	@ (8009d38 <UTIL_SEQ_SetTask+0x54>)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f383 8810 	msr	PRIMASK, r3
}
 8009d26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d28:	bf00      	nop
}
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	200003b8 	.word	0x200003b8
 8009d38:	20000448 	.word	0x20000448

08009d3c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d44:	f3ef 8310 	mrs	r3, PRIMASK
 8009d48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d4e:	b672      	cpsid	i
}
 8009d50:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	43da      	mvns	r2, r3
 8009d56:	4b08      	ldr	r3, [pc, #32]	@ (8009d78 <UTIL_SEQ_PauseTask+0x3c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	4a06      	ldr	r2, [pc, #24]	@ (8009d78 <UTIL_SEQ_PauseTask+0x3c>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f383 8810 	msr	PRIMASK, r3
}
 8009d6a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d6c:	bf00      	nop
}
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	20000048 	.word	0x20000048

08009d7c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d84:	f3ef 8310 	mrs	r3, PRIMASK
 8009d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d8e:	b672      	cpsid	i
}
 8009d90:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009d92:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <UTIL_SEQ_ResumeTask+0x3c>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	4a07      	ldr	r2, [pc, #28]	@ (8009db8 <UTIL_SEQ_ResumeTask+0x3c>)
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f383 8810 	msr	PRIMASK, r3
}
 8009da8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009daa:	bf00      	nop
}
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20000048 	.word	0x20000048

08009dbc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dce:	b672      	cpsid	i
}
 8009dd0:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009dd2:	4b09      	ldr	r3, [pc, #36]	@ (8009df8 <UTIL_SEQ_SetEvt+0x3c>)
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	4a07      	ldr	r2, [pc, #28]	@ (8009df8 <UTIL_SEQ_SetEvt+0x3c>)
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f383 8810 	msr	PRIMASK, r3
}
 8009de8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009dea:	bf00      	nop
}
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	200003bc 	.word	0x200003bc

08009dfc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009e04:	4b1f      	ldr	r3, [pc, #124]	@ (8009e84 <UTIL_SEQ_WaitEvt+0x88>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8009e84 <UTIL_SEQ_WaitEvt+0x88>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d102      	bne.n	8009e1a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
 8009e18:	e005      	b.n	8009e26 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009e84 <UTIL_SEQ_WaitEvt+0x88>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	fa02 f303 	lsl.w	r3, r2, r3
 8009e24:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009e26:	4b18      	ldr	r3, [pc, #96]	@ (8009e88 <UTIL_SEQ_WaitEvt+0x8c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009e2c:	4a16      	ldr	r2, [pc, #88]	@ (8009e88 <UTIL_SEQ_WaitEvt+0x8c>)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009e32:	e003      	b.n	8009e3c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	69f8      	ldr	r0, [r7, #28]
 8009e38:	f000 f82a 	bl	8009e90 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009e3c:	4b13      	ldr	r3, [pc, #76]	@ (8009e8c <UTIL_SEQ_WaitEvt+0x90>)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0f5      	beq.n	8009e34 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009e48:	4a0e      	ldr	r2, [pc, #56]	@ (8009e84 <UTIL_SEQ_WaitEvt+0x88>)
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e52:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e54:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e58:	b672      	cpsid	i
}
 8009e5a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	43da      	mvns	r2, r3
 8009e60:	4b0a      	ldr	r3, [pc, #40]	@ (8009e8c <UTIL_SEQ_WaitEvt+0x90>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4013      	ands	r3, r2
 8009e66:	4a09      	ldr	r2, [pc, #36]	@ (8009e8c <UTIL_SEQ_WaitEvt+0x90>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f383 8810 	msr	PRIMASK, r3
}
 8009e74:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009e76:	4a04      	ldr	r2, [pc, #16]	@ (8009e88 <UTIL_SEQ_WaitEvt+0x8c>)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	6013      	str	r3, [r2, #0]
  return;
 8009e7c:	bf00      	nop
}
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	200003c4 	.word	0x200003c4
 8009e88:	200003c0 	.word	0x200003c0
 8009e8c:	200003bc 	.word	0x200003bc

08009e90 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff fe02 	bl	8009aa8 <UTIL_SEQ_Run>
  return;
 8009ea4:	bf00      	nop
}
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009eb0:	bf00      	nop
}
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009eba:	b480      	push	{r7}
 8009ebc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009ebe:	bf00      	nop
}
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <SEQ_BitPosition+0x16>
    return 32U;
 8009eda:	2320      	movs	r3, #32
 8009edc:	e003      	b.n	8009ee6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	fab3 f383 	clz	r3, r3
 8009ee4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8009ee6:	f1c3 031f 	rsb	r3, r3, #31
 8009eea:	b2db      	uxtb	r3, r3
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <memset>:
 8009ef8:	4402      	add	r2, r0
 8009efa:	4603      	mov	r3, r0
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d100      	bne.n	8009f02 <memset+0xa>
 8009f00:	4770      	bx	lr
 8009f02:	f803 1b01 	strb.w	r1, [r3], #1
 8009f06:	e7f9      	b.n	8009efc <memset+0x4>

08009f08 <__libc_init_array>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009f40 <__libc_init_array+0x38>)
 8009f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009f44 <__libc_init_array+0x3c>)
 8009f0e:	1b64      	subs	r4, r4, r5
 8009f10:	10a4      	asrs	r4, r4, #2
 8009f12:	2600      	movs	r6, #0
 8009f14:	42a6      	cmp	r6, r4
 8009f16:	d109      	bne.n	8009f2c <__libc_init_array+0x24>
 8009f18:	4d0b      	ldr	r5, [pc, #44]	@ (8009f48 <__libc_init_array+0x40>)
 8009f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009f4c <__libc_init_array+0x44>)
 8009f1c:	f000 f826 	bl	8009f6c <_init>
 8009f20:	1b64      	subs	r4, r4, r5
 8009f22:	10a4      	asrs	r4, r4, #2
 8009f24:	2600      	movs	r6, #0
 8009f26:	42a6      	cmp	r6, r4
 8009f28:	d105      	bne.n	8009f36 <__libc_init_array+0x2e>
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f30:	4798      	blx	r3
 8009f32:	3601      	adds	r6, #1
 8009f34:	e7ee      	b.n	8009f14 <__libc_init_array+0xc>
 8009f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f3a:	4798      	blx	r3
 8009f3c:	3601      	adds	r6, #1
 8009f3e:	e7f2      	b.n	8009f26 <__libc_init_array+0x1e>
 8009f40:	0800a200 	.word	0x0800a200
 8009f44:	0800a200 	.word	0x0800a200
 8009f48:	0800a200 	.word	0x0800a200
 8009f4c:	0800a204 	.word	0x0800a204

08009f50 <memcpy>:
 8009f50:	440a      	add	r2, r1
 8009f52:	4291      	cmp	r1, r2
 8009f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f58:	d100      	bne.n	8009f5c <memcpy+0xc>
 8009f5a:	4770      	bx	lr
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f66:	4291      	cmp	r1, r2
 8009f68:	d1f9      	bne.n	8009f5e <memcpy+0xe>
 8009f6a:	bd10      	pop	{r4, pc}

08009f6c <_init>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr

08009f78 <_fini>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr
