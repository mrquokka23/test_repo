
Tire_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fec  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093a4  080093a4  0000a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000048  20000008  080093ac  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000050  080093f4  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000088  08009429  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000009c  0800943a  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800943a  0000b40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800943a  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00027cf6  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005d1d  00000000  00000000  0003378d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000023d8  00000000  00000000  000394b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b28  00000000  00000000  0003b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026894  00000000  00000000  0003d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00028d07  00000000  00000000  00063c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ceb03  00000000  00000000  0008c94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0015b44e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009390  00000000  00000000  0015b494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000063  00000000  00000000  00164824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000009c 	.word	0x2000009c
 8000158:	00000000 	.word	0x00000000
 800015c:	08009110 	.word	0x08009110

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a0 	.word	0x200000a0
 8000178:	08009110 	.word	0x08009110

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f007 fa61 	bl	8007698 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f006 fcf2 	bl	8006bc2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000016 	.word	0x20000016
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	20000018 	.word	0x20000018
 80001f4:	2000001a 	.word	0x2000001a
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	2000001e 	.word	0x2000001e
 8000200:	08009128 	.word	0x08009128

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fe:	f023 0304 	bic.w	r3, r3, #4
 8000302:	6113      	str	r3, [r2, #16]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	22ff      	movs	r2, #255	@ 0xff
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	22ca      	movs	r2, #202	@ 0xca
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2253      	movs	r2, #83	@ 0x53
 8000340:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f023 0207 	bic.w	r2, r3, #7
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	431a      	orrs	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <MX_APPE_Config+0x18>)
 800037a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800037e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000380:	f000 f824 	bl	80003cc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000384:	f000 f829 	bl	80003da <Config_HSE>

  return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	58004000 	.word	0x58004000

08000390 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000394:	f000 f835 	bl	8000402 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000398:	f000 f84e 	bl	8000438 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800039c:	4903      	ldr	r1, [pc, #12]	@ (80003ac <MX_APPE_Init+0x1c>)
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fd8e 	bl	8000ec0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80003a4:	f000 f858 	bl	8000458 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80003a8:	bf00      	nop
}
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000194 	.word	0x20000194

080003b0 <Init_Smps>:

void Init_Smps(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80003b4:	bf00      	nop
}
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <Init_Exti>:

void Init_Exti(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80003c2:	2050      	movs	r0, #80	@ 0x50
 80003c4:	f7ff ff34 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 80003c8:	bf00      	nop
}
 80003ca:	bd80      	pop	{r7, pc}

080003cc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003d0:	bf00      	nop
}
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b082      	sub	sp, #8
 80003de:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f007 f9e5 	bl	80077b0 <OTP_Read>
 80003e6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d005      	beq.n	80003fa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	799b      	ldrb	r3, [r3, #6]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff30 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
}
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <System_Init>:

static void System_Init(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0
  Init_Smps();
 8000406:	f7ff ffd3 	bl	80003b0 <Init_Smps>

  Init_Exti();
 800040a:	f7ff ffd8 	bl	80003be <Init_Exti>

  Init_Rtc();
 800040e:	f000 f803 	bl	8000418 <Init_Rtc>

  return;
 8000412:	bf00      	nop
}
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800041c:	4805      	ldr	r0, [pc, #20]	@ (8000434 <Init_Rtc+0x1c>)
 800041e:	f7ff ff86 	bl	800032e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000422:	2100      	movs	r1, #0
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <Init_Rtc+0x1c>)
 8000426:	f7ff ff92 	bl	800034e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800042a:	4802      	ldr	r0, [pc, #8]	@ (8000434 <Init_Rtc+0x1c>)
 800042c:	f7ff ff72 	bl	8000314 <LL_RTC_EnableWriteProtection>

  return;
 8000430:	bf00      	nop
}
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40002800 	.word	0x40002800

08000438 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800043c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000440:	f7ff ff28 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000444:	f008 fb5a 	bl	8008afc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000448:	2004      	movs	r0, #4
 800044a:	f7ff fedb 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800044e:	f002 fc25 	bl	8002c9c <HAL_PWREx_EnableSRAMRetention>

  return;
 8000452:	bf00      	nop
}
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800045e:	f006 ff65 	bl	800732c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000462:	4a11      	ldr	r2, [pc, #68]	@ (80004a8 <appe_Tl_Init+0x50>)
 8000464:	2100      	movs	r1, #0
 8000466:	2004      	movs	r0, #4
 8000468:	f008 fcec 	bl	8008e44 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <appe_Tl_Init+0x54>)
 800046e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <appe_Tl_Init+0x58>)
 8000472:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480e      	ldr	r0, [pc, #56]	@ (80004b4 <appe_Tl_Init+0x5c>)
 800047a:	f006 fe19 	bl	80070b0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <appe_Tl_Init+0x60>)
 8000480:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <appe_Tl_Init+0x64>)
 8000484:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <appe_Tl_Init+0x68>)
 8000488:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800048a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800048e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4618      	mov	r0, r3
 8000496:	f007 f88b 	bl	80075b0 <TL_MM_Init>

  TL_Enable();
 800049a:	f006 ff41 	bl	8007320 <TL_Enable>

  return;
 800049e:	bf00      	nop
}
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	080070e9 	.word	0x080070e9
 80004ac:	20030734 	.word	0x20030734
 80004b0:	080004c5 	.word	0x080004c5
 80004b4:	080004dd 	.word	0x080004dd
 80004b8:	2003094c 	.word	0x2003094c
 80004bc:	20030840 	.word	0x20030840
 80004c0:	200301f8 	.word	0x200301f8

080004c4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004ce:	bf00      	nop
}
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	330b      	adds	r3, #11
 80004ea:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004f6:	2b07      	cmp	r3, #7
 80004f8:	d81f      	bhi.n	800053a <APPE_SysUserEvtRx+0x5e>
 80004fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000500 <APPE_SysUserEvtRx+0x24>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000521 	.word	0x08000521
 8000504:	08000533 	.word	0x08000533
 8000508:	0800053b 	.word	0x0800053b
 800050c:	0800053b 	.word	0x0800053b
 8000510:	0800053b 	.word	0x0800053b
 8000514:	0800053b 	.word	0x0800053b
 8000518:	0800053b 	.word	0x0800053b
 800051c:	0800053b 	.word	0x0800053b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4618      	mov	r0, r3
 8000526:	f006 fb79 	bl	8006c1c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f81b 	bl	8000566 <APPE_SysEvtReadyProcessing>
    break;
 8000530:	e004      	b.n	800053c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f806 	bl	8000544 <APPE_SysEvtError>
    break;
 8000538:	e000      	b.n	800053c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800053a:	bf00      	nop
  }

  return;
 800053c:	bf00      	nop
}
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	330b      	adds	r3, #11
 8000552:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3302      	adds	r3, #2
 8000558:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800055a:	bf00      	nop
}
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b08a      	sub	sp, #40	@ 0x28
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	330b      	adds	r3, #11
 800058a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	3302      	adds	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d11d      	bne.n	80005d6 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800059a:	f7ff fdf7 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800059e:	230f      	movs	r3, #15
 80005a0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80005a2:	237f      	movs	r3, #127	@ 0x7f
 80005a4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80005a6:	f7ff fe97 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 80005aa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80005ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80005b2:	f7ff fe83 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 80005b6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80005b8:	6a3b      	ldr	r3, [r7, #32]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 fb14 	bl	8006bf0 <SHCI_C2_Config>

    APP_BLE_Init();
 80005c8:	f007 f9fc 	bl	80079c4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f008 fad6 	bl	8008b80 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005d4:	e007      	b.n	80005e6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d103      	bne.n	80005e6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
  return;
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
}
 80005e8:	3728      	adds	r7, #40	@ 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f6:	f001 ff29 	bl	800244c <HAL_GetTick>
 80005fa:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000606:	d00a      	beq.n	800061e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000608:	f001 ff38 	bl	800247c <HAL_GetTickFreq>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000616:	e002      	b.n	800061e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000618:	f7ff fe6c 	bl	80002f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800061c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800061e:	f001 ff15 	bl	800244c <HAL_GetTick>
 8000622:	4602      	mov	r2, r0
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	d8f4      	bhi.n	8000618 <HAL_Delay+0x2a>
  }
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f008 fb04 	bl	8008c4c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800064c:	f008 fac8 	bl	8008be0 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000650:	bf00      	nop
}
 8000652:	bd80      	pop	{r7, pc}

08000654 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800065c:	2100      	movs	r1, #0
 800065e:	2004      	movs	r0, #4
 8000660:	f008 fc12 	bl	8008e88 <UTIL_SEQ_SetTask>
  return;
 8000664:	bf00      	nop
}
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000674:	2002      	movs	r0, #2
 8000676:	f008 fc73 	bl	8008f60 <UTIL_SEQ_SetEvt>
  return;
 800067a:	bf00      	nop
}
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800068a:	2002      	movs	r0, #2
 800068c:	f008 fc88 	bl	8008fa0 <UTIL_SEQ_WaitEvt>
  return;
 8000690:	bf00      	nop
}
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LL_EXTI_EnableIT_0_31>:
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <LL_EXTI_EnableIT_0_31+0x24>)
 80006a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80006a6:	4905      	ldr	r1, [pc, #20]	@ (80006bc <LL_EXTI_EnableIT_0_31+0x24>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	58000800 	.word	0x58000800

080006c0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	600b      	str	r3, [r1, #0]

}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	58000800 	.word	0x58000800

080006e4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <ReadRtcSsrValue+0x3c>)
 80006ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <ReadRtcSsrValue+0x3c>)
 80006f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006fa:	e005      	b.n	8000708 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <ReadRtcSsrValue+0x3c>)
 8000702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000704:	b29b      	uxth	r3, r3
 8000706:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d1f5      	bne.n	80006fc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000710:	683b      	ldr	r3, [r7, #0]
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40002800 	.word	0x40002800

08000724 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	491d      	ldr	r1, [pc, #116]	@ (80007ac <LinkTimerAfter+0x88>)
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	440b      	add	r3, r1
 8000742:	3315      	adds	r3, #21
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b06      	cmp	r3, #6
 800074c:	d009      	beq.n	8000762 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	4916      	ldr	r1, [pc, #88]	@ (80007ac <LinkTimerAfter+0x88>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	3314      	adds	r3, #20
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	4911      	ldr	r1, [pc, #68]	@ (80007ac <LinkTimerAfter+0x88>)
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	440b      	add	r3, r1
 8000770:	3315      	adds	r3, #21
 8000772:	7bfa      	ldrb	r2, [r7, #15]
 8000774:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	490c      	ldr	r1, [pc, #48]	@ (80007ac <LinkTimerAfter+0x88>)
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	440b      	add	r3, r1
 8000784:	3314      	adds	r3, #20
 8000786:	79ba      	ldrb	r2, [r7, #6]
 8000788:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800078a:	79ba      	ldrb	r2, [r7, #6]
 800078c:	4907      	ldr	r1, [pc, #28]	@ (80007ac <LinkTimerAfter+0x88>)
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	440b      	add	r3, r1
 8000798:	3315      	adds	r3, #21
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	701a      	strb	r2, [r3, #0]

  return;
 800079e:	bf00      	nop
}
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	200000b8 	.word	0x200000b8

080007b0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007c0:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <LinkTimerBefore+0xb8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d032      	beq.n	8000832 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007cc:	79ba      	ldrb	r2, [r7, #6]
 80007ce:	4927      	ldr	r1, [pc, #156]	@ (800086c <LinkTimerBefore+0xbc>)
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	440b      	add	r3, r1
 80007da:	3314      	adds	r3, #20
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	4922      	ldr	r1, [pc, #136]	@ (800086c <LinkTimerBefore+0xbc>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	440b      	add	r3, r1
 80007ee:	3315      	adds	r3, #21
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	491d      	ldr	r1, [pc, #116]	@ (800086c <LinkTimerBefore+0xbc>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	4918      	ldr	r1, [pc, #96]	@ (800086c <LinkTimerBefore+0xbc>)
 800080c:	4613      	mov	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	440b      	add	r3, r1
 8000816:	3314      	adds	r3, #20
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	4913      	ldr	r1, [pc, #76]	@ (800086c <LinkTimerBefore+0xbc>)
 8000820:	4613      	mov	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	440b      	add	r3, r1
 800082a:	3314      	adds	r3, #20
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000830:	e014      	b.n	800085c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	490d      	ldr	r1, [pc, #52]	@ (800086c <LinkTimerBefore+0xbc>)
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	440b      	add	r3, r1
 8000840:	3315      	adds	r3, #21
 8000842:	79ba      	ldrb	r2, [r7, #6]
 8000844:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	4908      	ldr	r1, [pc, #32]	@ (800086c <LinkTimerBefore+0xbc>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3314      	adds	r3, #20
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	701a      	strb	r2, [r3, #0]
  return;
 800085a:	bf00      	nop
}
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000148 	.word	0x20000148
 800086c:	200000b8 	.word	0x200000b8

08000870 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800087a:	4b4e      	ldr	r3, [pc, #312]	@ (80009b4 <linkTimer+0x144>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b06      	cmp	r3, #6
 8000882:	d118      	bne.n	80008b6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000884:	4b4b      	ldr	r3, [pc, #300]	@ (80009b4 <linkTimer+0x144>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b4b      	ldr	r3, [pc, #300]	@ (80009b8 <linkTimer+0x148>)
 800088c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800088e:	4a49      	ldr	r2, [pc, #292]	@ (80009b4 <linkTimer+0x144>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	4949      	ldr	r1, [pc, #292]	@ (80009bc <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	2206      	movs	r2, #6
 80008a6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008a8:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <linkTimer+0x150>)
 80008aa:	f04f 32ff 	mov.w	r2, #4294967295
 80008ae:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	81fb      	strh	r3, [r7, #14]
 80008b4:	e078      	b.n	80009a8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008b6:	f000 f909 	bl	8000acc <ReturnTimeElapsed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	493e      	ldr	r1, [pc, #248]	@ (80009bc <linkTimer+0x14c>)
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	3308      	adds	r3, #8
 80008ce:	6819      	ldr	r1, [r3, #0]
 80008d0:	89fb      	ldrh	r3, [r7, #14]
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	4419      	add	r1, r3
 80008d6:	4839      	ldr	r0, [pc, #228]	@ (80009bc <linkTimer+0x14c>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4403      	add	r3, r0
 80008e2:	3308      	adds	r3, #8
 80008e4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	4934      	ldr	r1, [pc, #208]	@ (80009bc <linkTimer+0x14c>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	440b      	add	r3, r1
 80008f4:	3308      	adds	r3, #8
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008fa:	4b2e      	ldr	r3, [pc, #184]	@ (80009b4 <linkTimer+0x144>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	4a2e      	ldr	r2, [pc, #184]	@ (80009bc <linkTimer+0x14c>)
 8000904:	460b      	mov	r3, r1
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	440b      	add	r3, r1
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	4413      	add	r3, r2
 800090e:	3308      	adds	r3, #8
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	429a      	cmp	r2, r3
 8000916:	d337      	bcc.n	8000988 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <linkTimer+0x144>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800091e:	7b7a      	ldrb	r2, [r7, #13]
 8000920:	4926      	ldr	r1, [pc, #152]	@ (80009bc <linkTimer+0x14c>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3315      	adds	r3, #21
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000932:	e013      	b.n	800095c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000934:	7b7a      	ldrb	r2, [r7, #13]
 8000936:	4921      	ldr	r1, [pc, #132]	@ (80009bc <linkTimer+0x14c>)
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	440b      	add	r3, r1
 8000942:	3315      	adds	r3, #21
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000948:	7b7a      	ldrb	r2, [r7, #13]
 800094a:	491c      	ldr	r1, [pc, #112]	@ (80009bc <linkTimer+0x14c>)
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	440b      	add	r3, r1
 8000956:	3315      	adds	r3, #21
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800095c:	7b3b      	ldrb	r3, [r7, #12]
 800095e:	2b06      	cmp	r3, #6
 8000960:	d00b      	beq.n	800097a <linkTimer+0x10a>
 8000962:	7b3a      	ldrb	r2, [r7, #12]
 8000964:	4915      	ldr	r1, [pc, #84]	@ (80009bc <linkTimer+0x14c>)
 8000966:	4613      	mov	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	440b      	add	r3, r1
 8000970:	3308      	adds	r3, #8
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	429a      	cmp	r2, r3
 8000978:	d2dc      	bcs.n	8000934 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800097a:	7b7a      	ldrb	r2, [r7, #13]
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fecf 	bl	8000724 <LinkTimerAfter>
 8000986:	e00f      	b.n	80009a8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <linkTimer+0x144>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff0c 	bl	80007b0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <linkTimer+0x144>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <linkTimer+0x148>)
 80009a0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80009a2:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <linkTimer+0x144>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80009a8:	89fb      	ldrh	r3, [r7, #14]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000148 	.word	0x20000148
 80009b8:	20000149 	.word	0x20000149
 80009bc:	200000b8 	.word	0x200000b8
 80009c0:	2000014c 	.word	0x2000014c

080009c4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009d4:	4b39      	ldr	r3, [pc, #228]	@ (8000abc <UnlinkTimer+0xf8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d111      	bne.n	8000a04 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009e0:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <UnlinkTimer+0xf8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <UnlinkTimer+0xfc>)
 80009e8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	4935      	ldr	r1, [pc, #212]	@ (8000ac4 <UnlinkTimer+0x100>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <UnlinkTimer+0xf8>)
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e03e      	b.n	8000a82 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	492f      	ldr	r1, [pc, #188]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a08:	4613      	mov	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	440b      	add	r3, r1
 8000a12:	3314      	adds	r3, #20
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	492a      	ldr	r1, [pc, #168]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	440b      	add	r3, r1
 8000a26:	3315      	adds	r3, #21
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a2c:	79f9      	ldrb	r1, [r7, #7]
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	4824      	ldr	r0, [pc, #144]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a32:	460b      	mov	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	440b      	add	r3, r1
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	4403      	add	r3, r0
 8000a3c:	3315      	adds	r3, #21
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2d8      	uxtb	r0, r3
 8000a42:	4920      	ldr	r1, [pc, #128]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	4602      	mov	r2, r0
 8000a52:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d013      	beq.n	8000a82 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a5a:	79f9      	ldrb	r1, [r7, #7]
 8000a5c:	7bba      	ldrb	r2, [r7, #14]
 8000a5e:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a60:	460b      	mov	r3, r1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	440b      	add	r3, r1
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	4403      	add	r3, r0
 8000a6a:	3314      	adds	r3, #20
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2d8      	uxtb	r0, r3
 8000a70:	4914      	ldr	r1, [pc, #80]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3314      	adds	r3, #20
 8000a7e:	4602      	mov	r2, r0
 8000a80:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	490f      	ldr	r1, [pc, #60]	@ (8000ac4 <UnlinkTimer+0x100>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	440b      	add	r3, r1
 8000a90:	330c      	adds	r3, #12
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <UnlinkTimer+0xf8>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d107      	bne.n	8000ab0 <UnlinkTimer+0xec>
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <UnlinkTimer+0x104>)
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	601a      	str	r2, [r3, #0]
  }

  return;
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
}
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	20000148 	.word	0x20000148
 8000ac0:	20000149 	.word	0x20000149
 8000ac4:	200000b8 	.word	0x200000b8
 8000ac8:	2000014c 	.word	0x2000014c

08000acc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <ReturnTimeElapsed+0x70>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ada:	d026      	beq.n	8000b2a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000adc:	f7ff fe02 	bl	80006e4 <ReadRtcSsrValue>
 8000ae0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <ReturnTimeElapsed+0x70>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d805      	bhi.n	8000af8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <ReturnTimeElapsed+0x70>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	e00a      	b.n	8000b0e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <ReturnTimeElapsed+0x74>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <ReturnTimeElapsed+0x70>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <ReturnTimeElapsed+0x78>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <ReturnTimeElapsed+0x7c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	40d3      	lsrs	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	e001      	b.n	8000b2e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	b29b      	uxth	r3, r3
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000014c 	.word	0x2000014c
 8000b40:	20000154 	.word	0x20000154
 8000b44:	20000152 	.word	0x20000152
 8000b48:	20000151 	.word	0x20000151

08000b4c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d108      	bne.n	8000b6e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b5c:	f7ff fdc2 	bl	80006e4 <ReadRtcSsrValue>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <RestartWakeupCounter+0x9c>)
 8000b64:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f001 fe31 	bl	80027ce <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b6c:	e039      	b.n	8000be2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d803      	bhi.n	8000b7c <RestartWakeupCounter+0x30>
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <RestartWakeupCounter+0xa0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d002      	beq.n	8000b82 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b82:	bf00      	nop
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <RestartWakeupCounter+0xa4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f8      	beq.n	8000b84 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <RestartWakeupCounter+0xa4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <RestartWakeupCounter+0xa4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ba2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <RestartWakeupCounter+0xa8>)
 8000ba6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000baa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000bac:	2003      	movs	r0, #3
 8000bae:	f001 fe1c 	bl	80027ea <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <RestartWakeupCounter+0xac>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	0c1b      	lsrs	r3, r3, #16
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	490e      	ldr	r1, [pc, #56]	@ (8000bf8 <RestartWakeupCounter+0xac>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bc2:	f7ff fd8f 	bl	80006e4 <ReadRtcSsrValue>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <RestartWakeupCounter+0x9c>)
 8000bca:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <RestartWakeupCounter+0xa4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <RestartWakeupCounter+0xa4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bda:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000bdc:	f3af 8000 	nop.w
  return ;
 8000be0:	bf00      	nop
}
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000014c 	.word	0x2000014c
 8000bec:	20000151 	.word	0x20000151
 8000bf0:	20000194 	.word	0x20000194
 8000bf4:	58000800 	.word	0x58000800
 8000bf8:	40002800 	.word	0x40002800

08000bfc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c02:	4b45      	ldr	r3, [pc, #276]	@ (8000d18 <RescheduleTimerList+0x11c>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0e:	d107      	bne.n	8000c20 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000c10:	bf00      	nop
 8000c12:	4b42      	ldr	r3, [pc, #264]	@ (8000d1c <RescheduleTimerList+0x120>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f8      	bne.n	8000c12 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000c20:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <RescheduleTimerList+0x120>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	4b3d      	ldr	r3, [pc, #244]	@ (8000d1c <RescheduleTimerList+0x120>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c2e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <RescheduleTimerList+0x124>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	493a      	ldr	r1, [pc, #232]	@ (8000d24 <RescheduleTimerList+0x128>)
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	3308      	adds	r3, #8
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c4a:	f7ff ff3f 	bl	8000acc <ReturnTimeElapsed>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d205      	bcs.n	8000c66 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c5e:	4b32      	ldr	r3, [pc, #200]	@ (8000d28 <RescheduleTimerList+0x12c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e04d      	b.n	8000d02 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	4a30      	ldr	r2, [pc, #192]	@ (8000d2c <RescheduleTimerList+0x130>)
 8000c6a:	8812      	ldrh	r2, [r2, #0]
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	4413      	add	r3, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d906      	bls.n	8000c86 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <RescheduleTimerList+0x130>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <RescheduleTimerList+0x12c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e03d      	b.n	8000d02 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c90:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <RescheduleTimerList+0x12c>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c96:	e034      	b.n	8000d02 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	4922      	ldr	r1, [pc, #136]	@ (8000d24 <RescheduleTimerList+0x128>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d20a      	bcs.n	8000cc6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	491c      	ldr	r1, [pc, #112]	@ (8000d24 <RescheduleTimerList+0x128>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3308      	adds	r3, #8
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e013      	b.n	8000cee <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	4916      	ldr	r1, [pc, #88]	@ (8000d24 <RescheduleTimerList+0x128>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	7bfa      	ldrb	r2, [r7, #15]
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <RescheduleTimerList+0x128>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4403      	add	r3, r0
 8000cea:	3308      	adds	r3, #8
 8000cec:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <RescheduleTimerList+0x128>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3315      	adds	r3, #21
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	d1c7      	bne.n	8000c98 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d08:	89bb      	ldrh	r3, [r7, #12]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff1e 	bl	8000b4c <RestartWakeupCounter>

  return ;
 8000d10:	bf00      	nop
}
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40002800 	.word	0x40002800
 8000d1c:	20000194 	.word	0x20000194
 8000d20:	20000148 	.word	0x20000148
 8000d24:	200000b8 	.word	0x200000b8
 8000d28:	20000150 	.word	0x20000150
 8000d2c:	20000156 	.word	0x20000156

08000d30 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d36:	f3ef 8310 	mrs	r3, PRIMASK
 8000d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8000d3c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d44:	4b59      	ldr	r3, [pc, #356]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	22ca      	movs	r2, #202	@ 0xca
 8000d4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d4c:	4b57      	ldr	r3, [pc, #348]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2253      	movs	r2, #83	@ 0x53
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d54:	4b55      	ldr	r3, [pc, #340]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	4b54      	ldr	r3, [pc, #336]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d62:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d64:	4b52      	ldr	r3, [pc, #328]	@ (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d6c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d70:	4950      	ldr	r1, [pc, #320]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d16e      	bne.n	8000e64 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d8a:	494a      	ldr	r1, [pc, #296]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d9a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d9e:	4945      	ldr	r1, [pc, #276]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	3310      	adds	r3, #16
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000db0:	4b41      	ldr	r3, [pc, #260]	@ (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d04c      	beq.n	8000e54 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000dba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dbe:	493d      	ldr	r1, [pc, #244]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	330d      	adds	r3, #13
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d124      	bne.n	8000e1e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fdf2 	bl	80009c4 <UnlinkTimer>
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	f383 8810 	msr	PRIMASK, r3
}
 8000dea:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dec:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000df0:	4930      	ldr	r1, [pc, #192]	@ (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fa32 	bl	8001270 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	22ca      	movs	r2, #202	@ 0xca
 8000e12:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2253      	movs	r2, #83	@ 0x53
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e1c:	e012      	b.n	8000e44 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f383 8810 	msr	PRIMASK, r3
}
 8000e28:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f99a 	bl	8001168 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	22ca      	movs	r2, #202	@ 0xca
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2253      	movs	r2, #83	@ 0x53
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	69b8      	ldr	r0, [r7, #24]
 8000e4e:	f000 fa95 	bl	800137c <HW_TS_RTC_Int_AppNot>
 8000e52:	e022      	b.n	8000e9a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e54:	f7ff fed2 	bl	8000bfc <RescheduleTimerList>
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f383 8810 	msr	PRIMASK, r3
}
 8000e62:	e01a      	b.n	8000e9a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e64:	bf00      	nop
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f8      	beq.n	8000e66 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e84:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e88:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f383 8810 	msr	PRIMASK, r3
}
 8000e98:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000ea2:	bf00      	nop
}
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000194 	.word	0x20000194
 8000eb0:	20000148 	.word	0x20000148
 8000eb4:	200000b8 	.word	0x200000b8
 8000eb8:	20000150 	.word	0x20000150
 8000ebc:	58000800 	.word	0x58000800

08000ec0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8001048 <HW_TS_Init+0x188>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	22ca      	movs	r2, #202	@ 0xca
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8001048 <HW_TS_Init+0x188>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2253      	movs	r2, #83	@ 0x53
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000edc:	4b5b      	ldr	r3, [pc, #364]	@ (800104c <HW_TS_Init+0x18c>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800104c <HW_TS_Init+0x18c>)
 8000ee2:	f043 0320 	orr.w	r3, r3, #32
 8000ee6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ee8:	4b58      	ldr	r3, [pc, #352]	@ (800104c <HW_TS_Init+0x18c>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f1c3 0304 	rsb	r3, r3, #4
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b55      	ldr	r3, [pc, #340]	@ (8001050 <HW_TS_Init+0x190>)
 8000efc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000efe:	4b53      	ldr	r3, [pc, #332]	@ (800104c <HW_TS_Init+0x18c>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000f06:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000f0a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	fa92 f2a2 	rbit	r2, r2
 8000f12:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d101      	bne.n	8000f22 <HW_TS_Init+0x62>
  {
    return 32U;
 8000f1e:	2220      	movs	r2, #32
 8000f20:	e003      	b.n	8000f2a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	fab2 f282 	clz	r2, r2
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	40d3      	lsrs	r3, r2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b48      	ldr	r3, [pc, #288]	@ (8001054 <HW_TS_Init+0x194>)
 8000f34:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f36:	4b45      	ldr	r3, [pc, #276]	@ (800104c <HW_TS_Init+0x18c>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b44      	ldr	r3, [pc, #272]	@ (8001058 <HW_TS_Init+0x198>)
 8000f48:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f4a:	4b43      	ldr	r3, [pc, #268]	@ (8001058 <HW_TS_Init+0x198>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	4a40      	ldr	r2, [pc, #256]	@ (8001054 <HW_TS_Init+0x194>)
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001050 <HW_TS_Init+0x190>)
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	40d3      	lsrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d904      	bls.n	8000f78 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HW_TS_Init+0x19c>)
 8000f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	e003      	b.n	8000f80 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b37      	ldr	r3, [pc, #220]	@ (800105c <HW_TS_Init+0x19c>)
 8000f7e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f80:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f84:	f7ff fb9c 	bl	80006c0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f88:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f8c:	f7ff fb84 	bl	8000698 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d13d      	bne.n	8001012 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f96:	4b32      	ldr	r3, [pc, #200]	@ (8001060 <HW_TS_Init+0x1a0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f9c:	4b31      	ldr	r3, [pc, #196]	@ (8001064 <HW_TS_Init+0x1a4>)
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	77fb      	strb	r3, [r7, #31]
 8000fa8:	e00c      	b.n	8000fc4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000faa:	7ffa      	ldrb	r2, [r7, #31]
 8000fac:	492e      	ldr	r1, [pc, #184]	@ (8001068 <HW_TS_Init+0x1a8>)
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	330c      	adds	r3, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fbe:	7ffb      	ldrb	r3, [r7, #31]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	77fb      	strb	r3, [r7, #31]
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d9ef      	bls.n	8000faa <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HW_TS_Init+0x1ac>)
 8000fcc:	2206      	movs	r2, #6
 8000fce:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <HW_TS_Init+0x188>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HW_TS_Init+0x188>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fde:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HW_TS_Init+0x188>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HW_TS_Init+0x188>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ff0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <HW_TS_Init+0x1b0>)
 8000ff4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ff8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f001 fbf5 	bl	80027ea <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HW_TS_Init+0x188>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HW_TS_Init+0x188>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	e009      	b.n	8001026 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HW_TS_Init+0x188>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001020:	2003      	movs	r0, #3
 8001022:	f001 fbd4 	bl	80027ce <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HW_TS_Init+0x188>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	22ff      	movs	r2, #255	@ 0xff
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800102e:	2200      	movs	r2, #0
 8001030:	2103      	movs	r1, #3
 8001032:	2003      	movs	r0, #3
 8001034:	f001 fb89 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001038:	2003      	movs	r0, #3
 800103a:	f001 fba0 	bl	800277e <HAL_NVIC_EnableIRQ>

  return;
 800103e:	bf00      	nop
}
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000194 	.word	0x20000194
 800104c:	40002800 	.word	0x40002800
 8001050:	20000151 	.word	0x20000151
 8001054:	20000152 	.word	0x20000152
 8001058:	20000154 	.word	0x20000154
 800105c:	20000156 	.word	0x20000156
 8001060:	20000150 	.word	0x20000150
 8001064:	2000014c 	.word	0x2000014c
 8001068:	200000b8 	.word	0x200000b8
 800106c:	20000148 	.word	0x20000148
 8001070:	58000800 	.word	0x58000800

08001074 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	@ 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4613      	mov	r3, r2
 8001082:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108a:	f3ef 8310 	mrs	r3, PRIMASK
 800108e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001090:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001092:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001098:	e004      	b.n	80010a4 <HW_TS_Create+0x30>
  {
    loop++;
 800109a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800109e:	3301      	adds	r3, #1
 80010a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d80c      	bhi.n	80010c6 <HW_TS_Create+0x52>
 80010ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010b0:	492c      	ldr	r1, [pc, #176]	@ (8001164 <HW_TS_Create+0xf0>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1e9      	bne.n	800109a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d038      	beq.n	8001140 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010d2:	4924      	ldr	r1, [pc, #144]	@ (8001164 <HW_TS_Create+0xf0>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	330c      	adds	r3, #12
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	f383 8810 	msr	PRIMASK, r3
}
 80010ee:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010f4:	491b      	ldr	r1, [pc, #108]	@ (8001164 <HW_TS_Create+0xf0>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	3310      	adds	r3, #16
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001106:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800110a:	4916      	ldr	r1, [pc, #88]	@ (8001164 <HW_TS_Create+0xf0>)
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	330d      	adds	r3, #13
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800111c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001120:	4910      	ldr	r1, [pc, #64]	@ (8001164 <HW_TS_Create+0xf0>)
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001136:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800113e:	e008      	b.n	8001152 <HW_TS_Create+0xde>
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f383 8810 	msr	PRIMASK, r3
}
 800114a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001156:	4618      	mov	r0, r3
 8001158:	372c      	adds	r7, #44	@ 0x2c
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200000b8 	.word	0x200000b8

08001168 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001172:	f3ef 8310 	mrs	r3, PRIMASK
 8001176:	60fb      	str	r3, [r7, #12]
  return(result);
 8001178:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800117a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001180:	2003      	movs	r0, #3
 8001182:	f001 fb0a 	bl	800279a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001186:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <HW_TS_Stop+0xf0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	22ca      	movs	r2, #202	@ 0xca
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
 800118e:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <HW_TS_Stop+0xf0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2253      	movs	r2, #83	@ 0x53
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	4930      	ldr	r1, [pc, #192]	@ (800125c <HW_TS_Stop+0xf4>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	330c      	adds	r3, #12
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d142      	bne.n	8001234 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fc06 	bl	80009c4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <HW_TS_Stop+0xf8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011be:	7cfb      	ldrb	r3, [r7, #19]
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d12f      	bne.n	8001224 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <HW_TS_Stop+0xfc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d0:	d107      	bne.n	80011e2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80011d2:	bf00      	nop
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HW_TS_Stop+0xf0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f8      	bne.n	80011d4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <HW_TS_Stop+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HW_TS_Stop+0xf0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011f0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011f2:	bf00      	nop
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HW_TS_Stop+0xf0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f8      	beq.n	80011f4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HW_TS_Stop+0xf0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HW_TS_Stop+0xf0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001212:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HW_TS_Stop+0x100>)
 8001216:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800121a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800121c:	2003      	movs	r0, #3
 800121e:	f001 fae4 	bl	80027ea <HAL_NVIC_ClearPendingIRQ>
 8001222:	e007      	b.n	8001234 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HW_TS_Stop+0x104>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	7cfa      	ldrb	r2, [r7, #19]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001230:	f7ff fce4 	bl	8000bfc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HW_TS_Stop+0xf0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	22ff      	movs	r2, #255	@ 0xff
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f001 fa9e 	bl	800277e <HAL_NVIC_EnableIRQ>
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f383 8810 	msr	PRIMASK, r3
}
 800124c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800124e:	bf00      	nop
}
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000194 	.word	0x20000194
 800125c:	200000b8 	.word	0x200000b8
 8001260:	20000148 	.word	0x20000148
 8001264:	40002800 	.word	0x40002800
 8001268:	58000800 	.word	0x58000800
 800126c:	20000149 	.word	0x20000149

08001270 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	493b      	ldr	r1, [pc, #236]	@ (800136c <HW_TS_Start+0xfc>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	330c      	adds	r3, #12
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d103      	bne.n	800129c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff66 	bl	8001168 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800129c:	f3ef 8310 	mrs	r3, PRIMASK
 80012a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80012a2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012a6:	b672      	cpsid	i
}
 80012a8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012aa:	2003      	movs	r0, #3
 80012ac:	f001 fa75 	bl	800279a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <HW_TS_Start+0x100>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	22ca      	movs	r2, #202	@ 0xca
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HW_TS_Start+0x100>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2253      	movs	r2, #83	@ 0x53
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	492a      	ldr	r1, [pc, #168]	@ (800136c <HW_TS_Start+0xfc>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	330c      	adds	r3, #12
 80012d0:	2202      	movs	r2, #2
 80012d2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012d4:	79fa      	ldrb	r2, [r7, #7]
 80012d6:	4925      	ldr	r1, [pc, #148]	@ (800136c <HW_TS_Start+0xfc>)
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	3308      	adds	r3, #8
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012e8:	79fa      	ldrb	r2, [r7, #7]
 80012ea:	4920      	ldr	r1, [pc, #128]	@ (800136c <HW_TS_Start+0xfc>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	3304      	adds	r3, #4
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fab6 	bl	8000870 <linkTimer>
 8001304:	4603      	mov	r3, r0
 8001306:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <HW_TS_Start+0x104>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <HW_TS_Start+0x108>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	7c7a      	ldrb	r2, [r7, #17]
 8001316:	429a      	cmp	r2, r3
 8001318:	d002      	beq.n	8001320 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800131a:	f7ff fc6f 	bl	8000bfc <RescheduleTimerList>
 800131e:	e013      	b.n	8001348 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	4912      	ldr	r1, [pc, #72]	@ (800136c <HW_TS_Start+0xfc>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3308      	adds	r3, #8
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	8a7b      	ldrh	r3, [r7, #18]
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	1ac9      	subs	r1, r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <HW_TS_Start+0xfc>)
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4403      	add	r3, r0
 8001344:	3308      	adds	r3, #8
 8001346:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HW_TS_Start+0x100>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	22ff      	movs	r2, #255	@ 0xff
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001350:	2003      	movs	r0, #3
 8001352:	f001 fa14 	bl	800277e <HAL_NVIC_EnableIRQ>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f383 8810 	msr	PRIMASK, r3
}
 8001360:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001362:	bf00      	nop
}
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000b8 	.word	0x200000b8
 8001370:	20000194 	.word	0x20000194
 8001374:	20000148 	.word	0x20000148
 8001378:	20000149 	.word	0x20000149

0800137c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	460b      	mov	r3, r1
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4798      	blx	r3

  return;
 800138e:	bf00      	nop
}
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <LL_RCC_LSE_SetDriveCapability>:
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a6:	f023 0218 	bic.w	r2, r3, #24
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f000 ffba 	bl	8002370 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80013fc:	f7fe ffba 	bl	8000374 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 fafa 	bl	80019f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001404:	f000 fb44 	bl	8001a90 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001408:	f000 fb62 	bl	8001ad0 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800140c:	4bb5      	ldr	r3, [pc, #724]	@ (80016e4 <main+0x2f0>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88

   }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001412:	f000 fbef 	bl	8001bf4 <MX_GPIO_Init>
  MX_RTC_Init();
 8001416:	f000 fb77 	bl	8001b08 <MX_RTC_Init>
  MX_SPI1_Init();
 800141a:	f000 fbad 	bl	8001b78 <MX_SPI1_Init>
  MX_RF_Init();
 800141e:	f000 fb6b 	bl	8001af8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001422:	2064      	movs	r0, #100	@ 0x64
 8001424:	f7ff f8e3 	bl	80005ee <HAL_Delay>
	TX_BUFFER[0] = reset_cmd;
 8001428:	4baf      	ldr	r3, [pc, #700]	@ (80016e8 <main+0x2f4>)
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	4baf      	ldr	r3, [pc, #700]	@ (80016ec <main+0x2f8>)
 800142e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2110      	movs	r1, #16
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f001 fb4e 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 1000);
 800143c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001440:	2201      	movs	r2, #1
 8001442:	49aa      	ldr	r1, [pc, #680]	@ (80016ec <main+0x2f8>)
 8001444:	48aa      	ldr	r0, [pc, #680]	@ (80016f0 <main+0x2fc>)
 8001446:	f003 f9f5 	bl	8004834 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2110      	movs	r1, #16
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f001 fb41 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001456:	2064      	movs	r0, #100	@ 0x64
 8001458:	f7ff f8c9 	bl	80005ee <HAL_Delay>

	TX_BUFFER[0] = read_c1_cmd;
 800145c:	4ba5      	ldr	r3, [pc, #660]	@ (80016f4 <main+0x300>)
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4ba2      	ldr	r3, [pc, #648]	@ (80016ec <main+0x2f8>)
 8001462:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f001 fb34 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001470:	2364      	movs	r3, #100	@ 0x64
 8001472:	2201      	movs	r2, #1
 8001474:	499d      	ldr	r1, [pc, #628]	@ (80016ec <main+0x2f8>)
 8001476:	489e      	ldr	r0, [pc, #632]	@ (80016f0 <main+0x2fc>)
 8001478:	f003 f9dc 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 800147c:	2364      	movs	r3, #100	@ 0x64
 800147e:	2202      	movs	r2, #2
 8001480:	499d      	ldr	r1, [pc, #628]	@ (80016f8 <main+0x304>)
 8001482:	489b      	ldr	r0, [pc, #620]	@ (80016f0 <main+0x2fc>)
 8001484:	f003 fb4c 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2110      	movs	r1, #16
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f001 fb22 	bl	8002ad8 <HAL_GPIO_WritePin>
	C1 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001494:	4b98      	ldr	r3, [pc, #608]	@ (80016f8 <main+0x304>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b21b      	sxth	r3, r3
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b21a      	sxth	r2, r3
 800149e:	4b96      	ldr	r3, [pc, #600]	@ (80016f8 <main+0x304>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b94      	ldr	r3, [pc, #592]	@ (80016fc <main+0x308>)
 80014ac:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c2_cmd;
 80014ae:	4b94      	ldr	r3, [pc, #592]	@ (8001700 <main+0x30c>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	4b8e      	ldr	r3, [pc, #568]	@ (80016ec <main+0x2f8>)
 80014b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2110      	movs	r1, #16
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f001 fb0b 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80014c2:	2364      	movs	r3, #100	@ 0x64
 80014c4:	2201      	movs	r2, #1
 80014c6:	4989      	ldr	r1, [pc, #548]	@ (80016ec <main+0x2f8>)
 80014c8:	4889      	ldr	r0, [pc, #548]	@ (80016f0 <main+0x2fc>)
 80014ca:	f003 f9b3 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80014ce:	2364      	movs	r3, #100	@ 0x64
 80014d0:	2202      	movs	r2, #2
 80014d2:	4989      	ldr	r1, [pc, #548]	@ (80016f8 <main+0x304>)
 80014d4:	4886      	ldr	r0, [pc, #536]	@ (80016f0 <main+0x2fc>)
 80014d6:	f003 fb23 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f001 faf9 	bl	8002ad8 <HAL_GPIO_WritePin>
	C2 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80014e6:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <main+0x304>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <main+0x304>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b81      	ldr	r3, [pc, #516]	@ (8001704 <main+0x310>)
 80014fe:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c3_cmd;
 8001500:	4b81      	ldr	r3, [pc, #516]	@ (8001708 <main+0x314>)
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b79      	ldr	r3, [pc, #484]	@ (80016ec <main+0x2f8>)
 8001506:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f001 fae2 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001514:	2364      	movs	r3, #100	@ 0x64
 8001516:	2201      	movs	r2, #1
 8001518:	4974      	ldr	r1, [pc, #464]	@ (80016ec <main+0x2f8>)
 800151a:	4875      	ldr	r0, [pc, #468]	@ (80016f0 <main+0x2fc>)
 800151c:	f003 f98a 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	2202      	movs	r2, #2
 8001524:	4974      	ldr	r1, [pc, #464]	@ (80016f8 <main+0x304>)
 8001526:	4872      	ldr	r0, [pc, #456]	@ (80016f0 <main+0x2fc>)
 8001528:	f003 fafa 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2110      	movs	r1, #16
 8001530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001534:	f001 fad0 	bl	8002ad8 <HAL_GPIO_WritePin>
	C3 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001538:	4b6f      	ldr	r3, [pc, #444]	@ (80016f8 <main+0x304>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b21b      	sxth	r3, r3
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b6d      	ldr	r3, [pc, #436]	@ (80016f8 <main+0x304>)
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21b      	sxth	r3, r3
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b6f      	ldr	r3, [pc, #444]	@ (800170c <main+0x318>)
 8001550:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c4_cmd;
 8001552:	4b6f      	ldr	r3, [pc, #444]	@ (8001710 <main+0x31c>)
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	4b65      	ldr	r3, [pc, #404]	@ (80016ec <main+0x2f8>)
 8001558:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001562:	f001 fab9 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001566:	2364      	movs	r3, #100	@ 0x64
 8001568:	2201      	movs	r2, #1
 800156a:	4960      	ldr	r1, [pc, #384]	@ (80016ec <main+0x2f8>)
 800156c:	4860      	ldr	r0, [pc, #384]	@ (80016f0 <main+0x2fc>)
 800156e:	f003 f961 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001572:	2364      	movs	r3, #100	@ 0x64
 8001574:	2202      	movs	r2, #2
 8001576:	4960      	ldr	r1, [pc, #384]	@ (80016f8 <main+0x304>)
 8001578:	485d      	ldr	r0, [pc, #372]	@ (80016f0 <main+0x2fc>)
 800157a:	f003 fad1 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2110      	movs	r1, #16
 8001582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001586:	f001 faa7 	bl	8002ad8 <HAL_GPIO_WritePin>
	C4 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800158a:	4b5b      	ldr	r3, [pc, #364]	@ (80016f8 <main+0x304>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b21b      	sxth	r3, r3
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <main+0x304>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001714 <main+0x320>)
 80015a2:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c5_cmd;
 80015a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <main+0x324>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b50      	ldr	r3, [pc, #320]	@ (80016ec <main+0x2f8>)
 80015aa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2110      	movs	r1, #16
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f001 fa90 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	2201      	movs	r2, #1
 80015bc:	494b      	ldr	r1, [pc, #300]	@ (80016ec <main+0x2f8>)
 80015be:	484c      	ldr	r0, [pc, #304]	@ (80016f0 <main+0x2fc>)
 80015c0:	f003 f938 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80015c4:	2364      	movs	r3, #100	@ 0x64
 80015c6:	2202      	movs	r2, #2
 80015c8:	494b      	ldr	r1, [pc, #300]	@ (80016f8 <main+0x304>)
 80015ca:	4849      	ldr	r0, [pc, #292]	@ (80016f0 <main+0x2fc>)
 80015cc:	f003 faa8 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2110      	movs	r1, #16
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f001 fa7e 	bl	8002ad8 <HAL_GPIO_WritePin>
	C5 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80015dc:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <main+0x304>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <main+0x304>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <main+0x328>)
 80015f4:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c6_cmd;
 80015f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <main+0x32c>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <main+0x2f8>)
 80015fc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2110      	movs	r1, #16
 8001602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001606:	f001 fa67 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	2201      	movs	r2, #1
 800160e:	4937      	ldr	r1, [pc, #220]	@ (80016ec <main+0x2f8>)
 8001610:	4837      	ldr	r0, [pc, #220]	@ (80016f0 <main+0x2fc>)
 8001612:	f003 f90f 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001616:	2364      	movs	r3, #100	@ 0x64
 8001618:	2202      	movs	r2, #2
 800161a:	4937      	ldr	r1, [pc, #220]	@ (80016f8 <main+0x304>)
 800161c:	4834      	ldr	r0, [pc, #208]	@ (80016f0 <main+0x2fc>)
 800161e:	f003 fa7f 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162a:	f001 fa55 	bl	8002ad8 <HAL_GPIO_WritePin>
	C6 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 800162e:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <main+0x304>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b21b      	sxth	r3, r3
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <main+0x304>)
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <main+0x330>)
 8001646:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c7_cmd;
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <main+0x334>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <main+0x2f8>)
 800164e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2110      	movs	r1, #16
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f001 fa3e 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800165c:	2364      	movs	r3, #100	@ 0x64
 800165e:	2201      	movs	r2, #1
 8001660:	4922      	ldr	r1, [pc, #136]	@ (80016ec <main+0x2f8>)
 8001662:	4823      	ldr	r0, [pc, #140]	@ (80016f0 <main+0x2fc>)
 8001664:	f003 f8e6 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001668:	2364      	movs	r3, #100	@ 0x64
 800166a:	2202      	movs	r2, #2
 800166c:	4922      	ldr	r1, [pc, #136]	@ (80016f8 <main+0x304>)
 800166e:	4820      	ldr	r0, [pc, #128]	@ (80016f0 <main+0x2fc>)
 8001670:	f003 fa56 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2110      	movs	r1, #16
 8001678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167c:	f001 fa2c 	bl	8002ad8 <HAL_GPIO_WritePin>
	C7 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <main+0x304>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b21b      	sxth	r3, r3
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21a      	sxth	r2, r3
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <main+0x304>)
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <main+0x338>)
 8001698:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c8_cmd;
 800169a:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <main+0x33c>)
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <main+0x2f8>)
 80016a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016aa:	f001 fa15 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	490e      	ldr	r1, [pc, #56]	@ (80016ec <main+0x2f8>)
 80016b4:	480e      	ldr	r0, [pc, #56]	@ (80016f0 <main+0x2fc>)
 80016b6:	f003 f8bd 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80016ba:	2364      	movs	r3, #100	@ 0x64
 80016bc:	2202      	movs	r2, #2
 80016be:	490e      	ldr	r1, [pc, #56]	@ (80016f8 <main+0x304>)
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <main+0x2fc>)
 80016c2:	f003 fa2d 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2110      	movs	r1, #16
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ce:	f001 fa03 	bl	8002ad8 <HAL_GPIO_WritePin>
	C8 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <main+0x304>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <main+0x304>)
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	e028      	b.n	8001734 <main+0x340>
 80016e2:	bf00      	nop
 80016e4:	58000400 	.word	0x58000400
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000248 	.word	0x20000248
 80016f0:	200001b8 	.word	0x200001b8
 80016f4:	20000009 	.word	0x20000009
 80016f8:	2000024c 	.word	0x2000024c
 80016fc:	2000021c 	.word	0x2000021c
 8001700:	2000000a 	.word	0x2000000a
 8001704:	2000021e 	.word	0x2000021e
 8001708:	2000000b 	.word	0x2000000b
 800170c:	20000220 	.word	0x20000220
 8001710:	2000000c 	.word	0x2000000c
 8001714:	20000222 	.word	0x20000222
 8001718:	2000000d 	.word	0x2000000d
 800171c:	20000224 	.word	0x20000224
 8001720:	2000000e 	.word	0x2000000e
 8001724:	20000226 	.word	0x20000226
 8001728:	2000000f 	.word	0x2000000f
 800172c:	20000228 	.word	0x20000228
 8001730:	20000010 	.word	0x20000010
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21b      	sxth	r3, r3
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b94      	ldr	r3, [pc, #592]	@ (8001990 <main+0x59c>)
 800173e:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c9_cmd;
 8001740:	4b94      	ldr	r3, [pc, #592]	@ (8001994 <main+0x5a0>)
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	4b94      	ldr	r3, [pc, #592]	@ (8001998 <main+0x5a4>)
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001750:	f001 f9c2 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 8001754:	2364      	movs	r3, #100	@ 0x64
 8001756:	2201      	movs	r2, #1
 8001758:	498f      	ldr	r1, [pc, #572]	@ (8001998 <main+0x5a4>)
 800175a:	4890      	ldr	r0, [pc, #576]	@ (800199c <main+0x5a8>)
 800175c:	f003 f86a 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 8001760:	2364      	movs	r3, #100	@ 0x64
 8001762:	2202      	movs	r2, #2
 8001764:	498e      	ldr	r1, [pc, #568]	@ (80019a0 <main+0x5ac>)
 8001766:	488d      	ldr	r0, [pc, #564]	@ (800199c <main+0x5a8>)
 8001768:	f003 f9da 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f001 f9b0 	bl	8002ad8 <HAL_GPIO_WritePin>
	C9 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 8001778:	4b89      	ldr	r3, [pc, #548]	@ (80019a0 <main+0x5ac>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b21b      	sxth	r3, r3
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	4b87      	ldr	r3, [pc, #540]	@ (80019a0 <main+0x5ac>)
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <main+0x5b0>)
 8001790:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = read_c10_cmd;
 8001792:	4b85      	ldr	r3, [pc, #532]	@ (80019a8 <main+0x5b4>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b80      	ldr	r3, [pc, #512]	@ (8001998 <main+0x5a4>)
 8001798:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2110      	movs	r1, #16
 800179e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a2:	f001 f999 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80017a6:	2364      	movs	r3, #100	@ 0x64
 80017a8:	2201      	movs	r2, #1
 80017aa:	497b      	ldr	r1, [pc, #492]	@ (8001998 <main+0x5a4>)
 80017ac:	487b      	ldr	r0, [pc, #492]	@ (800199c <main+0x5a8>)
 80017ae:	f003 f841 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 2, 100);
 80017b2:	2364      	movs	r3, #100	@ 0x64
 80017b4:	2202      	movs	r2, #2
 80017b6:	497a      	ldr	r1, [pc, #488]	@ (80019a0 <main+0x5ac>)
 80017b8:	4878      	ldr	r0, [pc, #480]	@ (800199c <main+0x5a8>)
 80017ba:	f003 f9b1 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2110      	movs	r1, #16
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c6:	f001 f987 	bl	8002ad8 <HAL_GPIO_WritePin>
	C10 = (RX_BUFFER[0] << 8) | RX_BUFFER[1];
 80017ca:	4b75      	ldr	r3, [pc, #468]	@ (80019a0 <main+0x5ac>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b72      	ldr	r3, [pc, #456]	@ (80019a0 <main+0x5ac>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b72      	ldr	r3, [pc, #456]	@ (80019ac <main+0x5b8>)
 80017e2:	801a      	strh	r2, [r3, #0]

	TX_BUFFER[0] = start_conversion_cmd;
 80017e4:	4b72      	ldr	r3, [pc, #456]	@ (80019b0 <main+0x5bc>)
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001998 <main+0x5a4>)
 80017ea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2110      	movs	r1, #16
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f4:	f001 f970 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 80017f8:	2364      	movs	r3, #100	@ 0x64
 80017fa:	2201      	movs	r2, #1
 80017fc:	4966      	ldr	r1, [pc, #408]	@ (8001998 <main+0x5a4>)
 80017fe:	4867      	ldr	r0, [pc, #412]	@ (800199c <main+0x5a8>)
 8001800:	f003 f818 	bl	8004834 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180c:	f001 f964 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001810:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001814:	f7fe feeb 	bl	80005ee <HAL_Delay>

	TX_BUFFER[0] = read_adc_cmd;
 8001818:	4b66      	ldr	r3, [pc, #408]	@ (80019b4 <main+0x5c0>)
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b5e      	ldr	r3, [pc, #376]	@ (8001998 <main+0x5a4>)
 800181e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2110      	movs	r1, #16
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f001 f956 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, 100);
 800182c:	2364      	movs	r3, #100	@ 0x64
 800182e:	2201      	movs	r2, #1
 8001830:	4959      	ldr	r1, [pc, #356]	@ (8001998 <main+0x5a4>)
 8001832:	485a      	ldr	r0, [pc, #360]	@ (800199c <main+0x5a8>)
 8001834:	f002 fffe 	bl	8004834 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, 100);
 8001838:	2364      	movs	r3, #100	@ 0x64
 800183a:	2206      	movs	r2, #6
 800183c:	4958      	ldr	r1, [pc, #352]	@ (80019a0 <main+0x5ac>)
 800183e:	4857      	ldr	r0, [pc, #348]	@ (800199c <main+0x5a8>)
 8001840:	f003 f96e 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2110      	movs	r1, #16
 8001848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184c:	f001 f944 	bl	8002ad8 <HAL_GPIO_WritePin>
	raw_temp = (RX_BUFFER[0] << 16) | (RX_BUFFER[1] << 8) | (RX_BUFFER[2]);
 8001850:	4b53      	ldr	r3, [pc, #332]	@ (80019a0 <main+0x5ac>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	4b52      	ldr	r3, [pc, #328]	@ (80019a0 <main+0x5ac>)
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	4313      	orrs	r3, r2
 800185e:	4a50      	ldr	r2, [pc, #320]	@ (80019a0 <main+0x5ac>)
 8001860:	7892      	ldrb	r2, [r2, #2]
 8001862:	4313      	orrs	r3, r2
 8001864:	461a      	mov	r2, r3
 8001866:	4b54      	ldr	r3, [pc, #336]	@ (80019b8 <main+0x5c4>)
 8001868:	601a      	str	r2, [r3, #0]
	raw_pressure = (RX_BUFFER[3] << 16) | (RX_BUFFER[4] << 8) | (RX_BUFFER[5]);
 800186a:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <main+0x5ac>)
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	041a      	lsls	r2, r3, #16
 8001870:	4b4b      	ldr	r3, [pc, #300]	@ (80019a0 <main+0x5ac>)
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	4313      	orrs	r3, r2
 8001878:	4a49      	ldr	r2, [pc, #292]	@ (80019a0 <main+0x5ac>)
 800187a:	7952      	ldrb	r2, [r2, #5]
 800187c:	4313      	orrs	r3, r2
 800187e:	461a      	mov	r2, r3
 8001880:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <main+0x5c8>)
 8001882:	601a      	str	r2, [r3, #0]
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 8001884:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <main+0x5cc>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001890:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <main+0x5c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80019c4 <main+0x5d0>
 80018a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / (float) 34359738368)
 80018a8:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <main+0x5d4>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018b4:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <main+0x5c8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c4:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 80019cc <main+0x5d8>
 80018c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018cc:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / (float) 64));
 80018d0:	4b3f      	ldr	r3, [pc, #252]	@ (80019d0 <main+0x5dc>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018dc:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 80019d4 <main+0x5e0>
 80018e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
	temperature = (float) (((float) C1 * (float) raw_temp / (float) 536870912)
 80018e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e8:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <main+0x5e4>)
 80018ea:	edc3 7a00 	vstr	s15, [r3]
	offset = (float) C6 + (float) C7 * temperature / (float) 512;
 80018ee:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <main+0x5e8>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <main+0x5ec>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001906:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <main+0x5e4>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001910:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80019e4 <main+0x5f0>
 8001914:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <main+0x5f4>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + (float) C9 * temperature / (float) 512;
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <main+0x59c>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <main+0x5b0>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800193a:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <main+0x5e4>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001944:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 80019e4 <main+0x5f0>
 8001948:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <main+0x5f8>)
 8001952:	edc3 7a00 	vstr	s15, [r3]
	pressure = (float) raw_pressure * sensitivity / (float) 4194304 - offset;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <main+0x5c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001962:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <main+0x5f8>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80019f0 <main+0x5fc>
 8001970:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <main+0x5f4>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <main+0x600>)
 8001980:	edc3 7a00 	vstr	s15, [r3]

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001984:	f7fe fd04 	bl	8000390 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001988:	f7fe fe56 	bl	8000638 <MX_APPE_Process>
 800198c:	e7fc      	b.n	8001988 <main+0x594>
 800198e:	bf00      	nop
 8001990:	2000022a 	.word	0x2000022a
 8001994:	20000011 	.word	0x20000011
 8001998:	20000248 	.word	0x20000248
 800199c:	200001b8 	.word	0x200001b8
 80019a0:	2000024c 	.word	0x2000024c
 80019a4:	2000022c 	.word	0x2000022c
 80019a8:	20000012 	.word	0x20000012
 80019ac:	2000022e 	.word	0x2000022e
 80019b0:	20000013 	.word	0x20000013
 80019b4:	20000014 	.word	0x20000014
 80019b8:	20000234 	.word	0x20000234
 80019bc:	20000230 	.word	0x20000230
 80019c0:	2000021c 	.word	0x2000021c
 80019c4:	4e000000 	.word	0x4e000000
 80019c8:	20000220 	.word	0x20000220
 80019cc:	51000000 	.word	0x51000000
 80019d0:	2000021e 	.word	0x2000021e
 80019d4:	42800000 	.word	0x42800000
 80019d8:	20000238 	.word	0x20000238
 80019dc:	20000226 	.word	0x20000226
 80019e0:	20000228 	.word	0x20000228
 80019e4:	44000000 	.word	0x44000000
 80019e8:	2000023c 	.word	0x2000023c
 80019ec:	20000240 	.word	0x20000240
 80019f0:	4a800000 	.word	0x4a800000
 80019f4:	20000244 	.word	0x20000244

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b098      	sub	sp, #96	@ 0x60
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	2244      	movs	r2, #68	@ 0x44
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 fb48 	bl	800909c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	615a      	str	r2, [r3, #20]
 8001a1c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a1e:	f001 f91d 	bl	8002c5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001a22:	2010      	movs	r0, #16
 8001a24:	f7ff fcb7 	bl	8001396 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a28:	2307      	movs	r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a3c:	2340      	movs	r3, #64	@ 0x40
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fc57 	bl	80032fc <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001a54:	f000 f8f3 	bl	8001c3e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a58:	236f      	movs	r3, #111	@ 0x6f
 8001a5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	2101      	movs	r1, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 ff75 	bl	8003968 <HAL_RCC_ClockConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a84:	f000 f8db 	bl	8001c3e <Error_Handler>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3760      	adds	r7, #96	@ 0x60
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2230      	movs	r2, #48	@ 0x30
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 fafd 	bl	800909c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001aa2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001aa6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001aa8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 faeb 	bl	8004094 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001ac4:	f000 f8bb 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ac8:	bf00      	nop
 8001aca:	3730      	adds	r7, #48	@ 0x30
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_IPCC_Init+0x20>)
 8001ad6:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <MX_IPCC_Init+0x24>)
 8001ad8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_IPCC_Init+0x20>)
 8001adc:	f001 f838 	bl	8002b50 <HAL_IPCC_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001ae6:	f000 f8aa 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000158 	.word	0x20000158
 8001af4:	58000c00 	.word	0x58000c00

08001af8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b0e:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <MX_RTC_Init+0x6c>)
 8001b10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b20:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001b24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b38:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b3a:	f002 fba1 	bl	8004280 <HAL_RTC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001b44:	f000 f87b 	bl	8001c3e <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4808      	ldr	r0, [pc, #32]	@ (8001b70 <MX_RTC_Init+0x68>)
 8001b4e:	f002 fca3 	bl	8004498 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001b58:	f000 f871 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  // Allow Stop mode for the App (so idle can drop to Stop2)
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f006 ffde 	bl	8008b20 <UTIL_LPM_SetStopMode>

  // Disallow Off/Standby for now (we’ll enable later if you choose Standby)
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2001      	movs	r0, #1
 8001b68:	f007 f80a 	bl	8008b80 <UTIL_LPM_SetOffMode>
  /* USER CODE END RTC_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000194 	.word	0x20000194
 8001b74:	40002800 	.word	0x40002800

08001b78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf0 <MX_SPI1_Init+0x78>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001b84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001b92:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001baa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_SPI1_Init+0x74>)
 8001bd8:	f002 fd89 	bl	80046ee <HAL_SPI_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001be2:	f000 f82c 	bl	8001c3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200001b8 	.word	0x200001b8
 8001bf0:	40013000 	.word	0x40013000

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fbda 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2110      	movs	r1, #16
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c16:	f000 ff5f 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c32:	f000 fde9 	bl	8002808 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c42:	b672      	cpsid	i
}
 8001c44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <Error_Handler+0x8>
	...

08001c4c <Sleep_ArmWakeupAndIdle>:
  // Your project should already expose this; otherwise call aci_gap_set_discoverable
  Adv_Request(APP_BLE_FAST_ADV);
}

void Sleep_ArmWakeupAndIdle(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  // ~10 s at 2048 Hz (RTC/16)
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <Sleep_ArmWakeupAndIdle+0x1c>)
 8001c52:	f002 fced 	bl	8004630 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_PERIOD_SEC * 2048U, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <Sleep_ArmWakeupAndIdle+0x1c>)
 8001c5e:	f002 fc1b 	bl	8004498 <HAL_RTCEx_SetWakeUpTimer_IT>

  // Nothing else scheduled? Let sequencer idle enter Stop2 for you.
  // Do NOT block here; just return to main loop (UTIL_SEQ_Run).
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000194 	.word	0x20000194

08001c6c <LL_PWR_SetPowerMode>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <LL_PWR_SetPowerMode+0x24>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 0207 	bic.w	r2, r3, #7
 8001c7c:	4904      	ldr	r1, [pc, #16]	@ (8001c90 <LL_PWR_SetPowerMode+0x24>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	58000400 	.word	0x58000400

08001c94 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <LL_PWR_ClearFlag_WU+0x14>)
 8001c9a:	2209      	movs	r2, #9
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	58000400 	.word	0x58000400

08001cac <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d101      	bne.n	8001cc4 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	58000400 	.word	0x58000400

08001cd4 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ce6:	d101      	bne.n	8001cec <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	58000400 	.word	0x58000400

08001cfc <LL_RCC_HSI_Enable>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_HSI_IsReady>:
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d2c:	d101      	bne.n	8001d32 <LL_RCC_HSI_IsReady+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_RCC_HSI_IsReady+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_SetSysClkSource>:
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 0203 	bic.w	r2, r3, #3
 8001d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_RCC_GetSysClkSource>:
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	f023 0203 	bic.w	r2, r3, #3
 8001d90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001db6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_LPM_EnableSleep>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <LL_LPM_EnableSleep+0x1c>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <LL_LPM_EnableSleep+0x1c>)
 8001dd2:	f023 0304 	bic.w	r3, r3, #4
 8001dd6:	6113      	str	r3, [r2, #16]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <LL_LPM_EnableDeepSleep+0x1c>)
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <LL_LPM_EnableDeepSleep+0x1c>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6113      	str	r3, [r2, #16]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	3220      	adds	r2, #32
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <LL_HSEM_1StepLock+0x2c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d001      	beq.n	8001e26 <LL_HSEM_1StepLock+0x1e>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_HSEM_1StepLock+0x20>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	80000400 	.word	0x80000400

08001e38 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001e62:	f000 fb17 	bl	8002494 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001e66:	f7ff ff9e 	bl	8001da6 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001e6a:	f000 f835 	bl	8001ed8 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001e6e:	f7ff ff11 	bl	8001c94 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001e72:	2003      	movs	r0, #3
 8001e74:	f7ff fefa 	bl	8001c6c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001e78:	f7ff ffb6 	bl	8001de8 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001e7c:	bf00      	nop
}
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001e84:	bf00      	nop
}
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001e92:	f000 faff 	bl	8002494 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001e96:	f000 f81f 	bl	8001ed8 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff fee6 	bl	8001c6c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ea0:	f7ff ffa2 	bl	8001de8 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001ea4:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001ea6:	bf00      	nop
}
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001eae:	f000 f84f 	bl	8001f50 <ExitLowPower>

  HAL_ResumeTick();
 8001eb2:	f000 faff 	bl	80024b4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001eb6:	bf00      	nop
}
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001ebe:	f000 fae9 	bl	8002494 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ec2:	f7ff ff81 	bl	8001dc8 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001ec6:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001ec8:	bf00      	nop
}
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001ed0:	f000 faf0 	bl	80024b4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001ed4:	bf00      	nop
}
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001edc:	bf00      	nop
 8001ede:	2103      	movs	r1, #3
 8001ee0:	4819      	ldr	r0, [pc, #100]	@ (8001f48 <EnterLowPower+0x70>)
 8001ee2:	f7ff ff91 	bl	8001e08 <LL_HSEM_1StepLock>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f8      	bne.n	8001ede <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001eec:	2104      	movs	r1, #4
 8001eee:	4816      	ldr	r0, [pc, #88]	@ (8001f48 <EnterLowPower+0x70>)
 8001ef0:	f7ff ff8a 	bl	8001e08 <LL_HSEM_1StepLock>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d117      	bne.n	8001f2a <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001efa:	f7ff feeb 	bl	8001cd4 <LL_PWR_IsActiveFlag_C2DS>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <EnterLowPower+0x36>
 8001f04:	f7ff fed2 	bl	8001cac <LL_PWR_IsActiveFlag_C2SB>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2104      	movs	r1, #4
 8001f12:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <EnterLowPower+0x70>)
 8001f14:	f7ff ff90 	bl	8001e38 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001f18:	f000 f834 	bl	8001f84 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <EnterLowPower+0x74>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <EnterLowPower+0x74>)
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e007      	b.n	8001f3a <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001f2a:	f000 f82b 	bl	8001f84 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <EnterLowPower+0x74>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <EnterLowPower+0x74>)
 8001f34:	f023 0307 	bic.w	r3, r3, #7
 8001f38:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <EnterLowPower+0x70>)
 8001f40:	f7ff ff7a 	bl	8001e38 <LL_HSEM_ReleaseLock>

  return;
 8001f44:	bf00      	nop
}
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	58001400 	.word	0x58001400
 8001f4c:	58004000 	.word	0x58004000

08001f50 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2104      	movs	r1, #4
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <ExitLowPower+0x30>)
 8001f5a:	f7ff ff6d 	bl	8001e38 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001f5e:	bf00      	nop
 8001f60:	2103      	movs	r1, #3
 8001f62:	4807      	ldr	r0, [pc, #28]	@ (8001f80 <ExitLowPower+0x30>)
 8001f64:	f7ff ff50 	bl	8001e08 <LL_HSEM_1StepLock>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f8      	bne.n	8001f60 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f6e:	f7ff fefa 	bl	8001d66 <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2103      	movs	r1, #3
 8001f76:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <ExitLowPower+0x30>)
 8001f78:	f7ff ff5e 	bl	8001e38 <LL_HSEM_ReleaseLock>

  return;
 8001f7c:	bf00      	nop
}
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	58001400 	.word	0x58001400

08001f84 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001f88:	f7ff feb8 	bl	8001cfc <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001f8c:	bf00      	nop
 8001f8e:	f7ff fec4 	bl	8001d1a <LL_RCC_HSI_IsReady>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0fa      	beq.n	8001f8e <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff fed0 	bl	8001d3e <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff feed 	bl	8001d7e <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001fa4:	bf00      	nop
 8001fa6:	f7ff fede 	bl	8001d66 <LL_RCC_GetSysClkSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d1fa      	bne.n	8001fa6 <Switch_On_HSI+0x22>
  return;
 8001fb0:	bf00      	nop
}
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <LL_RCC_EnableRTC>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_AHB2_GRP1_EnableClock>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202c:	68fb      	ldr	r3, [r7, #12]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002046:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002056:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002078:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80020a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80020a6:	f7ff ffaf 	bl	8002008 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	202e      	movs	r0, #46	@ 0x2e
 80020b0:	f000 fb4b 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80020b4:	202e      	movs	r0, #46	@ 0x2e
 80020b6:	f000 fb62 	bl	800277e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <HAL_IPCC_MspInit+0x44>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d113      	bne.n	80020fa <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80020d2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80020d6:	f7ff ff97 	bl	8002008 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	202c      	movs	r0, #44	@ 0x2c
 80020e0:	f000 fb33 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80020e4:	202c      	movs	r0, #44	@ 0x2c
 80020e6:	f000 fb4a 	bl	800277e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	202d      	movs	r0, #45	@ 0x2d
 80020f0:	f000 fb2b 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020f4:	202d      	movs	r0, #45	@ 0x2d
 80020f6:	f000 fb42 	bl	800277e <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58000c00 	.word	0x58000c00

08002108 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	@ 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	2230      	movs	r2, #48	@ 0x30
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f006 ffbf 	bl	800909c <memset>
  if(hrtc->Instance==RTC)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <HAL_RTC_MspInit+0x64>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d11d      	bne.n	8002164 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002128:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800212c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800212e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	4618      	mov	r0, r3
 800213a:	f001 ffab 	bl	8004094 <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002144:	f7ff fd7b 	bl	8001c3e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002148:	f7ff ff34 	bl	8001fb4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800214c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002150:	f7ff ff73 	bl	800203a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2003      	movs	r0, #3
 800215a:	f000 faf6 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800215e:	2003      	movs	r0, #3
 8002160:	f000 fb0d 	bl	800277e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	@ 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40002800 	.word	0x40002800

08002170 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0f      	ldr	r2, [pc, #60]	@ (80021cc <HAL_SPI_MspInit+0x5c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d117      	bne.n	80021c2 <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002192:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002196:	f7ff ff69 	bl	800206c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff1b 	bl	8001fd6 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
 80021a0:	23e0      	movs	r3, #224	@ 0xe0
 80021a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b0:	2305      	movs	r3, #5
 80021b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021be:	f000 fb23 	bl	8002808 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40013000 	.word	0x40013000

080021d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <NMI_Handler+0x4>

080021d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <MemManage_Handler+0x4>

080021e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002226:	f000 f8fd 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}

0800222e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002232:	f7fe fd7d 	bl	8000d30 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}

0800223a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800223e:	f006 faa3 	bl	8008788 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}

08002246 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800224a:	f006 fad3 	bl	80087f4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}

08002252 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002256:	f000 fc57 	bl	8002b08 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002264:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <SystemInit+0x90>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	4a21      	ldr	r2, [pc, #132]	@ (80022f0 <SystemInit+0x90>)
 800226c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002288:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800228c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <SystemInit+0x94>)
 800229a:	4013      	ands	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022aa:	f023 0305 	bic.w	r3, r3, #5
 80022ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ca:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <SystemInit+0x98>)
 80022cc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	faf6fefb 	.word	0xfaf6fefb
 80022f8:	22041000 	.word	0x22041000

080022fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80022fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002300:	3304      	adds	r3, #4

08002302 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002302:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002304:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002306:	d3f9      	bcc.n	80022fc <CopyDataInit>
  bx lr
 8002308:	4770      	bx	lr

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800230a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800230c:	3004      	adds	r0, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800230e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>
  bx lr
 8002312:	4770      	bx	lr

08002314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002318:	f7ff ffa2 	bl	8002260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800231c:	480b      	ldr	r0, [pc, #44]	@ (800234c <LoopForever+0x6>)
 800231e:	490c      	ldr	r1, [pc, #48]	@ (8002350 <LoopForever+0xa>)
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <LoopForever+0xe>)
 8002322:	2300      	movs	r3, #0
 8002324:	f7ff ffed 	bl	8002302 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002328:	480b      	ldr	r0, [pc, #44]	@ (8002358 <LoopForever+0x12>)
 800232a:	490c      	ldr	r1, [pc, #48]	@ (800235c <LoopForever+0x16>)
 800232c:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <LoopForever+0x1a>)
 800232e:	2300      	movs	r3, #0
 8002330:	f7ff ffe7 	bl	8002302 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002334:	480b      	ldr	r0, [pc, #44]	@ (8002364 <LoopForever+0x1e>)
 8002336:	490c      	ldr	r1, [pc, #48]	@ (8002368 <LoopForever+0x22>)
 8002338:	2300      	movs	r3, #0
 800233a:	f7ff ffe8 	bl	800230e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800233e:	f006 feb5 	bl	80090ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002342:	f7ff f857 	bl	80013f4 <main>

08002346 <LoopForever>:

LoopForever:
  b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   r0, =_estack
 8002348:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800234c:	20000008 	.word	0x20000008
 8002350:	20000050 	.word	0x20000050
 8002354:	080093ac 	.word	0x080093ac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002358:	200301e4 	.word	0x200301e4
 800235c:	20030a67 	.word	0x20030a67
 8002360:	0800943a 	.word	0x0800943a
  INIT_BSS _sbss, _ebss
 8002364:	2000009c 	.word	0x2000009c
 8002368:	2000040c 	.word	0x2000040c

0800236c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC1_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <HAL_Init+0x3c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0b      	ldr	r2, [pc, #44]	@ (80023ac <HAL_Init+0x3c>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002384:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002386:	2003      	movs	r0, #3
 8002388:	f000 f9d4 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238c:	200f      	movs	r0, #15
 800238e:	f000 f80f 	bl	80023b0 <HAL_InitTick>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	e001      	b.n	80023a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800239e:	f7ff fe7e 	bl	800209e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a2:	79fb      	ldrb	r3, [r7, #7]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58004000 	.word	0x58004000

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <HAL_InitTick+0x6c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d024      	beq.n	800240e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023c4:	f001 fc7c 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_InitTick+0x6c>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f9ea 	bl	80027b6 <HAL_SYSTICK_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10f      	bne.n	8002408 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	d809      	bhi.n	8002402 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ee:	2200      	movs	r2, #0
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	f000 f9a8 	bl	800274a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_InitTick+0x70>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e007      	b.n	8002412 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e004      	b.n	8002412 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e001      	b.n	8002412 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000028 	.word	0x20000028
 8002420:	20000024 	.word	0x20000024

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x20>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_IncTick+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_IncTick+0x24>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000028 	.word	0x20000028
 8002448:	20000254 	.word	0x20000254

0800244c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTick;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_GetTick+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000254 	.word	0x20000254

08002464 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_GetTickPrio+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000024 	.word	0x20000024

0800247c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_GetTickFreq+0x14>)
 8002482:	781b      	ldrb	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000028 	.word	0x20000028

08002494 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_SuspendTick+0x1c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <HAL_SuspendTick+0x1c>)
 800249e:	f023 0302 	bic.w	r3, r3, #2
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_ResumeTick+0x1c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_ResumeTick+0x1c>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	@ (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db12      	blt.n	80025ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	490a      	ldr	r1, [pc, #40]	@ (80025b8 <__NVIC_DisableIRQ+0x44>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	3320      	adds	r3, #32
 800259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025a0:	f3bf 8f4f 	dsb	sy
}
 80025a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025a6:	f3bf 8f6f 	isb	sy
}
 80025aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0c      	blt.n	80025e8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	@ (80025f4 <__NVIC_SetPendingIRQ+0x38>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	3340      	adds	r3, #64	@ 0x40
 80025e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0c      	blt.n	8002624 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <__NVIC_ClearPendingIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	3360      	adds	r3, #96	@ 0x60
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fec9 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002758:	f7ff fee0 	bl	800251c <__NVIC_GetPriorityGrouping>
 800275c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f7ff ff90 	bl	8002688 <NVIC_EncodePriority>
 8002768:	4602      	mov	r2, r0
 800276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff5f 	bl	8002634 <__NVIC_SetPriority>
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fed3 	bl	8002538 <__NVIC_EnableIRQ>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fee3 	bl	8002574 <__NVIC_DisableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff96 	bl	80026f0 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff feed 	bl	80025bc <__NVIC_SetPendingIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fefd 	bl	80025f8 <__NVIC_ClearPendingIRQ>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e146      	b.n	8002aa6 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8138 	beq.w	8002aa0 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d005      	beq.n	8002848 <HAL_GPIO_Init+0x40>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d017      	beq.n	80028e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d123      	bne.n	800293a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	6939      	ldr	r1, [r7, #16]
 8002936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0203 	and.w	r2, r3, #3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8092 	beq.w	8002aa0 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800297c:	4a51      	ldr	r2, [pc, #324]	@ (8002ac4 <HAL_GPIO_Init+0x2bc>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029a6:	d013      	beq.n	80029d0 <HAL_GPIO_Init+0x1c8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a47      	ldr	r2, [pc, #284]	@ (8002ac8 <HAL_GPIO_Init+0x2c0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00d      	beq.n	80029cc <HAL_GPIO_Init+0x1c4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a46      	ldr	r2, [pc, #280]	@ (8002acc <HAL_GPIO_Init+0x2c4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <HAL_GPIO_Init+0x1c0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a45      	ldr	r2, [pc, #276]	@ (8002ad0 <HAL_GPIO_Init+0x2c8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_GPIO_Init+0x1bc>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e006      	b.n	80029d2 <HAL_GPIO_Init+0x1ca>
 80029c4:	2307      	movs	r3, #7
 80029c6:	e004      	b.n	80029d2 <HAL_GPIO_Init+0x1ca>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x1ca>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_GPIO_Init+0x1ca>
 80029d0:	2300      	movs	r3, #0
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	f002 0203 	and.w	r2, r2, #3
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	4093      	lsls	r3, r2
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029e2:	4938      	ldr	r1, [pc, #224]	@ (8002ac4 <HAL_GPIO_Init+0x2bc>)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f0:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a14:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a3e:	4a25      	ldr	r2, [pc, #148]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a44:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a72:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad4 <HAL_GPIO_Init+0x2cc>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f aeb1 	bne.w	8002818 <HAL_GPIO_Init+0x10>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	48000400 	.word	0x48000400
 8002acc:	48000800 	.word	0x48000800
 8002ad0:	48001000 	.word	0x48001000
 8002ad4:	58000800 	.word	0x58000800

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_HSEM_IRQHandler+0x30>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <HAL_HSEM_IRQHandler+0x30>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4906      	ldr	r1, [pc, #24]	@ (8002b38 <HAL_HSEM_IRQHandler+0x30>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <HAL_HSEM_IRQHandler+0x30>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f807 	bl	8002b3c <HAL_HSEM_FreeCallback>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	58001500 	.word	0x58001500

08002b3c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01e      	beq.n	8002ba0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002b62:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <HAL_IPCC_Init+0x60>)
 8002b64:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff faa4 	bl	80020c0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002b78:	68b8      	ldr	r0, [r7, #8]
 8002b7a:	f000 f85b 	bl	8002c34 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f82c 	bl	8002be8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002b9e:	e001      	b.n	8002ba4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	58000c00 	.word	0x58000c00

08002bb4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e00f      	b.n	8002c16 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <IPCC_SetDefaultCallbacks+0x44>)
 8002c00:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3306      	adds	r3, #6
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a08      	ldr	r2, [pc, #32]	@ (8002c30 <IPCC_SetDefaultCallbacks+0x48>)
 8002c0e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d9ec      	bls.n	8002bf6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	08002bb5 	.word	0x08002bb5
 8002c30:	08002bcf 	.word	0x08002bcf

08002c34 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002c48:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	223f      	movs	r2, #63	@ 0x3f
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	58000400 	.word	0x58000400

08002c7c <LL_PWR_EnableSRAM2Retention>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8a:	6093      	str	r3, [r2, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	58000400 	.word	0x58000400

08002c9c <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002ca0:	f7ff ffec 	bl	8002c7c <LL_PWR_EnableSRAM2Retention>
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cba:	d101      	bne.n	8002cc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_HSE_Enable>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_HSE_Disable>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_HSE_IsReady>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d1a:	d101      	bne.n	8002d20 <LL_RCC_HSE_IsReady+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_RCC_HSE_IsReady+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_HSI_Enable>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_HSI_Disable>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_RCC_HSI_IsReady>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7a:	d101      	bne.n	8002d80 <LL_RCC_HSI_IsReady+0x18>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <LL_RCC_HSI_IsReady+0x1a>
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_RCC_HSI_SetCalibTrimming>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_RCC_LSE_Enable>:
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_LSE_Disable>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_LSE_EnableBypass>:
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_LSE_DisableBypass>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_LSE_IsReady>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d101      	bne.n	8002e56 <LL_RCC_LSE_IsReady+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_RCC_LSE_IsReady+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_RCC_LSI1_Enable>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_LSI1_Disable>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_RCC_LSI1_IsReady>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d101      	bne.n	8002ebe <LL_RCC_LSI1_IsReady+0x18>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_RCC_LSI1_IsReady+0x1a>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_RCC_LSI2_Enable>:
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_LSI2_Disable>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_LSI2_IsReady>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d101      	bne.n	8002f26 <LL_RCC_LSI2_IsReady+0x18>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_RCC_LSI2_IsReady+0x1a>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_LSI2_SetTrimming>:
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_MSI_Enable>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_MSI_Disable>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_MSI_IsReady>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d101      	bne.n	8002fb2 <LL_RCC_MSI_IsReady+0x16>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <LL_RCC_MSI_IsReady+0x18>
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_RCC_MSI_SetRange>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_RCC_MSI_GetRange>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2bb0      	cmp	r3, #176	@ 0xb0
 8002ffc:	d901      	bls.n	8003002 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002ffe:	23b0      	movs	r3, #176	@ 0xb0
 8003000:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003002:	687b      	ldr	r3, [r7, #4]
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_SetSysClkSource>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 0203 	bic.w	r2, r3, #3
 800304c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_RCC_GetSysClkSource>:
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_RCC_SetAHBPrescaler>:
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_SetAHB4Prescaler>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030de:	f023 020f 	bic.w	r2, r3, #15
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_SetAPB1Prescaler>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800310e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_SetAPB2Prescaler>:
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003136:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_RCC_GetAHBPrescaler>:
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_RCC_GetAHB4Prescaler>:
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_RCC_PLL_Enable>:
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_RCC_PLL_Disable>:
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031b0:	6013      	str	r3, [r2, #0]
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_RCC_PLL_IsReady>:
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ce:	d101      	bne.n	80031d4 <LL_RCC_PLL_IsReady+0x18>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <LL_RCC_PLL_IsReady+0x1a>
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_RCC_PLL_GetN>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_RCC_PLL_GetR>:
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_RCC_PLL_GetDivider>:
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_RCC_PLL_GetMainSource>:
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800322e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0303 	and.w	r3, r3, #3
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d101      	bne.n	800325a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800327a:	d101      	bne.n	8003280 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003294:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d101      	bne.n	80032a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c4:	d101      	bne.n	80032ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032e8:	d101      	bne.n	80032ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b08d      	sub	sp, #52	@ 0x34
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e324      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 808d 	beq.w	8003436 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331c:	f7ff fea1 	bl	8003062 <LL_RCC_GetSysClkSource>
 8003320:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003322:	f7ff ff82 	bl	800322a <LL_RCC_PLL_GetMainSource>
 8003326:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_RCC_OscConfig+0x3e>
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d147      	bne.n	80033c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	2b01      	cmp	r3, #1
 8003338:	d144      	bne.n	80033c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e308      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800334a:	f7ff fe4c 	bl	8002fe6 <LL_RCC_MSI_GetRange>
 800334e:	4603      	mov	r3, r0
 8003350:	429c      	cmp	r4, r3
 8003352:	d914      	bls.n	800337e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fcc5 	bl	8003ce8 <RCC_SetFlashLatencyFromMSIRange>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e2f7      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fe26 	bl	8002fbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fe4a 	bl	8003010 <LL_RCC_MSI_SetCalibTrimming>
 800337c:	e013      	b.n	80033a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fe1b 	bl	8002fbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fe3f 	bl	8003010 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fca6 	bl	8003ce8 <RCC_SetFlashLatencyFromMSIRange>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e2d8      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033a6:	f000 fc8b 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4aa4      	ldr	r2, [pc, #656]	@ (8003640 <HAL_RCC_OscConfig+0x344>)
 80033ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003644 <HAL_RCC_OscConfig+0x348>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fffb 	bl	80023b0 <HAL_InitTick>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d039      	beq.n	8003434 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e2c9      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033cc:	f7ff fdc8 	bl	8002f60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f83c 	bl	800244c <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d8:	f7ff f838 	bl	800244c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e2b6      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80033ea:	f7ff fdd7 	bl	8002f9c <LL_RCC_MSI_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f1      	beq.n	80033d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fde0 	bl	8002fbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fe04 	bl	8003010 <LL_RCC_MSI_SetCalibTrimming>
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800340a:	f7ff fdb8 	bl	8002f7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800340e:	f7ff f81d 	bl	800244c <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003416:	f7ff f819 	bl	800244c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e297      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003428:	f7ff fdb8 	bl	8002f9c <LL_RCC_MSI_IsReady>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f1      	bne.n	8003416 <HAL_RCC_OscConfig+0x11a>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003434:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d047      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003442:	f7ff fe0e 	bl	8003062 <LL_RCC_GetSysClkSource>
 8003446:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003448:	f7ff feef 	bl	800322a <LL_RCC_PLL_GetMainSource>
 800344c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d005      	beq.n	8003460 <HAL_RCC_OscConfig+0x164>
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d108      	bne.n	800346c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d134      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e275      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0x180>
 8003476:	f7ff fc29 	bl	8002ccc <LL_RCC_HSE_Enable>
 800347a:	e001      	b.n	8003480 <HAL_RCC_OscConfig+0x184>
 800347c:	f7ff fc35 	bl	8002cea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe ffe0 	bl	800244c <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe ffdc 	bl	800244c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e25a      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034a2:	f7ff fc31 	bl	8002d08 <LL_RCC_HSE_IsReady>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f1      	beq.n	8003490 <HAL_RCC_OscConfig+0x194>
 80034ac:	e011      	b.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe ffcd 	bl	800244c <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b6:	f7fe ffc9 	bl	800244c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	@ 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e247      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034c8:	f7ff fc1e 	bl	8002d08 <LL_RCC_HSE_IsReady>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f1      	bne.n	80034b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d04c      	beq.n	8003578 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	f7ff fdc0 	bl	8003062 <LL_RCC_GetSysClkSource>
 80034e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e4:	f7ff fea1 	bl	800322a <LL_RCC_PLL_GetMainSource>
 80034e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_OscConfig+0x200>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d10e      	bne.n	8003514 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e227      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fc3d 	bl	8002d8c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003512:	e031      	b.n	8003578 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d019      	beq.n	8003550 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	f7ff fc06 	bl	8002d2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe ff94 	bl	800244c <HAL_GetTick>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe ff90 	bl	800244c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e20e      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800353a:	f7ff fc15 	bl	8002d68 <LL_RCC_HSI_IsReady>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f1      	beq.n	8003528 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fc1f 	bl	8002d8c <LL_RCC_HSI_SetCalibTrimming>
 800354e:	e013      	b.n	8003578 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003550:	f7ff fbfb 	bl	8002d4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe ff7a 	bl	800244c <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fe ff76 	bl	800244c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1f4      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800356e:	f7ff fbfb 	bl	8002d68 <LL_RCC_HSI_IsReady>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f1      	bne.n	800355c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a3 	beq.w	80036d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d076      	beq.n	8003688 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d046      	beq.n	8003634 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035a6:	f7ff fc7e 	bl	8002ea6 <LL_RCC_LSI1_IsReady>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035b0:	f7ff fc57 	bl	8002e62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b4:	f7fe ff4a 	bl	800244c <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035bc:	f7fe ff46 	bl	800244c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1c4      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035ce:	f7ff fc6a 	bl	8002ea6 <LL_RCC_LSI1_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f1      	beq.n	80035bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80035d8:	f7ff fc77 	bl	8002eca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe ff36 	bl	800244c <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80035e4:	f7fe ff32 	bl	800244c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1b0      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035f6:	f7ff fc8a 	bl	8002f0e <LL_RCC_LSI2_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f1      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fc94 	bl	8002f32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800360a:	f7ff fc3b 	bl	8002e84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fe ff1d 	bl	800244c <HAL_GetTick>
 8003612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003616:	f7fe ff19 	bl	800244c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e197      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003628:	f7ff fc3d 	bl	8002ea6 <LL_RCC_LSI1_IsReady>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f1      	bne.n	8003616 <HAL_RCC_OscConfig+0x31a>
 8003632:	e051      	b.n	80036d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003634:	f7ff fc15 	bl	8002e62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe ff08 	bl	800244c <HAL_GetTick>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800363e:	e00c      	b.n	800365a <HAL_RCC_OscConfig+0x35e>
 8003640:	20000020 	.word	0x20000020
 8003644:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003648:	f7fe ff00 	bl	800244c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e17e      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800365a:	f7ff fc24 	bl	8002ea6 <LL_RCC_LSI1_IsReady>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f1      	beq.n	8003648 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003664:	f7ff fc42 	bl	8002eec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800366a:	f7fe feef 	bl	800244c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b03      	cmp	r3, #3
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e16d      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800367c:	f7ff fc47 	bl	8002f0e <LL_RCC_LSI2_IsReady>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f1      	bne.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003686:	e027      	b.n	80036d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003688:	f7ff fc30 	bl	8002eec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe fede 	bl	800244c <HAL_GetTick>
 8003690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003694:	f7fe feda 	bl	800244c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e158      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036a6:	f7ff fc32 	bl	8002f0e <LL_RCC_LSI2_IsReady>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f1      	bne.n	8003694 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036b0:	f7ff fbe8 	bl	8002e84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fe feca 	bl	800244c <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036bc:	f7fe fec6 	bl	800244c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e144      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036ce:	f7ff fbea 	bl	8002ea6 <LL_RCC_LSI1_IsReady>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f1      	bne.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d05b      	beq.n	800379c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003960 <HAL_RCC_OscConfig+0x664>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d114      	bne.n	800371a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036f0:	f7ff fab4 	bl	8002c5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f4:	f7fe feaa 	bl	800244c <HAL_GetTick>
 80036f8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fe fea6 	bl	800244c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e124      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800370e:	4b94      	ldr	r3, [pc, #592]	@ (8003960 <HAL_RCC_OscConfig+0x664>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_RCC_OscConfig+0x42c>
 8003722:	f7ff fb48 	bl	8002db6 <LL_RCC_LSE_Enable>
 8003726:	e00c      	b.n	8003742 <HAL_RCC_OscConfig+0x446>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b05      	cmp	r3, #5
 800372e:	d104      	bne.n	800373a <HAL_RCC_OscConfig+0x43e>
 8003730:	f7ff fb63 	bl	8002dfa <LL_RCC_LSE_EnableBypass>
 8003734:	f7ff fb3f 	bl	8002db6 <LL_RCC_LSE_Enable>
 8003738:	e003      	b.n	8003742 <HAL_RCC_OscConfig+0x446>
 800373a:	f7ff fb4d 	bl	8002dd8 <LL_RCC_LSE_Disable>
 800373e:	f7ff fb6d 	bl	8002e1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d014      	beq.n	8003774 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fe fe7f 	bl	800244c <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe fe7b 	bl	800244c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0f7      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003768:	f7ff fb69 	bl	8002e3e <LL_RCC_LSE_IsReady>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ef      	beq.n	8003752 <HAL_RCC_OscConfig+0x456>
 8003772:	e013      	b.n	800379c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe fe6a 	bl	800244c <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fe66 	bl	800244c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0e2      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003792:	f7ff fb54 	bl	8002e3e <LL_RCC_LSE_IsReady>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ef      	bne.n	800377c <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80d8 	beq.w	8003956 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a6:	f7ff fc5c 	bl	8003062 <LL_RCC_GetSysClkSource>
 80037aa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	f040 80a6 	bne.w	800390a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d123      	bne.n	8003814 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11c      	bne.n	8003814 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d114      	bne.n	8003814 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d054      	beq.n	80038be <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d04f      	beq.n	80038ba <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800381a:	f7ff fcc0 	bl	800319e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800381e:	f7fe fe15 	bl	800244c <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe fe11 	bl	800244c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e08f      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ef      	bne.n	8003826 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	4b45      	ldr	r3, [pc, #276]	@ (8003964 <HAL_RCC_OscConfig+0x668>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003858:	4311      	orrs	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800385e:	0212      	lsls	r2, r2, #8
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003872:	430a      	orrs	r2, r1
 8003874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003878:	4313      	orrs	r3, r2
 800387a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800387c:	f7ff fc80 	bl	8003180 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003890:	f7fe fddc 	bl	800244c <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe fdd8 	bl	800244c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e056      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ef      	beq.n	8003898 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b8:	e04d      	b.n	8003956 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e04c      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d144      	bne.n	8003956 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038cc:	f7ff fc58 	bl	8003180 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038e0:	f7fe fdb4 	bl	800244c <HAL_GetTick>
 80038e4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe fdb0 	bl	800244c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e02e      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ef      	beq.n	80038e8 <HAL_RCC_OscConfig+0x5ec>
 8003908:	e025      	b.n	8003956 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d020      	beq.n	8003952 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	f7ff fc45 	bl	800319e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fd9a 	bl	800244c <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fd96 	bl	800244c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e014      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ef      	bne.n	800391c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60d3      	str	r3, [r2, #12]
 8003950:	e001      	b.n	8003956 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3734      	adds	r7, #52	@ 0x34
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	58000400 	.word	0x58000400
 8003964:	11c1808c 	.word	0x11c1808c

08003968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e12d      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b98      	ldr	r3, [pc, #608]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d91b      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b95      	ldr	r3, [pc, #596]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	4993      	ldr	r1, [pc, #588]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fe fd57 	bl	800244c <HAL_GetTick>
 800399e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039a2:	f7fe fd53 	bl	800244c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e111      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b4:	4b8a      	ldr	r3, [pc, #552]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d1ef      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fb51 	bl	800307a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fd38 	bl	800244c <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039e0:	f7fe fd34 	bl	800244c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0f2      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039f2:	f7ff fc26 	bl	8003242 <LL_RCC_IsActiveFlag_HPRE>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f1      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d016      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fb48 	bl	80030a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a12:	f7fe fd1b 	bl	800244c <HAL_GetTick>
 8003a16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a1a:	f7fe fd17 	bl	800244c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0d5      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a2c:	f7ff fc1b 	bl	8003266 <LL_RCC_IsActiveFlag_C2HPRE>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f1      	beq.n	8003a1a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fb41 	bl	80030ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a4c:	f7fe fcfe 	bl	800244c <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a54:	f7fe fcfa 	bl	800244c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0b8      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a66:	f7ff fc11 	bl	800328c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f1      	beq.n	8003a54 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d016      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fb3b 	bl	80030fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a86:	f7fe fce1 	bl	800244c <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a8e:	f7fe fcdd 	bl	800244c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e09b      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003aa0:	f7ff fc07 	bl	80032b2 <LL_RCC_IsActiveFlag_PPRE1>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f1      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d017      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fb31 	bl	8003124 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ac2:	f7fe fcc3 	bl	800244c <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aca:	f7fe fcbf 	bl	800244c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e07d      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003adc:	f7ff fbfb 	bl	80032d6 <LL_RCC_IsActiveFlag_PPRE2>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f1      	beq.n	8003aca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d043      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003afa:	f7ff f905 	bl	8002d08 <LL_RCC_HSE_IsReady>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11e      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e067      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b10:	f7ff fb54 	bl	80031bc <LL_RCC_PLL_IsReady>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d113      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e05c      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b26:	f7ff fa39 	bl	8002f9c <LL_RCC_MSI_IsReady>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d108      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e051      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b34:	f7ff f918 	bl	8002d68 <LL_RCC_HSI_IsReady>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e04a      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fa77 	bl	800303a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fe fc7e 	bl	800244c <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b54:	f7fe fc7a 	bl	800244c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e036      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	f7ff fa7a 	bl	8003062 <LL_RCC_GetSysClkSource>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d1ec      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7a:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d21b      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b88:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	4913      	ldr	r1, [pc, #76]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7fe fc58 	bl	800244c <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ba0:	f7fe fc54 	bl	800244c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e012      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_ClockConfig+0x278>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1ef      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bc0:	f000 f87e 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4a07      	ldr	r2, [pc, #28]	@ (8003be4 <HAL_RCC_ClockConfig+0x27c>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003bca:	f7fe fc4b 	bl	8002464 <HAL_GetTickPrio>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fbed 	bl	80023b0 <HAL_InitTick>
 8003bd6:	4603      	mov	r3, r0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	58004000 	.word	0x58004000
 8003be4:	20000020 	.word	0x20000020

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bee:	f7ff fa38 	bl	8003062 <LL_RCC_GetSysClkSource>
 8003bf2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003bfa:	f7ff f9f4 	bl	8002fe6 <LL_RCC_MSI_GetRange>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e04b      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c16:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e045      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d10a      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c22:	f7ff f841 	bl	8002ca8 <LL_RCC_HSE_IsEnabledDiv2>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c2c:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e03a      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c32:	4b22      	ldr	r3, [pc, #136]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e037      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c38:	f7ff faf7 	bl	800322a <LL_RCC_PLL_GetMainSource>
 8003c3c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d003      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x64>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x6a>
 8003c4a:	e00d      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c4e:	60bb      	str	r3, [r7, #8]
        break;
 8003c50:	e015      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c52:	f7ff f829 	bl	8002ca8 <LL_RCC_HSE_IsEnabledDiv2>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c5c:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c5e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c60:	e00d      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c64:	60bb      	str	r3, [r7, #8]
        break;
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c68:	f7ff f9bd 	bl	8002fe6 <LL_RCC_MSI_GetRange>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7a:	60bb      	str	r3, [r7, #8]
        break;
 8003c7c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003c7e:	f7ff faaf 	bl	80031e0 <LL_RCC_PLL_GetN>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	fb03 f402 	mul.w	r4, r3, r2
 8003c8a:	f7ff fac2 	bl	8003212 <LL_RCC_PLL_GetDivider>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	3301      	adds	r3, #1
 8003c94:	fbb4 f4f3 	udiv	r4, r4, r3
 8003c98:	f7ff faaf 	bl	80031fa <LL_RCC_PLL_GetR>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	0f5b      	lsrs	r3, r3, #29
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ca6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd90      	pop	{r4, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08009334 	.word	0x08009334
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	01e84800 	.word	0x01e84800

08003cc0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b598      	push	{r3, r4, r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003cc4:	f7ff ff90 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003cc8:	4604      	mov	r4, r0
 8003cca:	f7ff fa3f 	bl	800314c <LL_RCC_GetAHBPrescaler>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	4a03      	ldr	r2, [pc, #12]	@ (8003ce4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd98      	pop	{r3, r4, r7, pc}
 8003ce4:	080092f4 	.word	0x080092f4

08003ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2bb0      	cmp	r3, #176	@ 0xb0
 8003cf4:	d903      	bls.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003cf6:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e007      	b.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	4a10      	ldr	r2, [pc, #64]	@ (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d0e:	f7ff fa29 	bl	8003164 <LL_RCC_GetAHB4Prescaler>
 8003d12:	4603      	mov	r3, r0
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	0c9b      	lsrs	r3, r3, #18
 8003d32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f80c 	bl	8003d54 <RCC_SetFlashLatency>
 8003d3c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	08009334 	.word	0x08009334
 8003d4c:	080092f4 	.word	0x080092f4
 8003d50:	431bde83 	.word	0x431bde83

08003d54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b08f      	sub	sp, #60	@ 0x3c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003d5e:	4b24      	ldr	r3, [pc, #144]	@ (8003df0 <RCC_SetFlashLatency+0x9c>)
 8003d60:	f107 041c 	add.w	r4, r7, #28
 8003d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003d6a:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <RCC_SetFlashLatency+0xa0>)
 8003d6c:	f107 040c 	add.w	r4, r7, #12
 8003d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7e:	e013      	b.n	8003da8 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3338      	adds	r3, #56	@ 0x38
 8003d86:	443b      	add	r3, r7
 8003d88:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d807      	bhi.n	8003da2 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	3338      	adds	r3, #56	@ 0x38
 8003d98:	443b      	add	r3, r7
 8003d9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003d9e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003da0:	e005      	b.n	8003dae <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	3301      	adds	r3, #1
 8003da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d9e8      	bls.n	8003d80 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <RCC_SetFlashLatency+0xa4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4910      	ldr	r1, [pc, #64]	@ (8003df8 <RCC_SetFlashLatency+0xa4>)
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dbe:	f7fe fb45 	bl	800244c <HAL_GetTick>
 8003dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dc4:	e008      	b.n	8003dd8 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dc6:	f7fe fb41 	bl	800244c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e007      	b.n	8003de8 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dd8:	4b07      	ldr	r3, [pc, #28]	@ (8003df8 <RCC_SetFlashLatency+0xa4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d1ef      	bne.n	8003dc6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	373c      	adds	r7, #60	@ 0x3c
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd90      	pop	{r4, r7, pc}
 8003df0:	08009144 	.word	0x08009144
 8003df4:	08009154 	.word	0x08009154
 8003df8:	58004000 	.word	0x58004000

08003dfc <LL_RCC_LSE_IsEnabled>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <LL_RCC_LSE_IsEnabled+0x18>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <LL_RCC_LSE_IsEnabled+0x1a>
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_RCC_LSE_IsReady>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d101      	bne.n	8003e38 <LL_RCC_LSE_IsReady+0x18>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <LL_RCC_LSE_IsReady+0x1a>
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_SetRFWKPClockSource>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_RCC_SetSMPSClockSource>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_SetSMPSPrescaler>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_SetUSARTClockSource>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_SetLPUARTClockSource>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_RCC_SetI2CClockSource>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f24:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_SetLPTIMClockSource>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_RCC_SetRNGClockSource>:
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_RCC_SetCLK48ClockSource>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_RCC_SetADCClockSource>:
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_SetRTCClockSource>:
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800401e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_RCC_GetRTCClockSource>:
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_ForceBackupDomainReset>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040a0:	2300      	movs	r3, #0
 80040a2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d046      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80040b0:	f7ff ffc1 	bl	8004036 <LL_RCC_GetRTCClockSource>
 80040b4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d03c      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040c0:	f7fe fdcc 	bl	8002c5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff9b 	bl	800400a <LL_RCC_SetRTCClockSource>
 80040d4:	e02e      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040e0:	f7ff ffb6 	bl	8004050 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040e4:	f7ff ffc5 	bl	8004072 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004100:	f7ff fe7c 	bl	8003dfc <LL_RCC_LSE_IsEnabled>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d114      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800410a:	f7fe f99f 	bl	800244c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004110:	e00b      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fe f99b 	bl	800244c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d902      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	77fb      	strb	r3, [r7, #31]
              break;
 8004128:	e004      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800412a:	f7ff fe79 	bl	8003e20 <LL_RCC_LSE_IsReady>
 800412e:	4603      	mov	r3, r0
 8004130:	2b01      	cmp	r3, #1
 8004132:	d1ee      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004134:	7ffb      	ldrb	r3, [r7, #31]
 8004136:	77bb      	strb	r3, [r7, #30]
 8004138:	e001      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff feb6 	bl	8003ec0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fec1 	bl	8003eec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fee9 	bl	8003f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fede 	bl	8003f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff feb6 	bl	8003f18 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c0:	d008      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041ca:	d003      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fed4 	bl	8003f86 <LL_RCC_SetRNGClockSource>
 80041de:	e00a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7ff fecb 	bl	8003f86 <LL_RCC_SetRNGClockSource>
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff fede 	bl	8003fb2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041fe:	d107      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800420a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800420e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d011      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fedc 	bl	8003fde <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800422e:	d107      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800423a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423e:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fdf7 	bl	8003e44 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fe16 	bl	8003e98 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fdfd 	bl	8003e70 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004276:	7fbb      	ldrb	r3, [r7, #30]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e077      	b.n	8004386 <HAL_RTC_Init+0x106>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd ff2c 	bl	8002108 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d055      	beq.n	8004372 <HAL_RTC_Init+0xf2>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	22ca      	movs	r2, #202	@ 0xca
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2253      	movs	r2, #83	@ 0x53
 80042d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f880 	bl	80043dc <RTC_EnterInitMode>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d12c      	bne.n	8004340 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6899      	ldr	r1, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68d2      	ldr	r2, [r2, #12]
 8004320:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6919      	ldr	r1, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	041a      	lsls	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f888 	bl	800444c <RTC_ExitInitMode>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d110      	bne.n	8004368 <HAL_RTC_Init+0xe8>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_REMAP_POS1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0202 	bic.w	r2, r2, #2
 8004354:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	22ff      	movs	r2, #255	@ 0xff
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004370:	e001      	b.n	8004376 <HAL_RTC_Init+0xf6>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_RTC_Init+0x104>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0d      	ldr	r2, [pc, #52]	@ (80043d8 <HAL_RTC_WaitForSynchro+0x48>)
 80043a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043a4:	f7fe f852 	bl	800244c <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043aa:	e009      	b.n	80043c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043ac:	f7fe f84e 	bl	800244c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043ba:	d901      	bls.n	80043c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e007      	b.n	80043d0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ee      	beq.n	80043ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	00015f5f 	.word	0x00015f5f

080043dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d123      	bne.n	8004442 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004408:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800440a:	f7fe f81f 	bl	800244c <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004410:	e00d      	b.n	800442e <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004412:	f7fe f81b 	bl	800244c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004420:	d905      	bls.n	800442e <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <RTC_EnterInitMode+0x66>
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d1e7      	bne.n	8004412 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004466:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ff8a 	bl	8004390 <HAL_RTC_WaitForSynchro>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80044a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004624 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004628 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0adb      	lsrs	r3, r3, #11
 80044b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0a7      	b.n	8004618 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	22ca      	movs	r2, #202	@ 0xca
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2253      	movs	r2, #83	@ 0x53
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01a      	beq.n	800452c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	22ff      	movs	r2, #255	@ 0xff
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e07c      	b.n	8004618 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e4      	bne.n	80044f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800454c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800454e:	4b35      	ldr	r3, [pc, #212]	@ (8004624 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a35      	ldr	r2, [pc, #212]	@ (8004628 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	0adb      	lsrs	r3, r3, #11
 800455a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3b01      	subs	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	22ff      	movs	r2, #255	@ 0xff
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e045      	b.n	8004618 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0e4      	beq.n	8004564 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0207 	bic.w	r2, r2, #7
 80045a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6899      	ldr	r1, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80045c2:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c8:	4a18      	ldr	r2, [pc, #96]	@ (800462c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80045ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a15      	ldr	r2, [pc, #84]	@ (800462c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80045d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ec:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045fc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	20000020 	.word	0x20000020
 8004628:	10624dd3 	.word	0x10624dd3
 800462c:	58000800 	.word	0x58000800

08004630 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8004646:	2302      	movs	r3, #2
 8004648:	e04d      	b.n	80046e6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	22ca      	movs	r2, #202	@ 0xca
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2253      	movs	r2, #83	@ 0x53
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004678:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004688:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800468a:	f7fd fedf 	bl	800244c <HAL_GetTick>
 800468e:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004690:	e015      	b.n	80046be <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004692:	f7fd fedb 	bl	800244c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046a0:	d90d      	bls.n	80046be <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	22ff      	movs	r2, #255	@ 0xff
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2203      	movs	r2, #3
 80046ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e013      	b.n	80046e6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb6>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0e2      	beq.n	8004692 <HAL_RTCEx_DeactivateWakeUpTimer+0x62>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	22ff      	movs	r2, #255	@ 0xff
 80046d2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e095      	b.n	800482c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d108      	bne.n	800471a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004710:	d009      	beq.n	8004726 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	61da      	str	r2, [r3, #28]
 8004718:	e005      	b.n	8004726 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fd fd15 	bl	8002170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800475c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004766:	d902      	bls.n	800476e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e002      	b.n	8004774 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800476e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800477c:	d007      	beq.n	800478e <HAL_SPI_Init+0xa0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004786:	d002      	beq.n	800478e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d0:	ea42 0103 	orr.w	r1, r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	f003 0204 	and.w	r2, r3, #4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800480a:	ea42 0103 	orr.w	r1, r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004844:	f7fd fe02 	bl	800244c <HAL_GetTick>
 8004848:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
 800485c:	e15c      	b.n	8004b18 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_SPI_Transmit+0x36>
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e154      	b.n	8004b18 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_SPI_Transmit+0x48>
 8004878:	2302      	movs	r3, #2
 800487a:	e14d      	b.n	8004b18 <HAL_SPI_Transmit+0x2e4>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2203      	movs	r2, #3
 8004888:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ce:	d10f      	bne.n	80048f0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d007      	beq.n	800490e <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004916:	d952      	bls.n	80049be <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_Transmit+0xf2>
 8004920:	8b7b      	ldrh	r3, [r7, #26]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d145      	bne.n	80049b2 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800494a:	e032      	b.n	80049b2 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d112      	bne.n	8004980 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800497e:	e018      	b.n	80049b2 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004980:	f7fd fd64 	bl	800244c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d803      	bhi.n	8004998 <HAL_SPI_Transmit+0x164>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d102      	bne.n	800499e <HAL_SPI_Transmit+0x16a>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0b2      	b.n	8004b18 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1c7      	bne.n	800494c <HAL_SPI_Transmit+0x118>
 80049bc:	e083      	b.n	8004ac6 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SPI_Transmit+0x198>
 80049c6:	8b7b      	ldrh	r3, [r7, #26]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d177      	bne.n	8004abc <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d912      	bls.n	80049fc <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	881a      	ldrh	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	1c9a      	adds	r2, r3, #2
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b02      	subs	r3, #2
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049fa:	e05f      	b.n	8004abc <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a22:	e04b      	b.n	8004abc <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d12b      	bne.n	8004a8a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d912      	bls.n	8004a62 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	881a      	ldrh	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	1c9a      	adds	r2, r3, #2
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b02      	subs	r3, #2
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a60:	e02c      	b.n	8004abc <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a88:	e018      	b.n	8004abc <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a8a:	f7fd fcdf 	bl	800244c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_Transmit+0x26e>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_Transmit+0x274>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e02d      	b.n	8004b18 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ae      	bne.n	8004a24 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fcf6 	bl	80054bc <SPI_EndRxTxTransaction>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e123      	b.n	8004d88 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_SPI_Receive+0x2c>
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e11b      	b.n	8004d88 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b58:	d112      	bne.n	8004b80 <HAL_SPI_Receive+0x60>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2204      	movs	r2, #4
 8004b66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f90a 	bl	8004d90 <HAL_SPI_TransmitReceive>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	e103      	b.n	8004d88 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b80:	f7fd fc64 	bl	800244c <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_SPI_Receive+0x74>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e0f9      	b.n	8004d88 <HAL_SPI_Receive+0x268>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	88fa      	ldrh	r2, [r7, #6]
 8004bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be6:	d908      	bls.n	8004bfa <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	e007      	b.n	8004c0a <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c08:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c12:	d10f      	bne.n	8004c34 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3e:	2b40      	cmp	r3, #64	@ 0x40
 8004c40:	d007      	beq.n	8004c52 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c5a:	d875      	bhi.n	8004d48 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c5c:	e037      	b.n	8004cce <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d117      	bne.n	8004c9c <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f103 020c 	add.w	r2, r3, #12
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	7812      	ldrb	r2, [r2, #0]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004c9a:	e018      	b.n	8004cce <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9c:	f7fd fbd6 	bl	800244c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d803      	bhi.n	8004cb4 <HAL_SPI_Receive+0x194>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_Receive+0x19a>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e05c      	b.n	8004d88 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1c1      	bne.n	8004c5e <HAL_SPI_Receive+0x13e>
 8004cda:	e03b      	b.n	8004d54 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d115      	bne.n	8004d16 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	1c9a      	adds	r2, r3, #2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004d14:	e018      	b.n	8004d48 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d16:	f7fd fb99 	bl	800244c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d803      	bhi.n	8004d2e <HAL_SPI_Receive+0x20e>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d102      	bne.n	8004d34 <HAL_SPI_Receive+0x214>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e01f      	b.n	8004d88 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1c3      	bne.n	8004cdc <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fb57 	bl	800540c <SPI_EndRxTransaction>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da2:	f7fd fb53 	bl	800244c <HAL_GetTick>
 8004da6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004dae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dbe:	7ffb      	ldrb	r3, [r7, #31]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d00c      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x4e>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dca:	d106      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x4a>
 8004dd4:	7ffb      	ldrb	r3, [r7, #31]
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d001      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e1f3      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_SPI_TransmitReceive+0x60>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_TransmitReceive+0x60>
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e1e8      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x72>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e1e1      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d003      	beq.n	8004e1e <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2205      	movs	r2, #5
 8004e1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	887a      	ldrh	r2, [r7, #2]
 8004e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	887a      	ldrh	r2, [r7, #2]
 8004e36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	887a      	ldrh	r2, [r7, #2]
 8004e4a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e60:	d802      	bhi.n	8004e68 <HAL_SPI_TransmitReceive+0xd8>
 8004e62:	8abb      	ldrh	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d908      	bls.n	8004e7a <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e76:	605a      	str	r2, [r3, #4]
 8004e78:	e007      	b.n	8004e8a <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d007      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004eb0:	f240 8083 	bls.w	8004fba <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x132>
 8004ebc:	8afb      	ldrh	r3, [r7, #22]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d16f      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee6:	e05c      	b.n	8004fa2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d11b      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x19e>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d016      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x19e>
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d113      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d11c      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x1e6>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d016      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	b292      	uxth	r2, r2
 8004f54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f72:	2301      	movs	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f76:	f7fd fa69 	bl	800244c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d80d      	bhi.n	8004fa2 <HAL_SPI_TransmitReceive+0x212>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d009      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e111      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d19d      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x158>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d197      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x158>
 8004fb8:	e0e5      	b.n	8005186 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x23a>
 8004fc2:	8afb      	ldrh	r3, [r7, #22]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	f040 80d1 	bne.w	800516c <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d912      	bls.n	8004ffa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	881a      	ldrh	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	1c9a      	adds	r2, r3, #2
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b02      	subs	r3, #2
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ff8:	e0b8      	b.n	800516c <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005020:	e0a4      	b.n	800516c <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d134      	bne.n	800509a <HAL_SPI_TransmitReceive+0x30a>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02f      	beq.n	800509a <HAL_SPI_TransmitReceive+0x30a>
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	2b01      	cmp	r3, #1
 800503e:	d12c      	bne.n	800509a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d912      	bls.n	8005070 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	881a      	ldrh	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505a:	1c9a      	adds	r2, r3, #2
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b02      	subs	r3, #2
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800506e:	e012      	b.n	8005096 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d148      	bne.n	800513a <HAL_SPI_TransmitReceive+0x3aa>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d042      	beq.n	800513a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d923      	bls.n	8005108 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	b292      	uxth	r2, r2
 80050cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b02      	subs	r3, #2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d81f      	bhi.n	8005136 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e016      	b.n	8005136 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f103 020c 	add.w	r2, r3, #12
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005136:	2301      	movs	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800513a:	f7fd f987 	bl	800244c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005146:	429a      	cmp	r2, r3
 8005148:	d803      	bhi.n	8005152 <HAL_SPI_TransmitReceive+0x3c2>
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d102      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x3c8>
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e02c      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	f47f af55 	bne.w	8005022 <HAL_SPI_TransmitReceive+0x292>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	f47f af4e 	bne.w	8005022 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005186:	6a3a      	ldr	r2, [r7, #32]
 8005188:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f996 	bl	80054bc <SPI_EndRxTxTransaction>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e00e      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3728      	adds	r7, #40	@ 0x28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e0:	f7fd f934 	bl	800244c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f0:	f7fd f92c 	bl	800244c <HAL_GetTick>
 80051f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051f6:	4b39      	ldr	r3, [pc, #228]	@ (80052dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	015b      	lsls	r3, r3, #5
 80051fc:	0d1b      	lsrs	r3, r3, #20
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005206:	e054      	b.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d050      	beq.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005210:	f7fd f91c 	bl	800244c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d902      	bls.n	8005226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d13d      	bne.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800523e:	d111      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005248:	d004      	beq.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005252:	d107      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526c:	d10f      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800528c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e017      	b.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d19b      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000020 	.word	0x20000020

080052e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	@ 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052f2:	f7fd f8ab 	bl	800244c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005302:	f7fd f8a3 	bl	800244c <HAL_GetTick>
 8005306:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005310:	4b3d      	ldr	r3, [pc, #244]	@ (8005408 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	00da      	lsls	r2, r3, #3
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	0d1b      	lsrs	r3, r3, #20
 8005320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005328:	e060      	b.n	80053ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005330:	d107      	bne.n	8005342 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005340:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d050      	beq.n	80053ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800534a:	f7fd f87f 	bl	800244c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005356:	429a      	cmp	r2, r3
 8005358:	d902      	bls.n	8005360 <SPI_WaitFifoStateUntilTimeout+0x80>
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d13d      	bne.n	80053dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800536e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005378:	d111      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005382:	d004      	beq.n	800538e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538c:	d107      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a6:	d10f      	bne.n	80053c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e010      	b.n	80053fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d196      	bne.n	800532a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3728      	adds	r7, #40	@ 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000020 	.word	0x20000020

0800540c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005420:	d111      	bne.n	8005446 <SPI_EndRxTransaction+0x3a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542a:	d004      	beq.n	8005436 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005434:	d107      	bne.n	8005446 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	@ 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff febd 	bl	80051d0 <SPI_WaitFlagStateUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e023      	b.n	80054b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005474:	d11d      	bne.n	80054b2 <SPI_EndRxTransaction+0xa6>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547e:	d004      	beq.n	800548a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005488:	d113      	bne.n	80054b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ff22 	bl	80052e0 <SPI_WaitFifoStateUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a6:	f043 0220 	orr.w	r2, r3, #32
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e000      	b.n	80054b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff ff03 	bl	80052e0 <SPI_WaitFifoStateUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e027      	b.n	8005540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	2180      	movs	r1, #128	@ 0x80
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff fe68 	bl	80051d0 <SPI_WaitFlagStateUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e014      	b.n	8005540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff fedc 	bl	80052e0 <SPI_WaitFifoStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e000      	b.n	8005540 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	2218      	movs	r2, #24
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f001 f9ec 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005560:	233f      	movs	r3, #63	@ 0x3f
 8005562:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005564:	2381      	movs	r3, #129	@ 0x81
 8005566:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005568:	1dfb      	adds	r3, r7, #7
 800556a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800556c:	2301      	movs	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005570:	f107 0308 	add.w	r3, r7, #8
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fc68 	bl	8006e4c <hci_send_req>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	da01      	bge.n	8005586 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005582:	23ff      	movs	r3, #255	@ 0xff
 8005584:	e000      	b.n	8005588 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005586:	79fb      	ldrb	r3, [r7, #7]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b0ce      	sub	sp, #312	@ 0x138
 8005594:	af00      	add	r7, sp, #0
 8005596:	4605      	mov	r5, r0
 8005598:	460c      	mov	r4, r1
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055a2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80055a6:	462a      	mov	r2, r5
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80055b2:	4622      	mov	r2, r4
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055ba:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80055be:	4602      	mov	r2, r0
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055c6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80055ca:	460a      	mov	r2, r1
 80055cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80055ce:	f107 0310 	add.w	r3, r7, #16
 80055d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80055d6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80055da:	3308      	adds	r3, #8
 80055dc:	f107 0210 	add.w	r2, r7, #16
 80055e0:	4413      	add	r3, r2
 80055e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80055e6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80055ea:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80055ee:	4413      	add	r3, r2
 80055f0:	3309      	adds	r3, #9
 80055f2:	f107 0210 	add.w	r2, r7, #16
 80055f6:	4413      	add	r3, r2
 80055f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80055fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005600:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800560e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005612:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005616:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800561e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005622:	3301      	adds	r3, #1
 8005624:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005628:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800562c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005630:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800563a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800563e:	3302      	adds	r3, #2
 8005640:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005644:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005648:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800564c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005656:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800565a:	3302      	adds	r3, #2
 800565c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005660:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005664:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005668:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005670:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005674:	3301      	adds	r3, #1
 8005676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800567a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800567e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005682:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005684:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005688:	3301      	adds	r3, #1
 800568a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800568e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005692:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005696:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005698:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80056a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80056a6:	3308      	adds	r3, #8
 80056a8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80056ac:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 f931 	bl	8006918 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80056b6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80056ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80056be:	4413      	add	r3, r2
 80056c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80056c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80056c8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80056cc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80056ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056d2:	3301      	adds	r3, #1
 80056d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80056d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80056dc:	3301      	adds	r3, #1
 80056de:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80056e2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 f916 	bl	8006918 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80056ec:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80056f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80056f4:	4413      	add	r3, r2
 80056f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80056fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056fe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005702:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005704:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005708:	3302      	adds	r3, #2
 800570a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800570e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005712:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005716:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005718:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800571c:	3302      	adds	r3, #2
 800571e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005726:	2218      	movs	r2, #24
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f904 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005730:	233f      	movs	r3, #63	@ 0x3f
 8005732:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005736:	2383      	movs	r3, #131	@ 0x83
 8005738:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005744:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005748:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800574c:	f107 030f 	add.w	r3, r7, #15
 8005750:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005754:	2301      	movs	r3, #1
 8005756:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800575a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fb73 	bl	8006e4c <hci_send_req>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	da01      	bge.n	8005770 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800576c:	23ff      	movs	r3, #255	@ 0xff
 800576e:	e004      	b.n	800577a <aci_gap_set_discoverable+0x1ea>
  return status;
 8005770:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005774:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005778:	781b      	ldrb	r3, [r3, #0]
}
 800577a:	4618      	mov	r0, r3
 800577c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005780:	46bd      	mov	sp, r7
 8005782:	bdb0      	pop	{r4, r5, r7, pc}

08005784 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b0cc      	sub	sp, #304	@ 0x130
 8005788:	af00      	add	r7, sp, #0
 800578a:	4602      	mov	r2, r0
 800578c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005790:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005794:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800579e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80057b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057c4:	3301      	adds	r3, #1
 80057c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057ce:	2218      	movs	r2, #24
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 f8b0 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 80057d8:	233f      	movs	r3, #63	@ 0x3f
 80057da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80057de:	2385      	movs	r3, #133	@ 0x85
 80057e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80057f4:	f107 030f 	add.w	r3, r7, #15
 80057f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fb1f 	bl	8006e4c <hci_send_req>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	da01      	bge.n	8005818 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005814:	23ff      	movs	r3, #255	@ 0xff
 8005816:	e004      	b.n	8005822 <aci_gap_set_io_capability+0x9e>
  return status;
 8005818:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800581c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005820:	781b      	ldrb	r3, [r3, #0]
}
 8005822:	4618      	mov	r0, r3
 8005824:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800582c:	b5b0      	push	{r4, r5, r7, lr}
 800582e:	b0cc      	sub	sp, #304	@ 0x130
 8005830:	af00      	add	r7, sp, #0
 8005832:	4605      	mov	r5, r0
 8005834:	460c      	mov	r4, r1
 8005836:	4610      	mov	r0, r2
 8005838:	4619      	mov	r1, r3
 800583a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800583e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005842:	462a      	mov	r2, r5
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800584a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800584e:	4622      	mov	r2, r4
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005856:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800585a:	4602      	mov	r2, r0
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005862:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005866:	460a      	mov	r2, r1
 8005868:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800586a:	f107 0310 	add.w	r3, r7, #16
 800586e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005876:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005884:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005888:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800588c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005894:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005898:	3301      	adds	r3, #1
 800589a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800589e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058a6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80058ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058b2:	3301      	adds	r3, #1
 80058b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80058b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058c0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80058c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058cc:	3301      	adds	r3, #1
 80058ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058da:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80058e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058e6:	3301      	adds	r3, #1
 80058e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80058ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058f0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80058f4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80058f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058fa:	3301      	adds	r3, #1
 80058fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005900:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005904:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005908:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800590a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800590e:	3301      	adds	r3, #1
 8005910:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005918:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800591c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800591e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005922:	3301      	adds	r3, #1
 8005924:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800592c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005930:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005934:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005938:	3304      	adds	r3, #4
 800593a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800593e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005942:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005946:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005948:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800594c:	3301      	adds	r3, #1
 800594e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005952:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005956:	2218      	movs	r2, #24
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ffec 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005960:	233f      	movs	r3, #63	@ 0x3f
 8005962:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005966:	2386      	movs	r3, #134	@ 0x86
 8005968:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800596c:	f107 0310 	add.w	r3, r7, #16
 8005970:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005974:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005978:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800597c:	f107 030f 	add.w	r3, r7, #15
 8005980:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005984:	2301      	movs	r3, #1
 8005986:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800598a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fa5b 	bl	8006e4c <hci_send_req>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	da01      	bge.n	80059a0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800599c:	23ff      	movs	r3, #255	@ 0xff
 800599e:	e004      	b.n	80059aa <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80059a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80059a8:	781b      	ldrb	r3, [r3, #0]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bdb0      	pop	{r4, r5, r7, pc}

080059b4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b0cc      	sub	sp, #304	@ 0x130
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4602      	mov	r2, r0
 80059bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059c4:	6019      	str	r1, [r3, #0]
 80059c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80059ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80059d0:	f107 0310 	add.w	r3, r7, #16
 80059d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80059d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80059f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80059fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059fe:	3302      	adds	r3, #2
 8005a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a0c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a24:	2218      	movs	r2, #24
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 ff85 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a2e:	233f      	movs	r3, #63	@ 0x3f
 8005a30:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005a34:	2388      	movs	r3, #136	@ 0x88
 8005a36:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a3a:	f107 0310 	add.w	r3, r7, #16
 8005a3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a4a:	f107 030f 	add.w	r3, r7, #15
 8005a4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f9f4 	bl	8006e4c <hci_send_req>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da01      	bge.n	8005a6e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005a6a:	23ff      	movs	r3, #255	@ 0xff
 8005a6c:	e004      	b.n	8005a78 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a76:	781b      	ldrb	r3, [r3, #0]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005a82:	b590      	push	{r4, r7, lr}
 8005a84:	b0cd      	sub	sp, #308	@ 0x134
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	4604      	mov	r4, r0
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a92:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a9c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005aa8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005aac:	4602      	mov	r2, r0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ab4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005ab8:	460a      	mov	r2, r1
 8005aba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005abc:	f107 0310 	add.w	r3, r7, #16
 8005ac0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	2207      	movs	r2, #7
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ff33 	bl	8006938 <Osal_MemSet>
  int index_input = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005adc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ae0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005ae4:	7812      	ldrb	r2, [r2, #0]
 8005ae6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005aec:	3301      	adds	r3, #1
 8005aee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005af6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005afa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b06:	3301      	adds	r3, #1
 8005b08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b14:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b20:	3301      	adds	r3, #1
 8005b22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b2a:	2218      	movs	r2, #24
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 ff02 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b34:	233f      	movs	r3, #63	@ 0x3f
 8005b36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005b3a:	238a      	movs	r3, #138	@ 0x8a
 8005b3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005b50:	f107 0308 	add.w	r3, r7, #8
 8005b54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005b58:	2307      	movs	r3, #7
 8005b5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 f971 	bl	8006e4c <hci_send_req>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da01      	bge.n	8005b74 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005b70:	23ff      	movs	r3, #255	@ 0xff
 8005b72:	e02e      	b.n	8005bd2 <aci_gap_init+0x150>
  if ( resp.Status )
 8005b74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b78:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <aci_gap_init+0x10c>
    return resp.Status;
 8005b82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b86:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	e021      	b.n	8005bd2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005b8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005b96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005ba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bb0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005bba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005bbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bc0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bc4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005bce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd90      	pop	{r4, r7, pc}

08005bdc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b0cc      	sub	sp, #304	@ 0x130
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4602      	mov	r2, r0
 8005be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005be8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005bec:	6019      	str	r1, [r3, #0]
 8005bee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bf2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005bf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005bf8:	f107 0310 	add.w	r3, r7, #16
 8005bfc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005c00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c04:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c1a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c26:	3301      	adds	r3, #1
 8005c28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c30:	1c58      	adds	r0, r3, #1
 8005c32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c36:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c44:	6819      	ldr	r1, [r3, #0]
 8005c46:	f000 fe67 	bl	8006918 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005c4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c4e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005c58:	4413      	add	r3, r2
 8005c5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c62:	2218      	movs	r2, #24
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fe66 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c6c:	233f      	movs	r3, #63	@ 0x3f
 8005c6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005c72:	238e      	movs	r3, #142	@ 0x8e
 8005c74:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005c78:	f107 0310 	add.w	r3, r7, #16
 8005c7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005c88:	f107 030f 	add.w	r3, r7, #15
 8005c8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 f8d5 	bl	8006e4c <hci_send_req>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da01      	bge.n	8005cac <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005ca8:	23ff      	movs	r3, #255	@ 0xff
 8005caa:	e004      	b.n	8005cb6 <aci_gap_update_adv_data+0xda>
  return status;
 8005cac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cb0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005cb4:	781b      	ldrb	r3, [r3, #0]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	2218      	movs	r2, #24
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fe30 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cd8:	233f      	movs	r3, #63	@ 0x3f
 8005cda:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005cdc:	2392      	movs	r3, #146	@ 0x92
 8005cde:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005ce0:	1dfb      	adds	r3, r7, #7
 8005ce2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ce8:	f107 0308 	add.w	r3, r7, #8
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 f8ac 	bl	8006e4c <hci_send_req>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da01      	bge.n	8005cfe <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005cfa:	23ff      	movs	r3, #255	@ 0xff
 8005cfc:	e000      	b.n	8005d00 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <aci_gap_terminate>:

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b0cc      	sub	sp, #304	@ 0x130
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d14:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d1e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005d22:	460a      	mov	r2, r1
 8005d24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d48:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d54:	3302      	adds	r3, #2
 8005d56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d62:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005d66:	7812      	ldrb	r2, [r2, #0]
 8005d68:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d6e:	3301      	adds	r3, #1
 8005d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d78:	2218      	movs	r2, #24
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fddb 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d82:	233f      	movs	r3, #63	@ 0x3f
 8005d84:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 8005d88:	2393      	movs	r3, #147	@ 0x93
 8005d8a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8005d8e:	230f      	movs	r3, #15
 8005d90:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8005d94:	f107 0310 	add.w	r3, r7, #16
 8005d98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005da0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005da4:	f107 030f 	add.w	r3, r7, #15
 8005da8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005db2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 f847 	bl	8006e4c <hci_send_req>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	da01      	bge.n	8005dc8 <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8005dc4:	23ff      	movs	r3, #255	@ 0xff
 8005dc6:	e004      	b.n	8005dd2 <aci_gap_terminate+0xca>
  return status;
 8005dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dcc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005dd0:	781b      	ldrb	r3, [r3, #0]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b0cc      	sub	sp, #304	@ 0x130
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4602      	mov	r2, r0
 8005de4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005de8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005df2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005df6:	460a      	mov	r2, r1
 8005df8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005dfa:	f107 0310 	add.w	r3, r7, #16
 8005dfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005e02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e20:	8812      	ldrh	r2, [r2, #0]
 8005e22:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e28:	3302      	adds	r3, #2
 8005e2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e36:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e42:	3301      	adds	r3, #1
 8005e44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e4c:	2218      	movs	r2, #24
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd71 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e56:	233f      	movs	r3, #63	@ 0x3f
 8005e58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8005e5c:	23a5      	movs	r3, #165	@ 0xa5
 8005e5e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e62:	f107 0310 	add.w	r3, r7, #16
 8005e66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005e72:	f107 030f 	add.w	r3, r7, #15
 8005e76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 ffe0 	bl	8006e4c <hci_send_req>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da01      	bge.n	8005e96 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005e92:	23ff      	movs	r3, #255	@ 0xff
 8005e94:	e004      	b.n	8005ea0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005e96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b088      	sub	sp, #32
 8005eae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005eb4:	f107 0308 	add.w	r3, r7, #8
 8005eb8:	2218      	movs	r2, #24
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fd3b 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ec2:	233f      	movs	r3, #63	@ 0x3f
 8005ec4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005ec6:	f240 1301 	movw	r3, #257	@ 0x101
 8005eca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005ecc:	1dfb      	adds	r3, r7, #7
 8005ece:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ed4:	f107 0308 	add.w	r3, r7, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ffb6 	bl	8006e4c <hci_send_req>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da01      	bge.n	8005eea <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005ee6:	23ff      	movs	r3, #255	@ 0xff
 8005ee8:	e000      	b.n	8005eec <aci_gatt_init+0x42>
  return status;
 8005eea:	79fb      	ldrb	r3, [r7, #7]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b0cf      	sub	sp, #316	@ 0x13c
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005f00:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005f04:	6001      	str	r1, [r0, #0]
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f0e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005f12:	4622      	mov	r2, r4
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f1a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005f1e:	4602      	mov	r2, r0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f26:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f3a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d00a      	beq.n	8005f5a <aci_gatt_add_service+0x66>
 8005f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f48:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d101      	bne.n	8005f56 <aci_gatt_add_service+0x62>
 8005f52:	2311      	movs	r3, #17
 8005f54:	e002      	b.n	8005f5c <aci_gatt_add_service+0x68>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <aci_gatt_add_service+0x68>
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	f107 0210 	add.w	r2, r7, #16
 8005f60:	4413      	add	r3, r2
 8005f62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fce2 	bl	8006938 <Osal_MemSet>
  int index_input = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005f7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f7e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005f82:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005f94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f98:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d002      	beq.n	8005fa8 <aci_gatt_add_service+0xb4>
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d004      	beq.n	8005fb0 <aci_gatt_add_service+0xbc>
 8005fa6:	e007      	b.n	8005fb8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005fae:	e005      	b.n	8005fbc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005fb6:	e001      	b.n	8005fbc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005fb8:	2397      	movs	r3, #151	@ 0x97
 8005fba:	e06c      	b.n	8006096 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fc0:	1c58      	adds	r0, r3, #1
 8005fc2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005fc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	f000 fca2 	bl	8006918 <Osal_MemCpy>
    index_input += size;
 8005fd4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005fd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005fdc:	4413      	add	r3, r2
 8005fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fe6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005fea:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006000:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006004:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800600c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006010:	3301      	adds	r3, #1
 8006012:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800601a:	2218      	movs	r2, #24
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fc8a 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006024:	233f      	movs	r3, #63	@ 0x3f
 8006026:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800602a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800602e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006032:	f107 0310 	add.w	r3, r7, #16
 8006036:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800603a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800603e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800604a:	2303      	movs	r3, #3
 800604c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006050:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fef8 	bl	8006e4c <hci_send_req>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	da01      	bge.n	8006066 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006062:	23ff      	movs	r3, #255	@ 0xff
 8006064:	e017      	b.n	8006096 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006066:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800606a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006074:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006078:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	e00a      	b.n	8006096 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006088:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800608c:	b29a      	uxth	r2, r3
 800608e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8006092:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800609c:	46bd      	mov	sp, r7
 800609e:	bd90      	pop	{r4, r7, pc}

080060a0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b0d1      	sub	sp, #324	@ 0x144
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80060ae:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80060b2:	600a      	str	r2, [r1, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80060be:	4622      	mov	r2, r4
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060c6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80060ca:	4602      	mov	r2, r0
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060d2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80060d6:	460a      	mov	r2, r1
 80060d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80060da:	f107 0318 	add.w	r3, r7, #24
 80060de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80060e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060e6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d00a      	beq.n	8006106 <aci_gatt_add_char+0x66>
 80060f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060f4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d101      	bne.n	8006102 <aci_gatt_add_char+0x62>
 80060fe:	2313      	movs	r3, #19
 8006100:	e002      	b.n	8006108 <aci_gatt_add_char+0x68>
 8006102:	2303      	movs	r3, #3
 8006104:	e000      	b.n	8006108 <aci_gatt_add_char+0x68>
 8006106:	2305      	movs	r3, #5
 8006108:	f107 0218 	add.w	r2, r7, #24
 800610c:	4413      	add	r3, r2
 800610e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	2203      	movs	r2, #3
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fc0c 	bl	8006938 <Osal_MemSet>
  int index_input = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8006126:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800612a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800612e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006136:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800613a:	3302      	adds	r3, #2
 800613c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006140:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006144:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006148:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006150:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006154:	3301      	adds	r3, #1
 8006156:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800615a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800615e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d002      	beq.n	800616e <aci_gatt_add_char+0xce>
 8006168:	2b02      	cmp	r3, #2
 800616a:	d004      	beq.n	8006176 <aci_gatt_add_char+0xd6>
 800616c:	e007      	b.n	800617e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800616e:	2302      	movs	r3, #2
 8006170:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006174:	e005      	b.n	8006182 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006176:	2310      	movs	r3, #16
 8006178:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800617c:	e001      	b.n	8006182 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800617e:	2397      	movs	r3, #151	@ 0x97
 8006180:	e091      	b.n	80062a6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006182:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006186:	1cd8      	adds	r0, r3, #3
 8006188:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800618c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006190:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006194:	6819      	ldr	r1, [r3, #0]
 8006196:	f000 fbbf 	bl	8006918 <Osal_MemCpy>
    index_input += size;
 800619a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800619e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80061a2:	4413      	add	r3, r2
 80061a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80061a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80061ac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80061b0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80061b4:	8812      	ldrh	r2, [r2, #0]
 80061b6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80061b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061bc:	3302      	adds	r3, #2
 80061be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80061c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80061c6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80061ca:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80061cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061d0:	3301      	adds	r3, #1
 80061d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80061d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80061da:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80061de:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80061e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061e4:	3301      	adds	r3, #1
 80061e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80061ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80061ee:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80061f2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80061f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80061fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006202:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8006206:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006208:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800620c:	3301      	adds	r3, #1
 800620e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006212:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006216:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800621a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800621c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006220:	3301      	adds	r3, #1
 8006222:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006226:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800622a:	2218      	movs	r2, #24
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fb82 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006234:	233f      	movs	r3, #63	@ 0x3f
 8006236:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800623a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800623e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8006242:	f107 0318 	add.w	r3, r7, #24
 8006246:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800624a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800624e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8006252:	f107 0314 	add.w	r3, r7, #20
 8006256:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800625a:	2303      	movs	r3, #3
 800625c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006260:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fdf0 	bl	8006e4c <hci_send_req>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	da01      	bge.n	8006276 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006272:	23ff      	movs	r3, #255	@ 0xff
 8006274:	e017      	b.n	80062a6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006276:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800627a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006288:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	e00a      	b.n	80062a6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006290:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006294:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006298:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80062a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd90      	pop	{r4, r7, pc}

080062b0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80062b0:	b5b0      	push	{r4, r5, r7, lr}
 80062b2:	b0cc      	sub	sp, #304	@ 0x130
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4605      	mov	r5, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062c2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80062c6:	462a      	mov	r2, r5
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062d2:	4622      	mov	r2, r4
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062da:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80062de:	4602      	mov	r2, r0
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062e6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80062ea:	460a      	mov	r2, r1
 80062ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80062ee:	f107 0310 	add.w	r3, r7, #16
 80062f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80062f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8006308:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800630c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006310:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006314:	8812      	ldrh	r2, [r2, #0]
 8006316:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006318:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800631c:	3302      	adds	r3, #2
 800631e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006322:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006326:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800632a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006332:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006336:	3302      	adds	r3, #2
 8006338:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800633c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006340:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006344:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800634c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006350:	3301      	adds	r3, #1
 8006352:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006356:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800635a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800635e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006366:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800636a:	3301      	adds	r3, #1
 800636c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006374:	1d98      	adds	r0, r3, #6
 8006376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800637a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006386:	f000 fac7 	bl	8006918 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800638a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800638e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006398:	4413      	add	r3, r2
 800639a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800639e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063a2:	2218      	movs	r2, #24
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fac6 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063ac:	233f      	movs	r3, #63	@ 0x3f
 80063ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80063b2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80063b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80063ba:	f107 0310 	add.w	r3, r7, #16
 80063be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80063c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80063ca:	f107 030f 	add.w	r3, r7, #15
 80063ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fd34 	bl	8006e4c <hci_send_req>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da01      	bge.n	80063ee <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80063ea:	23ff      	movs	r3, #255	@ 0xff
 80063ec:	e004      	b.n	80063f8 <aci_gatt_update_char_value+0x148>
  return status;
 80063ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063f6:	781b      	ldrb	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdb0      	pop	{r4, r5, r7, pc}

08006402 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b0cc      	sub	sp, #304	@ 0x130
 8006406:	af00      	add	r7, sp, #0
 8006408:	4602      	mov	r2, r0
 800640a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800640e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006412:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006414:	f107 0310 	add.w	r3, r7, #16
 8006418:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800641c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006420:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006432:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006436:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800643e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006442:	3302      	adds	r3, #2
 8006444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006448:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800644c:	2218      	movs	r2, #24
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fa71 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006456:	233f      	movs	r3, #63	@ 0x3f
 8006458:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800645c:	f240 1325 	movw	r3, #293	@ 0x125
 8006460:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006464:	f107 0310 	add.w	r3, r7, #16
 8006468:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800646c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006470:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006474:	f107 030f 	add.w	r3, r7, #15
 8006478:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800647c:	2301      	movs	r3, #1
 800647e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006482:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fcdf 	bl	8006e4c <hci_send_req>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	da01      	bge.n	8006498 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006494:	23ff      	movs	r3, #255	@ 0xff
 8006496:	e004      	b.n	80064a2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8006498:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800649c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064a0:	781b      	ldrb	r3, [r3, #0]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b0cc      	sub	sp, #304	@ 0x130
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4602      	mov	r2, r0
 80064b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80064bc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80064be:	f107 0310 	add.w	r3, r7, #16
 80064c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80064c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064e0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80064e4:	8812      	ldrh	r2, [r2, #0]
 80064e6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80064e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064ec:	3302      	adds	r3, #2
 80064ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064f6:	2218      	movs	r2, #24
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fa1c 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006500:	233f      	movs	r3, #63	@ 0x3f
 8006502:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8006506:	f240 1327 	movw	r3, #295	@ 0x127
 800650a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800650e:	f107 0310 	add.w	r3, r7, #16
 8006512:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006516:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800651a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800651e:	f107 030f 	add.w	r3, r7, #15
 8006522:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800652c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fc8a 	bl	8006e4c <hci_send_req>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	da01      	bge.n	8006542 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800653e:	23ff      	movs	r3, #255	@ 0xff
 8006540:	e004      	b.n	800654c <aci_gatt_allow_read+0xa0>
  return status;
 8006542:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006546:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800654a:	781b      	ldrb	r3, [r3, #0]
}
 800654c:	4618      	mov	r0, r3
 800654e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b0cc      	sub	sp, #304	@ 0x130
 800655a:	af00      	add	r7, sp, #0
 800655c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006560:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800656a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800656e:	4602      	mov	r2, r0
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006576:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800657a:	460a      	mov	r2, r1
 800657c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800657e:	f107 0310 	add.w	r3, r7, #16
 8006582:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006586:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800658a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800659c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065a0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80065b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80065be:	7812      	ldrb	r2, [r2, #0]
 80065c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80065c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065c6:	3301      	adds	r3, #1
 80065c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065d0:	1c98      	adds	r0, r3, #2
 80065d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065d6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	f000 f997 	bl	8006918 <Osal_MemCpy>
  index_input += Length;
 80065ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80065f8:	4413      	add	r3, r2
 80065fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006602:	2218      	movs	r2, #24
 8006604:	2100      	movs	r1, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f996 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 800660c:	233f      	movs	r3, #63	@ 0x3f
 800660e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006612:	230c      	movs	r3, #12
 8006614:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006618:	f107 0310 	add.w	r3, r7, #16
 800661c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006620:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006624:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006628:	f107 030f 	add.w	r3, r7, #15
 800662c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006630:	2301      	movs	r3, #1
 8006632:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fc05 	bl	8006e4c <hci_send_req>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	da01      	bge.n	800664c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006648:	23ff      	movs	r3, #255	@ 0xff
 800664a:	e004      	b.n	8006656 <aci_hal_write_config_data+0x100>
  return status;
 800664c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006650:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006654:	781b      	ldrb	r3, [r3, #0]
}
 8006656:	4618      	mov	r0, r3
 8006658:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b0cc      	sub	sp, #304	@ 0x130
 8006664:	af00      	add	r7, sp, #0
 8006666:	4602      	mov	r2, r0
 8006668:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800666c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006676:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800667a:	460a      	mov	r2, r1
 800667c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800667e:	f107 0310 	add.w	r3, r7, #16
 8006682:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006686:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800668a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800669c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066a0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80066a4:	7812      	ldrb	r2, [r2, #0]
 80066a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066ac:	3301      	adds	r3, #1
 80066ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80066b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80066be:	7812      	ldrb	r2, [r2, #0]
 80066c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80066c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066c6:	3301      	adds	r3, #1
 80066c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066d0:	2218      	movs	r2, #24
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f92f 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 80066da:	233f      	movs	r3, #63	@ 0x3f
 80066dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80066e0:	230f      	movs	r3, #15
 80066e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066e6:	f107 0310 	add.w	r3, r7, #16
 80066ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80066ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80066f6:	f107 030f 	add.w	r3, r7, #15
 80066fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80066fe:	2301      	movs	r3, #1
 8006700:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006708:	2100      	movs	r1, #0
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fb9e 	bl	8006e4c <hci_send_req>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	da01      	bge.n	800671a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006716:	23ff      	movs	r3, #255	@ 0xff
 8006718:	e004      	b.n	8006724 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800671a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800671e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006722:	781b      	ldrb	r3, [r3, #0]
}
 8006724:	4618      	mov	r0, r3
 8006726:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b0cc      	sub	sp, #304	@ 0x130
 8006732:	af00      	add	r7, sp, #0
 8006734:	4602      	mov	r2, r0
 8006736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800673a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800673e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006740:	f107 0310 	add.w	r3, r7, #16
 8006744:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006748:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800674c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800675e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006762:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006766:	8812      	ldrh	r2, [r2, #0]
 8006768:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800676a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800676e:	3302      	adds	r3, #2
 8006770:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006774:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006778:	2218      	movs	r2, #24
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f8db 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006782:	233f      	movs	r3, #63	@ 0x3f
 8006784:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006788:	2318      	movs	r3, #24
 800678a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006796:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800679a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800679e:	f107 030f 	add.w	r3, r7, #15
 80067a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fb4a 	bl	8006e4c <hci_send_req>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da01      	bge.n	80067c2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80067be:	23ff      	movs	r3, #255	@ 0xff
 80067c0:	e004      	b.n	80067cc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80067c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80067ca:	781b      	ldrb	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067e0:	f107 0308 	add.w	r3, r7, #8
 80067e4:	2218      	movs	r2, #24
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 f8a5 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x03;
 80067ee:	2303      	movs	r3, #3
 80067f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80067f2:	2303      	movs	r3, #3
 80067f4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80067f6:	1dfb      	adds	r3, r7, #7
 80067f8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80067fa:	2301      	movs	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067fe:	f107 0308 	add.w	r3, r7, #8
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb21 	bl	8006e4c <hci_send_req>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	da01      	bge.n	8006814 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006810:	23ff      	movs	r3, #255	@ 0xff
 8006812:	e000      	b.n	8006816 <hci_reset+0x40>
  return status;
 8006814:	79fb      	ldrb	r3, [r7, #7]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800681e:	b590      	push	{r4, r7, lr}
 8006820:	b0cd      	sub	sp, #308	@ 0x134
 8006822:	af00      	add	r7, sp, #0
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
 8006828:	4611      	mov	r1, r2
 800682a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800682e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006832:	4622      	mov	r2, r4
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800683a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800683e:	4602      	mov	r2, r0
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006846:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800684a:	460a      	mov	r2, r1
 800684c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800684e:	f107 0310 	add.w	r3, r7, #16
 8006852:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006856:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800685a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800686c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006870:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800687c:	3301      	adds	r3, #1
 800687e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006882:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006886:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800688a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006896:	3301      	adds	r3, #1
 8006898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800689c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80068a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80068a4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80068a8:	7812      	ldrb	r2, [r2, #0]
 80068aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80068ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068b0:	3301      	adds	r3, #1
 80068b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068ba:	2218      	movs	r2, #24
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f83a 	bl	8006938 <Osal_MemSet>
  rq.ogf = 0x08;
 80068c4:	2308      	movs	r3, #8
 80068c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80068ca:	2331      	movs	r3, #49	@ 0x31
 80068cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80068d0:	f107 0310 	add.w	r3, r7, #16
 80068d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80068e0:	f107 030f 	add.w	r3, r7, #15
 80068e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 faa9 	bl	8006e4c <hci_send_req>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da01      	bge.n	8006904 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006900:	23ff      	movs	r3, #255	@ 0xff
 8006902:	e004      	b.n	800690e <hci_le_set_default_phy+0xf0>
  return status;
 8006904:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006908:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800690c:	781b      	ldrb	r3, [r3, #0]
}
 800690e:	4618      	mov	r0, r3
 8006910:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006914:	46bd      	mov	sp, r7
 8006916:	bd90      	pop	{r4, r7, pc}

08006918 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f002 fbe3 	bl	80090f4 <memcpy>
 800692e:	4603      	mov	r3, r0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f002 fba7 	bl	800909c <memset>
 800694e:	4603      	mov	r3, r0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  return;
 800695c:	bf00      	nop
}
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006966:	b480      	push	{r7}
 8006968:	af00      	add	r7, sp, #0
  return;
 800696a:	bf00      	nop
}
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  return;
 8006978:	bf00      	nop
}
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006982:	b480      	push	{r7}
 8006984:	af00      	add	r7, sp, #0
  return;
 8006986:	bf00      	nop
}
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return;
 8006994:	bf00      	nop
}
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800699e:	b480      	push	{r7}
 80069a0:	af00      	add	r7, sp, #0
  return;
 80069a2:	bf00      	nop
}
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return;
 80069b0:	bf00      	nop
}
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80069ba:	b480      	push	{r7}
 80069bc:	af00      	add	r7, sp, #0
  return;
 80069be:	bf00      	nop
}
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return;
 80069cc:	bf00      	nop
}
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80069d6:	b480      	push	{r7}
 80069d8:	af00      	add	r7, sp, #0
  return;
 80069da:	bf00      	nop
}
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  return;
 80069e8:	bf00      	nop
}
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80069f2:	b480      	push	{r7}
 80069f4:	af00      	add	r7, sp, #0
  return;
 80069f6:	bf00      	nop
}
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  return;
 8006a04:	bf00      	nop
}
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0
  return;
 8006a12:	bf00      	nop
}
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  return;
 8006a20:	bf00      	nop
}
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	af00      	add	r7, sp, #0
  return;
 8006a2e:	bf00      	nop
}
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return;
 8006a3c:	bf00      	nop
}
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006a4c:	4b04      	ldr	r3, [pc, #16]	@ (8006a60 <SVCCTL_Init+0x18>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006a52:	4b04      	ldr	r3, [pc, #16]	@ (8006a64 <SVCCTL_Init+0x1c>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006a58:	f000 f806 	bl	8006a68 <SVCCTL_SvcInit>

  return;
 8006a5c:	bf00      	nop
}
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000050 	.word	0x20000050
 8006a64:	20000070 	.word	0x20000070

08006a68 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  BAS_Init();
 8006a6c:	f7ff ff74 	bl	8006958 <BAS_Init>

  BLS_Init();
 8006a70:	f7ff ff79 	bl	8006966 <BLS_Init>

  CRS_STM_Init();
 8006a74:	f7ff ff7e 	bl	8006974 <CRS_STM_Init>

  DIS_Init();
 8006a78:	f7ff ff83 	bl	8006982 <DIS_Init>

  EDS_STM_Init();
 8006a7c:	f7ff ff88 	bl	8006990 <EDS_STM_Init>

  HIDS_Init();
 8006a80:	f7ff ff8d 	bl	800699e <HIDS_Init>

  HRS_Init();
 8006a84:	f7ff ff92 	bl	80069ac <HRS_Init>

  HTS_Init();
 8006a88:	f7ff ff97 	bl	80069ba <HTS_Init>

  IAS_Init();
 8006a8c:	f7ff ff9c 	bl	80069c8 <IAS_Init>

  LLS_Init();
 8006a90:	f7ff ffa1 	bl	80069d6 <LLS_Init>

  TPS_Init();
 8006a94:	f7ff ffa6 	bl	80069e4 <TPS_Init>

  MOTENV_STM_Init();
 8006a98:	f7ff ffab 	bl	80069f2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006a9c:	f7ff ffb0 	bl	8006a00 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006aa0:	f7ff ffb5 	bl	8006a0e <ZDD_STM_Init>

  OTAS_STM_Init();
 8006aa4:	f7ff ffba 	bl	8006a1c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006aa8:	f7ff ffc6 	bl	8006a38 <BVOPUS_STM_Init>

  MESH_Init();
 8006aac:	f7ff ffbd 	bl	8006a2a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006ab0:	f001 fcc4 	bl	800843c <SVCCTL_InitCustomSvc>
  
  return;
 8006ab4:	bf00      	nop
}
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006ac0:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006ac2:	7f1b      	ldrb	r3, [r3, #28]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4a08      	ldr	r2, [pc, #32]	@ (8006ae8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006ace:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006ad0:	7f1b      	ldrb	r3, [r3, #28]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4b04      	ldr	r3, [pc, #16]	@ (8006ae8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006ad8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006ada:	bf00      	nop
}
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000050 	.word	0x20000050

08006aec <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3301      	adds	r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2bff      	cmp	r3, #255	@ 0xff
 8006b04:	d125      	bne.n	8006b52 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b1a:	d118      	bne.n	8006b4e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	757b      	strb	r3, [r7, #21]
 8006b20:	e00d      	b.n	8006b3e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006b22:	7d7b      	ldrb	r3, [r7, #21]
 8006b24:	4a1a      	ldr	r2, [pc, #104]	@ (8006b90 <SVCCTL_UserEvtRx+0xa4>)
 8006b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d108      	bne.n	8006b4a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006b38:	7d7b      	ldrb	r3, [r7, #21]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	757b      	strb	r3, [r7, #21]
 8006b3e:	4b14      	ldr	r3, [pc, #80]	@ (8006b90 <SVCCTL_UserEvtRx+0xa4>)
 8006b40:	7f1b      	ldrb	r3, [r3, #28]
 8006b42:	7d7a      	ldrb	r2, [r7, #21]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d3ec      	bcc.n	8006b22 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006b48:	e002      	b.n	8006b50 <SVCCTL_UserEvtRx+0x64>
              break;
 8006b4a:	bf00      	nop
          break;
 8006b4c:	e000      	b.n	8006b50 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006b4e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006b50:	e000      	b.n	8006b54 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006b52:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d00f      	beq.n	8006b7a <SVCCTL_UserEvtRx+0x8e>
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	dc10      	bgt.n	8006b80 <SVCCTL_UserEvtRx+0x94>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <SVCCTL_UserEvtRx+0x7c>
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d006      	beq.n	8006b74 <SVCCTL_UserEvtRx+0x88>
 8006b66:	e00b      	b.n	8006b80 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 ff85 	bl	8007a78 <SVCCTL_App_Notification>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75bb      	strb	r3, [r7, #22]
      break;
 8006b72:	e008      	b.n	8006b86 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75bb      	strb	r3, [r7, #22]
      break;
 8006b78:	e005      	b.n	8006b86 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75bb      	strb	r3, [r7, #22]
      break;
 8006b7e:	e002      	b.n	8006b86 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006b80:	2301      	movs	r3, #1
 8006b82:	75bb      	strb	r3, [r7, #22]
      break;
 8006b84:	bf00      	nop
  }

  return (return_status);
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000050 	.word	0x20000050

08006b94 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	212e      	movs	r1, #46	@ 0x2e
 8006bac:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006bb0:	f000 fae8 	bl	8007184 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	330b      	adds	r3, #11
 8006bb8:	78db      	ldrb	r3, [r3, #3]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b088      	sub	sp, #32
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	210f      	movs	r1, #15
 8006bda:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006bde:	f000 fad1 	bl	8007184 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	330b      	adds	r3, #11
 8006be6:	78db      	ldrb	r3, [r3, #3]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3720      	adds	r7, #32
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006bf8:	f107 030c 	add.w	r3, r7, #12
 8006bfc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	2110      	movs	r1, #16
 8006c04:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006c08:	f000 fabc 	bl	8007184 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	330b      	adds	r3, #11
 8006c10:	78db      	ldrb	r3, [r3, #3]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b08b      	sub	sp, #44	@ 0x2c
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006c44:	4b4a      	ldr	r3, [pc, #296]	@ (8006d70 <SHCI_GetWirelessFwInfo+0x154>)
 8006c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006c4c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006c56:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a44      	ldr	r2, [pc, #272]	@ (8006d74 <SHCI_GetWirelessFwInfo+0x158>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10f      	bne.n	8006c88 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e01a      	b.n	8006cbe <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006c90:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006c94:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	0a1b      	lsrs	r3, r3, #8
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	0e1b      	lsrs	r3, r3, #24
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	0c1b      	lsrs	r3, r3, #16
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	0e1b      	lsrs	r3, r3, #24
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	372c      	adds	r7, #44	@ 0x2c
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	58004000 	.word	0x58004000
 8006d74:	a94656b9 	.word	0xa94656b9

08006d78 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4a08      	ldr	r2, [pc, #32]	@ (8006da8 <hci_init+0x30>)
 8006d88:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006d8a:	4a08      	ldr	r2, [pc, #32]	@ (8006dac <hci_init+0x34>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006d90:	4806      	ldr	r0, [pc, #24]	@ (8006dac <hci_init+0x34>)
 8006d92:	f000 f979 	bl	8007088 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f8da 	bl	8006f54 <TlInit>

  return;
 8006da0:	bf00      	nop
}
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000280 	.word	0x20000280
 8006dac:	20000258 	.word	0x20000258

08006db0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006db6:	4822      	ldr	r0, [pc, #136]	@ (8006e40 <hci_user_evt_proc+0x90>)
 8006db8:	f000 fd32 	bl	8007820 <LST_is_empty>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d12b      	bne.n	8006e1a <hci_user_evt_proc+0x6a>
 8006dc2:	4b20      	ldr	r3, [pc, #128]	@ (8006e44 <hci_user_evt_proc+0x94>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d027      	beq.n	8006e1a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006dca:	f107 030c 	add.w	r3, r7, #12
 8006dce:	4619      	mov	r1, r3
 8006dd0:	481b      	ldr	r0, [pc, #108]	@ (8006e40 <hci_user_evt_proc+0x90>)
 8006dd2:	f000 fdb4 	bl	800793e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e48 <hci_user_evt_proc+0x98>)
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00c      	beq.n	8006df8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006de2:	2301      	movs	r3, #1
 8006de4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006de6:	4b18      	ldr	r3, [pc, #96]	@ (8006e48 <hci_user_evt_proc+0x98>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	1d3a      	adds	r2, r7, #4
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006df0:	793a      	ldrb	r2, [r7, #4]
 8006df2:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <hci_user_evt_proc+0x94>)
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	e002      	b.n	8006dfe <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006df8:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <hci_user_evt_proc+0x94>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006dfe:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <hci_user_evt_proc+0x94>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fc0d 	bl	8007628 <TL_MM_EvtDone>
 8006e0e:	e004      	b.n	8006e1a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4619      	mov	r1, r3
 8006e14:	480a      	ldr	r0, [pc, #40]	@ (8006e40 <hci_user_evt_proc+0x90>)
 8006e16:	f000 fd25 	bl	8007864 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006e1a:	4809      	ldr	r0, [pc, #36]	@ (8006e40 <hci_user_evt_proc+0x90>)
 8006e1c:	f000 fd00 	bl	8007820 <LST_is_empty>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d107      	bne.n	8006e36 <hci_user_evt_proc+0x86>
 8006e26:	4b07      	ldr	r3, [pc, #28]	@ (8006e44 <hci_user_evt_proc+0x94>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006e2e:	4804      	ldr	r0, [pc, #16]	@ (8006e40 <hci_user_evt_proc+0x90>)
 8006e30:	f001 f856 	bl	8007ee0 <hci_notify_asynch_evt>
  }


  return;
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
}
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000078 	.word	0x20000078
 8006e44:	20000084 	.word	0x20000084
 8006e48:	20000258 	.word	0x20000258

08006e4c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006e58:	2000      	movs	r0, #0
 8006e5a:	f000 f8d1 	bl	8007000 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e6c:	b21a      	sxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b21b      	sxth	r3, r3
 8006e74:	029b      	lsls	r3, r3, #10
 8006e76:	b21b      	sxth	r3, r3
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006e7e:	4b33      	ldr	r3, [pc, #204]	@ (8006f4c <hci_send_req+0x100>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	b2d9      	uxtb	r1, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	8bbb      	ldrh	r3, [r7, #28]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 f88f 	bl	8006fb4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006e96:	e04e      	b.n	8006f36 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006e98:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006e9c:	f001 f837 	bl	8007f0e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006ea0:	e043      	b.n	8006f2a <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006ea2:	f107 030c 	add.w	r3, r7, #12
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4829      	ldr	r0, [pc, #164]	@ (8006f50 <hci_send_req+0x104>)
 8006eaa:	f000 fd48 	bl	800793e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	7a5b      	ldrb	r3, [r3, #9]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d114      	bne.n	8006ee0 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	330b      	adds	r3, #11
 8006eba:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	885b      	ldrh	r3, [r3, #2]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8bba      	ldrh	r2, [r7, #28]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d104      	bne.n	8006ed2 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	7812      	ldrb	r2, [r2, #0]
 8006ed0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d027      	beq.n	8006f2a <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006eda:	2301      	movs	r3, #1
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e024      	b.n	8006f2a <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	330b      	adds	r3, #11
 8006ee4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8bba      	ldrh	r2, [r7, #28]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d114      	bne.n	8006f1e <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	7a9b      	ldrb	r3, [r3, #10]
 8006ef8:	3b03      	subs	r3, #3
 8006efa:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	bfa8      	it	ge
 8006f06:	461a      	movge	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6918      	ldr	r0, [r3, #16]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	1cd9      	adds	r1, r3, #3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f002 f8eb 	bl	80090f4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006f26:	2301      	movs	r3, #1
 8006f28:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006f2a:	4809      	ldr	r0, [pc, #36]	@ (8006f50 <hci_send_req+0x104>)
 8006f2c:	f000 fc78 	bl	8007820 <LST_is_empty>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0b5      	beq.n	8006ea2 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006f36:	7ffb      	ldrb	r3, [r7, #31]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0ad      	beq.n	8006e98 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	f000 f85f 	bl	8007000 <NotifyCmdStatus>

  return 0;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3720      	adds	r7, #32
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000284 	.word	0x20000284
 8006f50:	20000278 	.word	0x20000278

08006f54 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006f5c:	480f      	ldr	r0, [pc, #60]	@ (8006f9c <TlInit+0x48>)
 8006f5e:	f000 fc4f 	bl	8007800 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006f62:	4a0f      	ldr	r2, [pc, #60]	@ (8006fa0 <TlInit+0x4c>)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006f68:	480e      	ldr	r0, [pc, #56]	@ (8006fa4 <TlInit+0x50>)
 8006f6a:	f000 fc49 	bl	8007800 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa8 <TlInit+0x54>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006f74:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <TlInit+0x58>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <TlInit+0x5c>)
 8006f82:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006f84:	4b09      	ldr	r3, [pc, #36]	@ (8006fac <TlInit+0x58>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f107 0208 	add.w	r2, r7, #8
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
  }

  return;
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
}
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000278 	.word	0x20000278
 8006fa0:	20000080 	.word	0x20000080
 8006fa4:	20000078 	.word	0x20000078
 8006fa8:	20000084 	.word	0x20000084
 8006fac:	20000258 	.word	0x20000258
 8006fb0:	08007041 	.word	0x08007041

08006fb4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	603a      	str	r2, [r7, #0]
 8006fbe:	80fb      	strh	r3, [r7, #6]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <SendCmd+0x44>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	88fa      	ldrh	r2, [r7, #6]
 8006fca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006fce:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff8 <SendCmd+0x44>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	797a      	ldrb	r2, [r7, #5]
 8006fd4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006fd6:	4b08      	ldr	r3, [pc, #32]	@ (8006ff8 <SendCmd+0x44>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	797a      	ldrb	r2, [r7, #5]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f002 f887 	bl	80090f4 <memcpy>

  hciContext.io.Send(0,0);
 8006fe6:	4b05      	ldr	r3, [pc, #20]	@ (8006ffc <SendCmd+0x48>)
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2100      	movs	r1, #0
 8006fec:	2000      	movs	r0, #0
 8006fee:	4798      	blx	r3

  return;
 8006ff0:	bf00      	nop
}
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000080 	.word	0x20000080
 8006ffc:	20000258 	.word	0x20000258

08007000 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007010:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <NotifyCmdStatus+0x3c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007018:	4b08      	ldr	r3, [pc, #32]	@ (800703c <NotifyCmdStatus+0x3c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2000      	movs	r0, #0
 800701e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007020:	e008      	b.n	8007034 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007022:	4b06      	ldr	r3, [pc, #24]	@ (800703c <NotifyCmdStatus+0x3c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800702a:	4b04      	ldr	r3, [pc, #16]	@ (800703c <NotifyCmdStatus+0x3c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2001      	movs	r0, #1
 8007030:	4798      	blx	r3
  return;
 8007032:	bf00      	nop
 8007034:	bf00      	nop
}
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000280 	.word	0x20000280

08007040 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7a5b      	ldrb	r3, [r3, #9]
 800704c:	2b0f      	cmp	r3, #15
 800704e:	d003      	beq.n	8007058 <TlEvtReceived+0x18>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7a5b      	ldrb	r3, [r3, #9]
 8007054:	2b0e      	cmp	r3, #14
 8007056:	d107      	bne.n	8007068 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4809      	ldr	r0, [pc, #36]	@ (8007080 <TlEvtReceived+0x40>)
 800705c:	f000 fc28 	bl	80078b0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007060:	2000      	movs	r0, #0
 8007062:	f000 ff49 	bl	8007ef8 <hci_cmd_resp_release>
 8007066:	e006      	b.n	8007076 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4806      	ldr	r0, [pc, #24]	@ (8007084 <TlEvtReceived+0x44>)
 800706c:	f000 fc20 	bl	80078b0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007070:	4804      	ldr	r0, [pc, #16]	@ (8007084 <TlEvtReceived+0x44>)
 8007072:	f000 ff35 	bl	8007ee0 <hci_notify_asynch_evt>
  }

  return;
 8007076:	bf00      	nop
}
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000278 	.word	0x20000278
 8007084:	20000078 	.word	0x20000078

08007088 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a05      	ldr	r2, [pc, #20]	@ (80070a8 <hci_register_io_bus+0x20>)
 8007094:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a04      	ldr	r2, [pc, #16]	@ (80070ac <hci_register_io_bus+0x24>)
 800709a:	611a      	str	r2, [r3, #16]

  return;
 800709c:	bf00      	nop
}
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	080073a1 	.word	0x080073a1
 80070ac:	08007409 	.word	0x08007409

080070b0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4a08      	ldr	r2, [pc, #32]	@ (80070e0 <shci_init+0x30>)
 80070c0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80070c2:	4a08      	ldr	r2, [pc, #32]	@ (80070e4 <shci_init+0x34>)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80070c8:	4806      	ldr	r0, [pc, #24]	@ (80070e4 <shci_init+0x34>)
 80070ca:	f000 f915 	bl	80072f8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 f898 	bl	8007208 <TlInit>

  return;
 80070d8:	bf00      	nop
}
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	200002a8 	.word	0x200002a8
 80070e4:	20000288 	.word	0x20000288

080070e8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80070ee:	4822      	ldr	r0, [pc, #136]	@ (8007178 <shci_user_evt_proc+0x90>)
 80070f0:	f000 fb96 	bl	8007820 <LST_is_empty>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d12b      	bne.n	8007152 <shci_user_evt_proc+0x6a>
 80070fa:	4b20      	ldr	r3, [pc, #128]	@ (800717c <shci_user_evt_proc+0x94>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d027      	beq.n	8007152 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007102:	f107 030c 	add.w	r3, r7, #12
 8007106:	4619      	mov	r1, r3
 8007108:	481b      	ldr	r0, [pc, #108]	@ (8007178 <shci_user_evt_proc+0x90>)
 800710a:	f000 fc18 	bl	800793e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800710e:	4b1c      	ldr	r3, [pc, #112]	@ (8007180 <shci_user_evt_proc+0x98>)
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00c      	beq.n	8007130 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800711a:	2301      	movs	r3, #1
 800711c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800711e:	4b18      	ldr	r3, [pc, #96]	@ (8007180 <shci_user_evt_proc+0x98>)
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	1d3a      	adds	r2, r7, #4
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007128:	793a      	ldrb	r2, [r7, #4]
 800712a:	4b14      	ldr	r3, [pc, #80]	@ (800717c <shci_user_evt_proc+0x94>)
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e002      	b.n	8007136 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007130:	4b12      	ldr	r3, [pc, #72]	@ (800717c <shci_user_evt_proc+0x94>)
 8007132:	2201      	movs	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007136:	4b11      	ldr	r3, [pc, #68]	@ (800717c <shci_user_evt_proc+0x94>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa71 	bl	8007628 <TL_MM_EvtDone>
 8007146:	e004      	b.n	8007152 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4619      	mov	r1, r3
 800714c:	480a      	ldr	r0, [pc, #40]	@ (8007178 <shci_user_evt_proc+0x90>)
 800714e:	f000 fb89 	bl	8007864 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007152:	4809      	ldr	r0, [pc, #36]	@ (8007178 <shci_user_evt_proc+0x90>)
 8007154:	f000 fb64 	bl	8007820 <LST_is_empty>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d107      	bne.n	800716e <shci_user_evt_proc+0x86>
 800715e:	4b07      	ldr	r3, [pc, #28]	@ (800717c <shci_user_evt_proc+0x94>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007166:	4804      	ldr	r0, [pc, #16]	@ (8007178 <shci_user_evt_proc+0x90>)
 8007168:	f7f9 fa74 	bl	8000654 <shci_notify_asynch_evt>
  }


  return;
 800716c:	bf00      	nop
 800716e:	bf00      	nop
}
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000088 	.word	0x20000088
 800717c:	20000098 	.word	0x20000098
 8007180:	20000288 	.word	0x20000288

08007184 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60ba      	str	r2, [r7, #8]
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	4603      	mov	r3, r0
 8007190:	81fb      	strh	r3, [r7, #14]
 8007192:	460b      	mov	r3, r1
 8007194:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007196:	2000      	movs	r0, #0
 8007198:	f000 f868 	bl	800726c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800719c:	4b17      	ldr	r3, [pc, #92]	@ (80071fc <shci_send+0x78>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	89fa      	ldrh	r2, [r7, #14]
 80071a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80071a6:	4b15      	ldr	r3, [pc, #84]	@ (80071fc <shci_send+0x78>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	7b7a      	ldrb	r2, [r7, #13]
 80071ac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80071ae:	4b13      	ldr	r3, [pc, #76]	@ (80071fc <shci_send+0x78>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	330c      	adds	r3, #12
 80071b4:	7b7a      	ldrb	r2, [r7, #13]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 ff9b 	bl	80090f4 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80071be:	4b10      	ldr	r3, [pc, #64]	@ (8007200 <shci_send+0x7c>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80071c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007204 <shci_send+0x80>)
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2100      	movs	r1, #0
 80071ca:	2000      	movs	r0, #0
 80071cc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80071ce:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80071d2:	f7f9 fa56 	bl	8000682 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f103 0008 	add.w	r0, r3, #8
 80071dc:	4b07      	ldr	r3, [pc, #28]	@ (80071fc <shci_send+0x78>)
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <shci_send+0x78>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	789b      	ldrb	r3, [r3, #2]
 80071e6:	3303      	adds	r3, #3
 80071e8:	461a      	mov	r2, r3
 80071ea:	f001 ff83 	bl	80090f4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80071ee:	2001      	movs	r0, #1
 80071f0:	f000 f83c 	bl	800726c <Cmd_SetStatus>

  return;
 80071f4:	bf00      	nop
}
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000094 	.word	0x20000094
 8007200:	200002ac 	.word	0x200002ac
 8007204:	20000288 	.word	0x20000288

08007208 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007210:	4a10      	ldr	r2, [pc, #64]	@ (8007254 <TlInit+0x4c>)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007216:	4810      	ldr	r0, [pc, #64]	@ (8007258 <TlInit+0x50>)
 8007218:	f000 faf2 	bl	8007800 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800721c:	2001      	movs	r0, #1
 800721e:	f000 f825 	bl	800726c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007222:	4b0e      	ldr	r3, [pc, #56]	@ (800725c <TlInit+0x54>)
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007228:	4b0d      	ldr	r3, [pc, #52]	@ (8007260 <TlInit+0x58>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00c      	beq.n	800724a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007234:	4b0b      	ldr	r3, [pc, #44]	@ (8007264 <TlInit+0x5c>)
 8007236:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007238:	4b0b      	ldr	r3, [pc, #44]	@ (8007268 <TlInit+0x60>)
 800723a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800723c:	4b08      	ldr	r3, [pc, #32]	@ (8007260 <TlInit+0x58>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f107 020c 	add.w	r2, r7, #12
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
  }

  return;
 8007248:	bf00      	nop
 800724a:	bf00      	nop
}
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000094 	.word	0x20000094
 8007258:	20000088 	.word	0x20000088
 800725c:	20000098 	.word	0x20000098
 8007260:	20000288 	.word	0x20000288
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072d5 	.word	0x080072d5

0800726c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800727c:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <Cmd_SetStatus+0x48>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007284:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <Cmd_SetStatus+0x48>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2000      	movs	r0, #0
 800728a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800728c:	4b0a      	ldr	r3, [pc, #40]	@ (80072b8 <Cmd_SetStatus+0x4c>)
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007292:	e00b      	b.n	80072ac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007294:	4b08      	ldr	r3, [pc, #32]	@ (80072b8 <Cmd_SetStatus+0x4c>)
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800729a:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <Cmd_SetStatus+0x48>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80072a2:	4b04      	ldr	r3, [pc, #16]	@ (80072b4 <Cmd_SetStatus+0x48>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2001      	movs	r0, #1
 80072a8:	4798      	blx	r3
  return;
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
}
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200002a8 	.word	0x200002a8
 80072b8:	20000090 	.word	0x20000090

080072bc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7f9 f9d1 	bl	800066c <shci_cmd_resp_release>

  return;
 80072ca:	bf00      	nop
}
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4805      	ldr	r0, [pc, #20]	@ (80072f4 <TlUserEvtReceived+0x20>)
 80072e0:	f000 fae6 	bl	80078b0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80072e4:	4803      	ldr	r0, [pc, #12]	@ (80072f4 <TlUserEvtReceived+0x20>)
 80072e6:	f7f9 f9b5 	bl	8000654 <shci_notify_asynch_evt>

  return;
 80072ea:	bf00      	nop
}
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000088 	.word	0x20000088

080072f8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a05      	ldr	r2, [pc, #20]	@ (8007318 <shci_register_io_bus+0x20>)
 8007304:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a04      	ldr	r2, [pc, #16]	@ (800731c <shci_register_io_bus+0x24>)
 800730a:	611a      	str	r2, [r3, #16]

  return;
 800730c:	bf00      	nop
}
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	080074b5 	.word	0x080074b5
 800731c:	08007509 	.word	0x08007509

08007320 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007324:	f001 fa9c 	bl	8008860 <HW_IPCC_Enable>

  return;
 8007328:	bf00      	nop
}
 800732a:	bd80      	pop	{r7, pc}

0800732c <TL_Init>:


void TL_Init( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007330:	4b10      	ldr	r3, [pc, #64]	@ (8007374 <TL_Init+0x48>)
 8007332:	4a11      	ldr	r2, [pc, #68]	@ (8007378 <TL_Init+0x4c>)
 8007334:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007336:	4b0f      	ldr	r3, [pc, #60]	@ (8007374 <TL_Init+0x48>)
 8007338:	4a10      	ldr	r2, [pc, #64]	@ (800737c <TL_Init+0x50>)
 800733a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800733c:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <TL_Init+0x48>)
 800733e:	4a10      	ldr	r2, [pc, #64]	@ (8007380 <TL_Init+0x54>)
 8007340:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007342:	4b0c      	ldr	r3, [pc, #48]	@ (8007374 <TL_Init+0x48>)
 8007344:	4a0f      	ldr	r2, [pc, #60]	@ (8007384 <TL_Init+0x58>)
 8007346:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007348:	4b0a      	ldr	r3, [pc, #40]	@ (8007374 <TL_Init+0x48>)
 800734a:	4a0f      	ldr	r2, [pc, #60]	@ (8007388 <TL_Init+0x5c>)
 800734c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800734e:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <TL_Init+0x48>)
 8007350:	4a0e      	ldr	r2, [pc, #56]	@ (800738c <TL_Init+0x60>)
 8007352:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007354:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <TL_Init+0x48>)
 8007356:	4a0e      	ldr	r2, [pc, #56]	@ (8007390 <TL_Init+0x64>)
 8007358:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800735a:	4b06      	ldr	r3, [pc, #24]	@ (8007374 <TL_Init+0x48>)
 800735c:	4a0d      	ldr	r2, [pc, #52]	@ (8007394 <TL_Init+0x68>)
 800735e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007360:	4b04      	ldr	r3, [pc, #16]	@ (8007374 <TL_Init+0x48>)
 8007362:	4a0d      	ldr	r2, [pc, #52]	@ (8007398 <TL_Init+0x6c>)
 8007364:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007366:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <TL_Init+0x48>)
 8007368:	4a0c      	ldr	r2, [pc, #48]	@ (800739c <TL_Init+0x70>)
 800736a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800736c:	f001 fa8c 	bl	8008888 <HW_IPCC_Init>

  return;
 8007370:	bf00      	nop
}
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20030000 	.word	0x20030000
 8007378:	20030028 	.word	0x20030028
 800737c:	20030048 	.word	0x20030048
 8007380:	20030058 	.word	0x20030058
 8007384:	20030068 	.word	0x20030068
 8007388:	20030070 	.word	0x20030070
 800738c:	20030078 	.word	0x20030078
 8007390:	20030080 	.word	0x20030080
 8007394:	2003009c 	.word	0x2003009c
 8007398:	200300a0 	.word	0x200300a0
 800739c:	200300ac 	.word	0x200300ac

080073a0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80073ac:	4811      	ldr	r0, [pc, #68]	@ (80073f4 <TL_BLE_Init+0x54>)
 80073ae:	f000 fa27 	bl	8007800 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80073b2:	4b11      	ldr	r3, [pc, #68]	@ (80073f8 <TL_BLE_Init+0x58>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4a0c      	ldr	r2, [pc, #48]	@ (80073fc <TL_BLE_Init+0x5c>)
 80073cc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4a08      	ldr	r2, [pc, #32]	@ (80073f4 <TL_BLE_Init+0x54>)
 80073d2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80073d4:	f001 fa6e 	bl	80088b4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a08      	ldr	r2, [pc, #32]	@ (8007400 <TL_BLE_Init+0x60>)
 80073de:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4a07      	ldr	r2, [pc, #28]	@ (8007404 <TL_BLE_Init+0x64>)
 80073e6:	6013      	str	r3, [r2, #0]

  return 0;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200300c8 	.word	0x200300c8
 80073f8:	20030000 	.word	0x20030000
 80073fc:	20030a58 	.word	0x20030a58
 8007400:	200002b8 	.word	0x200002b8
 8007404:	200002bc 	.word	0x200002bc

08007408 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007414:	4b09      	ldr	r3, [pc, #36]	@ (800743c <TL_BLE_SendCmd+0x34>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2201      	movs	r2, #1
 800741c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800741e:	4b07      	ldr	r3, [pc, #28]	@ (800743c <TL_BLE_SendCmd+0x34>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	2001      	movs	r0, #1
 8007428:	f000 f96c 	bl	8007704 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800742c:	f001 fa5c 	bl	80088e8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20030000 	.word	0x20030000

08007440 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007446:	e01c      	b.n	8007482 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007448:	1d3b      	adds	r3, r7, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4812      	ldr	r0, [pc, #72]	@ (8007498 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800744e:	f000 fa76 	bl	800793e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7a5b      	ldrb	r3, [r3, #9]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d003      	beq.n	8007462 <HW_IPCC_BLE_RxEvtNot+0x22>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	7a5b      	ldrb	r3, [r3, #9]
 800745e:	2b0e      	cmp	r3, #14
 8007460:	d105      	bne.n	800746e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4619      	mov	r1, r3
 8007466:	2002      	movs	r0, #2
 8007468:	f000 f94c 	bl	8007704 <OutputDbgTrace>
 800746c:	e004      	b.n	8007478 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4619      	mov	r1, r3
 8007472:	2003      	movs	r0, #3
 8007474:	f000 f946 	bl	8007704 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007478:	4b08      	ldr	r3, [pc, #32]	@ (800749c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4610      	mov	r0, r2
 8007480:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007482:	4805      	ldr	r0, [pc, #20]	@ (8007498 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007484:	f000 f9cc 	bl	8007820 <LST_is_empty>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0dc      	beq.n	8007448 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800748e:	bf00      	nop
}
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200300c8 	.word	0x200300c8
 800749c:	200002b8 	.word	0x200002b8

080074a0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80074a4:	4b02      	ldr	r3, [pc, #8]	@ (80074b0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4798      	blx	r3

  return;
 80074aa:	bf00      	nop
}
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	200002bc 	.word	0x200002bc

080074b4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80074c0:	480d      	ldr	r0, [pc, #52]	@ (80074f8 <TL_SYS_Init+0x44>)
 80074c2:	f000 f99d 	bl	8007800 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <TL_SYS_Init+0x48>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4a08      	ldr	r2, [pc, #32]	@ (80074f8 <TL_SYS_Init+0x44>)
 80074d8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80074da:	f001 fa37 	bl	800894c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a07      	ldr	r2, [pc, #28]	@ (8007500 <TL_SYS_Init+0x4c>)
 80074e4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4a06      	ldr	r2, [pc, #24]	@ (8007504 <TL_SYS_Init+0x50>)
 80074ec:	6013      	str	r3, [r2, #0]

  return 0;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	200300d0 	.word	0x200300d0
 80074fc:	20030000 	.word	0x20030000
 8007500:	200002c0 	.word	0x200002c0
 8007504:	200002c4 	.word	0x200002c4

08007508 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007514:	4b09      	ldr	r3, [pc, #36]	@ (800753c <TL_SYS_SendCmd+0x34>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2210      	movs	r2, #16
 800751c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800751e:	4b07      	ldr	r3, [pc, #28]	@ (800753c <TL_SYS_SendCmd+0x34>)
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4619      	mov	r1, r3
 8007526:	2004      	movs	r0, #4
 8007528:	f000 f8ec 	bl	8007704 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800752c:	f001 fa28 	bl	8008980 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20030000 	.word	0x20030000

08007540 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007544:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	2005      	movs	r0, #5
 800754e:	f000 f8d9 	bl	8007704 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007552:	4b05      	ldr	r3, [pc, #20]	@ (8007568 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a03      	ldr	r2, [pc, #12]	@ (8007564 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007558:	68d2      	ldr	r2, [r2, #12]
 800755a:	6812      	ldr	r2, [r2, #0]
 800755c:	4610      	mov	r0, r2
 800755e:	4798      	blx	r3

  return;
 8007560:	bf00      	nop
}
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20030000 	.word	0x20030000
 8007568:	200002c0 	.word	0x200002c0

0800756c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007572:	e00e      	b.n	8007592 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	4619      	mov	r1, r3
 8007578:	480b      	ldr	r0, [pc, #44]	@ (80075a8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800757a:	f000 f9e0 	bl	800793e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4619      	mov	r1, r3
 8007582:	2006      	movs	r0, #6
 8007584:	f000 f8be 	bl	8007704 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007588:	4b08      	ldr	r3, [pc, #32]	@ (80075ac <HW_IPCC_SYS_EvtNot+0x40>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007592:	4805      	ldr	r0, [pc, #20]	@ (80075a8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007594:	f000 f944 	bl	8007820 <LST_is_empty>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0ea      	beq.n	8007574 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800759e:	bf00      	nop
}
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200300d0 	.word	0x200300d0
 80075ac:	200002c4 	.word	0x200002c4

080075b0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80075b8:	4817      	ldr	r0, [pc, #92]	@ (8007618 <TL_MM_Init+0x68>)
 80075ba:	f000 f921 	bl	8007800 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80075be:	4817      	ldr	r0, [pc, #92]	@ (800761c <TL_MM_Init+0x6c>)
 80075c0:	f000 f91e 	bl	8007800 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80075c4:	4b16      	ldr	r3, [pc, #88]	@ (8007620 <TL_MM_Init+0x70>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	4a16      	ldr	r2, [pc, #88]	@ (8007624 <TL_MM_Init+0x74>)
 80075ca:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80075cc:	4b15      	ldr	r3, [pc, #84]	@ (8007624 <TL_MM_Init+0x74>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6892      	ldr	r2, [r2, #8]
 80075d4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80075d6:	4b13      	ldr	r3, [pc, #76]	@ (8007624 <TL_MM_Init+0x74>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68d2      	ldr	r2, [r2, #12]
 80075de:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80075e0:	4b10      	ldr	r3, [pc, #64]	@ (8007624 <TL_MM_Init+0x74>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007618 <TL_MM_Init+0x68>)
 80075e6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80075e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007624 <TL_MM_Init+0x74>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80075f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <TL_MM_Init+0x74>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6852      	ldr	r2, [r2, #4]
 80075fa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80075fc:	4b09      	ldr	r3, [pc, #36]	@ (8007624 <TL_MM_Init+0x74>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6912      	ldr	r2, [r2, #16]
 8007604:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007606:	4b07      	ldr	r3, [pc, #28]	@ (8007624 <TL_MM_Init+0x74>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6952      	ldr	r2, [r2, #20]
 800760e:	619a      	str	r2, [r3, #24]

  return;
 8007610:	bf00      	nop
}
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200300b8 	.word	0x200300b8
 800761c:	200002b0 	.word	0x200002b0
 8007620:	20030000 	.word	0x20030000
 8007624:	200002c8 	.word	0x200002c8

08007628 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4807      	ldr	r0, [pc, #28]	@ (8007650 <TL_MM_EvtDone+0x28>)
 8007634:	f000 f93c 	bl	80078b0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	2000      	movs	r0, #0
 800763c:	f000 f862 	bl	8007704 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007640:	4804      	ldr	r0, [pc, #16]	@ (8007654 <TL_MM_EvtDone+0x2c>)
 8007642:	f001 f9e3 	bl	8008a0c <HW_IPCC_MM_SendFreeBuf>

  return;
 8007646:	bf00      	nop
}
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	200002b0 	.word	0x200002b0
 8007654:	08007659 	.word	0x08007659

08007658 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800765e:	e00c      	b.n	800767a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	4619      	mov	r1, r3
 8007664:	480a      	ldr	r0, [pc, #40]	@ (8007690 <SendFreeBuf+0x38>)
 8007666:	f000 f96a 	bl	800793e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800766a:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <SendFreeBuf+0x3c>)
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	4611      	mov	r1, r2
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f91b 	bl	80078b0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800767a:	4805      	ldr	r0, [pc, #20]	@ (8007690 <SendFreeBuf+0x38>)
 800767c:	f000 f8d0 	bl	8007820 <LST_is_empty>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ec      	beq.n	8007660 <SendFreeBuf+0x8>
  }

  return;
 8007686:	bf00      	nop
}
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200002b0 	.word	0x200002b0
 8007694:	20030000 	.word	0x20030000

08007698 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800769c:	4805      	ldr	r0, [pc, #20]	@ (80076b4 <TL_TRACES_Init+0x1c>)
 800769e:	f000 f8af 	bl	8007800 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80076a2:	4b05      	ldr	r3, [pc, #20]	@ (80076b8 <TL_TRACES_Init+0x20>)
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	4a03      	ldr	r2, [pc, #12]	@ (80076b4 <TL_TRACES_Init+0x1c>)
 80076a8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80076aa:	f001 fa01 	bl	8008ab0 <HW_IPCC_TRACES_Init>

  return;
 80076ae:	bf00      	nop
}
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	200300c0 	.word	0x200300c0
 80076b8:	20030000 	.word	0x20030000

080076bc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80076c2:	e008      	b.n	80076d6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80076c4:	1d3b      	adds	r3, r7, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	4808      	ldr	r0, [pc, #32]	@ (80076ec <HW_IPCC_TRACES_EvtNot+0x30>)
 80076ca:	f000 f938 	bl	800793e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 f80d 	bl	80076f0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80076d6:	4805      	ldr	r0, [pc, #20]	@ (80076ec <HW_IPCC_TRACES_EvtNot+0x30>)
 80076d8:	f000 f8a2 	bl	8007820 <LST_is_empty>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80076e2:	bf00      	nop
}
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	200300c0 	.word	0x200300c0

080076f0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b06      	cmp	r3, #6
 8007714:	d845      	bhi.n	80077a2 <OutputDbgTrace+0x9e>
 8007716:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <OutputDbgTrace+0x18>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007739 	.word	0x08007739
 8007720:	0800775d 	.word	0x0800775d
 8007724:	08007763 	.word	0x08007763
 8007728:	08007777 	.word	0x08007777
 800772c:	08007783 	.word	0x08007783
 8007730:	08007789 	.word	0x08007789
 8007734:	08007797 	.word	0x08007797
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	7a5b      	ldrb	r3, [r3, #9]
 8007740:	2bff      	cmp	r3, #255	@ 0xff
 8007742:	d005      	beq.n	8007750 <OutputDbgTrace+0x4c>
 8007744:	2bff      	cmp	r3, #255	@ 0xff
 8007746:	dc05      	bgt.n	8007754 <OutputDbgTrace+0x50>
 8007748:	2b0e      	cmp	r3, #14
 800774a:	d005      	beq.n	8007758 <OutputDbgTrace+0x54>
 800774c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800774e:	e001      	b.n	8007754 <OutputDbgTrace+0x50>
          break;
 8007750:	bf00      	nop
 8007752:	e027      	b.n	80077a4 <OutputDbgTrace+0xa0>
          break;
 8007754:	bf00      	nop
 8007756:	e025      	b.n	80077a4 <OutputDbgTrace+0xa0>
          break;
 8007758:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800775a:	e023      	b.n	80077a4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007760:	e020      	b.n	80077a4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	7a5b      	ldrb	r3, [r3, #9]
 800776a:	2b0e      	cmp	r3, #14
 800776c:	d001      	beq.n	8007772 <OutputDbgTrace+0x6e>
 800776e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007770:	e000      	b.n	8007774 <OutputDbgTrace+0x70>
          break;
 8007772:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007774:	e016      	b.n	80077a4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	7a5b      	ldrb	r3, [r3, #9]
 800777e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007780:	e010      	b.n	80077a4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007786:	e00d      	b.n	80077a4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007792:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007794:	e006      	b.n	80077a4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	7a5b      	ldrb	r3, [r3, #9]
 800779e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80077a0:	e000      	b.n	80077a4 <OutputDbgTrace+0xa0>

    default:
      break;
 80077a2:	bf00      	nop
  }

  return;
 80077a4:	bf00      	nop
}
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80077ba:	4b0f      	ldr	r3, [pc, #60]	@ (80077f8 <OTP_Read+0x48>)
 80077bc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80077be:	e002      	b.n	80077c6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b08      	subs	r3, #8
 80077c4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3307      	adds	r3, #7
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d003      	beq.n	80077da <OTP_Read+0x2a>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a09      	ldr	r2, [pc, #36]	@ (80077fc <OTP_Read+0x4c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d1f2      	bne.n	80077c0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3307      	adds	r3, #7
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	79fa      	ldrb	r2, [r7, #7]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d001      	beq.n	80077ea <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80077ea:	68fb      	ldr	r3, [r7, #12]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	1fff73f8 	.word	0x1fff73f8
 80077fc:	1fff7000 	.word	0x1fff7000

08007800 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	605a      	str	r2, [r3, #4]
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007828:	f3ef 8310 	mrs	r3, PRIMASK
 800782c:	60fb      	str	r3, [r7, #12]
  return(result);
 800782e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007830:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007832:	b672      	cpsid	i
}
 8007834:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d102      	bne.n	8007846 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
 8007844:	e001      	b.n	800784a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8310 	mrs	r3, PRIMASK
 8007872:	60fb      	str	r3, [r7, #12]
  return(result);
 8007874:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007876:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007878:	b672      	cpsid	i
}
 800787a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	605a      	str	r2, [r3, #4]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f383 8810 	msr	PRIMASK, r3
}
 80078a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ba:	f3ef 8310 	mrs	r3, PRIMASK
 80078be:	60fb      	str	r3, [r7, #12]
  return(result);
 80078c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80078c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80078c4:	b672      	cpsid	i
}
 80078c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f383 8810 	msr	PRIMASK, r3
}
 80078ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80078f0:	bf00      	nop
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007904:	f3ef 8310 	mrs	r3, PRIMASK
 8007908:	60fb      	str	r3, [r7, #12]
  return(result);
 800790a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800790c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800790e:	b672      	cpsid	i
}
 8007910:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6852      	ldr	r2, [r2, #4]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f383 8810 	msr	PRIMASK, r3
}
 8007930:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007932:	bf00      	nop
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007948:	f3ef 8310 	mrs	r3, PRIMASK
 800794c:	60fb      	str	r3, [r7, #12]
  return(result);
 800794e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007952:	b672      	cpsid	i
}
 8007954:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff ffca 	bl	80078fc <LST_remove_node>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007974:	bf00      	nop
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007980:	4b03      	ldr	r3, [pc, #12]	@ (8007990 <LL_FLASH_GetUDN+0x14>)
 8007982:	681b      	ldr	r3, [r3, #0]
}
 8007984:	4618      	mov	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	1fff7580 	.word	0x1fff7580

08007994 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007998:	4b03      	ldr	r3, [pc, #12]	@ (80079a8 <LL_FLASH_GetDeviceID+0x14>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	b2db      	uxtb	r3, r3
}
 800799e:	4618      	mov	r0, r3
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	1fff7584 	.word	0x1fff7584

080079ac <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80079b0:	4b03      	ldr	r3, [pc, #12]	@ (80079c0 <LL_FLASH_GetSTCompanyID+0x14>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	0a1b      	lsrs	r3, r3, #8
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	1fff7584 	.word	0x1fff7584

080079c4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80079c4:	b5b0      	push	{r4, r5, r7, lr}
 80079c6:	b090      	sub	sp, #64	@ 0x40
 80079c8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079ca:	2392      	movs	r3, #146	@ 0x92
 80079cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80079d0:	4b25      	ldr	r3, [pc, #148]	@ (8007a68 <APP_BLE_Init+0xa4>)
 80079d2:	1d3c      	adds	r4, r7, #4
 80079d4:	461d      	mov	r5, r3
 80079d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079e6:	c403      	stmia	r4!, {r0, r1}
 80079e8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80079ea:	f000 f921 	bl	8007c30 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80079ee:	2101      	movs	r1, #1
 80079f0:	2002      	movs	r0, #2
 80079f2:	f001 f8c5 	bl	8008b80 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80079f6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a6c <APP_BLE_Init+0xa8>)
 80079f8:	2100      	movs	r1, #0
 80079fa:	2002      	movs	r0, #2
 80079fc:	f001 fa22 	bl	8008e44 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007a00:	1d3b      	adds	r3, r7, #4
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f8c6 	bl	8006b94 <SHCI_C2_BLE_Init>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007a0e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007a16:	f7fa f912 	bl	8001c3e <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007a1a:	f000 f91f 	bl	8007c5c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007a1e:	f7ff f813 	bl	8006a48 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007a22:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <APP_BLE_Init+0xac>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007a2a:	4b11      	ldr	r3, [pc, #68]	@ (8007a70 <APP_BLE_Init+0xac>)
 8007a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a30:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007a32:	4a10      	ldr	r2, [pc, #64]	@ (8007a74 <APP_BLE_Init+0xb0>)
 8007a34:	2100      	movs	r1, #0
 8007a36:	2001      	movs	r0, #1
 8007a38:	f001 fa04 	bl	8008e44 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007a3c:	2006      	movs	r0, #6
 8007a3e:	f7fe fe76 	bl	800672e <aci_hal_set_radio_activity_mask>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007a48:	f000 fafc 	bl	8008044 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007a4c:	4b08      	ldr	r3, [pc, #32]	@ (8007a70 <APP_BLE_Init+0xac>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007a52:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <APP_BLE_Init+0xac>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f000 f9b3 	bl	8007dc4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007a5e:	bf00      	nop
}
 8007a60:	3740      	adds	r7, #64	@ 0x40
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bdb0      	pop	{r4, r5, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	08009164 	.word	0x08009164
 8007a6c:	08006db1 	.word	0x08006db1
 8007a70:	200002d4 	.word	0x200002d4
 8007a74:	08007ead 	.word	0x08007ead

08007a78 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08c      	sub	sp, #48	@ 0x30
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007a80:	2392      	movs	r3, #146	@ 0x92
 8007a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2bff      	cmp	r3, #255	@ 0xff
 8007a92:	d05c      	beq.n	8007b4e <SVCCTL_App_Notification+0xd6>
 8007a94:	2bff      	cmp	r3, #255	@ 0xff
 8007a96:	f300 80bd 	bgt.w	8007c14 <SVCCTL_App_Notification+0x19c>
 8007a9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a9c:	d02b      	beq.n	8007af6 <SVCCTL_App_Notification+0x7e>
 8007a9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aa0:	f300 80b8 	bgt.w	8007c14 <SVCCTL_App_Notification+0x19c>
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d002      	beq.n	8007aae <SVCCTL_App_Notification+0x36>
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d020      	beq.n	8007aee <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007aac:	e0b2      	b.n	8007c14 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	4b59      	ldr	r3, [pc, #356]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007abe:	8adb      	ldrh	r3, [r3, #22]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d106      	bne.n	8007ad2 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007ac4:	4b57      	ldr	r3, [pc, #348]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007aca:	4b56      	ldr	r3, [pc, #344]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f000 f976 	bl	8007dc4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007ad8:	4b53      	ldr	r3, [pc, #332]	@ (8007c28 <SVCCTL_App_Notification+0x1b0>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007ade:	4b51      	ldr	r3, [pc, #324]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007ae0:	8ada      	ldrh	r2, [r3, #22]
 8007ae2:	4b51      	ldr	r3, [pc, #324]	@ (8007c28 <SVCCTL_App_Notification+0x1b0>)
 8007ae4:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007ae6:	4850      	ldr	r0, [pc, #320]	@ (8007c28 <SVCCTL_App_Notification+0x1b0>)
 8007ae8:	f000 fa86 	bl	8007ff8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007aec:	e095      	b.n	8007c1a <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af0:	3302      	adds	r3, #2
 8007af2:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007af4:	e091      	b.n	8007c1a <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af8:	3302      	adds	r3, #2
 8007afa:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d001      	beq.n	8007b08 <SVCCTL_App_Notification+0x90>
 8007b04:	2b03      	cmp	r3, #3
          break;
 8007b06:	e021      	b.n	8007b4c <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007b0e:	4b45      	ldr	r3, [pc, #276]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007b10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d104      	bne.n	8007b22 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007b18:	4b42      	ldr	r3, [pc, #264]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007b1a:	2206      	movs	r2, #6
 8007b1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007b20:	e003      	b.n	8007b2a <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007b22:	4b40      	ldr	r3, [pc, #256]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007b24:	2205      	movs	r2, #5
 8007b26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	4b3c      	ldr	r3, [pc, #240]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007b34:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007b36:	4b3c      	ldr	r3, [pc, #240]	@ (8007c28 <SVCCTL_App_Notification+0x1b0>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007b3c:	4b39      	ldr	r3, [pc, #228]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007b3e:	8ada      	ldrh	r2, [r3, #22]
 8007b40:	4b39      	ldr	r3, [pc, #228]	@ (8007c28 <SVCCTL_App_Notification+0x1b0>)
 8007b42:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007b44:	4838      	ldr	r0, [pc, #224]	@ (8007c28 <SVCCTL_App_Notification+0x1b0>)
 8007b46:	f000 fa57 	bl	8007ff8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007b4a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007b4c:	e065      	b.n	8007c1a <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b50:	3302      	adds	r3, #2
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d048      	beq.n	8007bf4 <SVCCTL_App_Notification+0x17c>
 8007b62:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007b66:	4293      	cmp	r3, r2
 8007b68:	dc56      	bgt.n	8007c18 <SVCCTL_App_Notification+0x1a0>
 8007b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b6e:	d04b      	beq.n	8007c08 <SVCCTL_App_Notification+0x190>
 8007b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b74:	dc50      	bgt.n	8007c18 <SVCCTL_App_Notification+0x1a0>
 8007b76:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	dc4c      	bgt.n	8007c18 <SVCCTL_App_Notification+0x1a0>
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b82:	dc04      	bgt.n	8007b8e <SVCCTL_App_Notification+0x116>
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d041      	beq.n	8007c0c <SVCCTL_App_Notification+0x194>
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d039      	beq.n	8007c00 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007b8c:	e044      	b.n	8007c18 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8007b8e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007b92:	2b09      	cmp	r3, #9
 8007b94:	d840      	bhi.n	8007c18 <SVCCTL_App_Notification+0x1a0>
 8007b96:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <SVCCTL_App_Notification+0x124>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007c19 	.word	0x08007c19
 8007ba8:	08007c19 	.word	0x08007c19
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007c19 	.word	0x08007c19
 8007bb4:	08007c11 	.word	0x08007c11
 8007bb8:	08007c19 	.word	0x08007c19
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	08007c11 	.word	0x08007c11
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007bc4:	4b17      	ldr	r3, [pc, #92]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007bc6:	8adb      	ldrh	r3, [r3, #22]
 8007bc8:	4918      	ldr	r1, [pc, #96]	@ (8007c2c <SVCCTL_App_Notification+0x1b4>)
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fd fef2 	bl	80059b4 <aci_gap_pass_key_resp>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007bd6:	e01c      	b.n	8007c12 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007bd8:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007bda:	8adb      	ldrh	r3, [r3, #22]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe f8fc 	bl	8005ddc <aci_gap_numeric_comparison_value_confirm_yesno>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007bea:	e012      	b.n	8007c12 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	3302      	adds	r3, #2
 8007bf0:	623b      	str	r3, [r7, #32]
          break;
 8007bf2:	e00e      	b.n	8007c12 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8007c24 <SVCCTL_App_Notification+0x1ac>)
 8007bf6:	8adb      	ldrh	r3, [r3, #22]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fc02 	bl	8006402 <aci_gatt_confirm_indication>
        break;
 8007bfe:	e008      	b.n	8007c12 <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	3302      	adds	r3, #2
 8007c04:	61fb      	str	r3, [r7, #28]
          break;
 8007c06:	e004      	b.n	8007c12 <SVCCTL_App_Notification+0x19a>
          break;
 8007c08:	bf00      	nop
 8007c0a:	e005      	b.n	8007c18 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007c0c:	bf00      	nop
 8007c0e:	e003      	b.n	8007c18 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007c10:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007c12:	e001      	b.n	8007c18 <SVCCTL_App_Notification+0x1a0>
      break;
 8007c14:	bf00      	nop
 8007c16:	e000      	b.n	8007c1a <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007c18:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007c1a:	2301      	movs	r3, #1
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3730      	adds	r7, #48	@ 0x30
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	200002d4 	.word	0x200002d4
 8007c28:	20000358 	.word	0x20000358
 8007c2c:	0001b207 	.word	0x0001b207

08007c30 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <Ble_Tl_Init+0x20>)
 8007c38:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007c3a:	4b06      	ldr	r3, [pc, #24]	@ (8007c54 <Ble_Tl_Init+0x24>)
 8007c3c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007c3e:	463b      	mov	r3, r7
 8007c40:	4619      	mov	r1, r3
 8007c42:	4805      	ldr	r0, [pc, #20]	@ (8007c58 <Ble_Tl_Init+0x28>)
 8007c44:	f7ff f898 	bl	8006d78 <hci_init>

  return;
 8007c48:	bf00      	nop
}
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200300d8 	.word	0x200300d8
 8007c54:	08007f5d 	.word	0x08007f5d
 8007c58:	08007f25 	.word	0x08007f25

08007c5c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c5e:	b08d      	sub	sp, #52	@ 0x34
 8007c60:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007c62:	2300      	movs	r3, #0
 8007c64:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007c66:	2392      	movs	r3, #146	@ 0x92
 8007c68:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007c6a:	f7fe fdb4 	bl	80067d6 <hci_reset>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007c72:	f000 f8d7 	bl	8007e24 <BleGetBdAddress>
 8007c76:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	2106      	movs	r1, #6
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f7fe fc6a 	bl	8006556 <aci_hal_write_config_data>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007c86:	4a4a      	ldr	r2, [pc, #296]	@ (8007db0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007c88:	2110      	movs	r1, #16
 8007c8a:	2018      	movs	r0, #24
 8007c8c:	f7fe fc63 	bl	8006556 <aci_hal_write_config_data>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007c94:	4a47      	ldr	r2, [pc, #284]	@ (8007db4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007c96:	2110      	movs	r1, #16
 8007c98:	2008      	movs	r0, #8
 8007c9a:	f7fe fc5c 	bl	8006556 <aci_hal_write_config_data>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007ca2:	211f      	movs	r1, #31
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7fe fcdb 	bl	8006660 <aci_hal_set_tx_power_level>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007cae:	f7fe f8fc 	bl	8005eaa <aci_gatt_init>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01f      	beq.n	8007d08 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8007db8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007cca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007ccc:	1dba      	adds	r2, r7, #6
 8007cce:	7bf8      	ldrb	r0, [r7, #15]
 8007cd0:	1cbb      	adds	r3, r7, #2
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	1d3b      	adds	r3, r7, #4
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	2208      	movs	r2, #8
 8007cdc:	2100      	movs	r1, #0
 8007cde:	f7fd fed0 	bl	8005a82 <aci_gap_init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007ce6:	88fc      	ldrh	r4, [r7, #6]
 8007ce8:	88bd      	ldrh	r5, [r7, #4]
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f7f8 fa46 	bl	800017c <strlen>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7fe fad6 	bl	80062b0 <aci_gatt_update_char_value>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007d08:	88f8      	ldrh	r0, [r7, #6]
 8007d0a:	8879      	ldrh	r1, [r7, #2]
 8007d0c:	463b      	mov	r3, r7
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	2302      	movs	r3, #2
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7fe facc 	bl	80062b0 <aci_gatt_update_char_value>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	2102      	movs	r1, #2
 8007d20:	2000      	movs	r0, #0
 8007d22:	f7fe fd7c 	bl	800681e <hci_le_set_default_phy>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007d2a:	4b24      	ldr	r3, [pc, #144]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007d30:	4b22      	ldr	r3, [pc, #136]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd fd25 	bl	8005784 <aci_gap_set_io_capability>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007d44:	4b1d      	ldr	r3, [pc, #116]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d46:	2208      	movs	r2, #8
 8007d48:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d4c:	2210      	movs	r2, #16
 8007d4e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007d50:	4b1a      	ldr	r3, [pc, #104]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007d56:	4b19      	ldr	r3, [pc, #100]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d58:	4a19      	ldr	r2, [pc, #100]	@ (8007dc0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007d5a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007d5c:	4b17      	ldr	r3, [pc, #92]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007d62:	4b16      	ldr	r3, [pc, #88]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d64:	789c      	ldrb	r4, [r3, #2]
 8007d66:	4b15      	ldr	r3, [pc, #84]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d68:	785d      	ldrb	r5, [r3, #1]
 8007d6a:	4b14      	ldr	r3, [pc, #80]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	4a13      	ldr	r2, [pc, #76]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d70:	7952      	ldrb	r2, [r2, #5]
 8007d72:	4912      	ldr	r1, [pc, #72]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d74:	78c9      	ldrb	r1, [r1, #3]
 8007d76:	4811      	ldr	r0, [pc, #68]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d78:	6880      	ldr	r0, [r0, #8]
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	9604      	str	r6, [sp, #16]
 8007d7e:	9003      	str	r0, [sp, #12]
 8007d80:	9102      	str	r1, [sp, #8]
 8007d82:	9201      	str	r2, [sp, #4]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7fd fd4d 	bl	800582c <aci_gap_set_authentication_requirement>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007d96:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007d98:	789b      	ldrb	r3, [r3, #2]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007d9e:	f7fd ff8f 	bl	8005cc0 <aci_gap_configure_filter_accept_list>
 8007da2:	4603      	mov	r3, r0
 8007da4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dae:	bf00      	nop
 8007db0:	0800937c 	.word	0x0800937c
 8007db4:	0800938c 	.word	0x0800938c
 8007db8:	080091a0 	.word	0x080091a0
 8007dbc:	200002d4 	.word	0x200002d4
 8007dc0:	0001b207 	.word	0x0001b207

08007dc4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08c      	sub	sp, #48	@ 0x30
 8007dc8:	af08      	add	r7, sp, #32
 8007dca:	4603      	mov	r3, r0
 8007dcc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007dce:	2392      	movs	r3, #146	@ 0x92
 8007dd0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007dd2:	4a12      	ldr	r2, [pc, #72]	@ (8007e1c <Adv_Request+0x58>)
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9306      	str	r3, [sp, #24]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9305      	str	r3, [sp, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9303      	str	r3, [sp, #12]
 8007dea:	2300      	movs	r3, #0
 8007dec:	9302      	str	r3, [sp, #8]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	22a0      	movs	r2, #160	@ 0xa0
 8007dfa:	2180      	movs	r1, #128	@ 0x80
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f7fd fbc7 	bl	8005590 <aci_gap_set_discoverable>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007e06:	4906      	ldr	r1, [pc, #24]	@ (8007e20 <Adv_Request+0x5c>)
 8007e08:	2019      	movs	r0, #25
 8007e0a:	f7fd fee7 	bl	8005bdc <aci_gap_update_adv_data>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007e12:	bf00      	nop
}
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	200002d4 	.word	0x200002d4
 8007e20:	2000002c 	.word	0x2000002c

08007e24 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007e2a:	f7ff fda7 	bl	800797c <LL_FLASH_GetUDN>
 8007e2e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d023      	beq.n	8007e80 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007e38:	f7ff fdb8 	bl	80079ac <LL_FLASH_GetSTCompanyID>
 8007e3c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007e3e:	f7ff fda9 	bl	8007994 <LL_FLASH_GetDeviceID>
 8007e42:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	4b16      	ldr	r3, [pc, #88]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e4a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e54:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e5c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4b10      	ldr	r3, [pc, #64]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e64:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	0a1b      	lsrs	r3, r3, #8
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e6e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e78:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <BleGetBdAddress+0x80>)
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	e00b      	b.n	8007e98 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007e80:	2000      	movs	r0, #0
 8007e82:	f7ff fc95 	bl	80077b0 <OTP_Read>
 8007e86:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	e001      	b.n	8007e98 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007e94:	4b04      	ldr	r3, [pc, #16]	@ (8007ea8 <BleGetBdAddress+0x84>)
 8007e96:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007e98:	697b      	ldr	r3, [r7, #20]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	200002cc 	.word	0x200002cc
 8007ea8:	08009374 	.word	0x08009374

08007eac <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007edc <Adv_Cancel+0x30>)
 8007eb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d00a      	beq.n	8007ed2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ebc:	2392      	movs	r3, #146	@ 0x92
 8007ebe:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007ec0:	f7fd fb42 	bl	8005548 <aci_gap_set_non_discoverable>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007ec8:	4b04      	ldr	r3, [pc, #16]	@ (8007edc <Adv_Cancel+0x30>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
}
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	200002d4 	.word	0x200002d4

08007ee0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007ee8:	2100      	movs	r1, #0
 8007eea:	2002      	movs	r0, #2
 8007eec:	f000 ffcc 	bl	8008e88 <UTIL_SEQ_SetTask>

  return;
 8007ef0:	bf00      	nop
}
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007f00:	2001      	movs	r0, #1
 8007f02:	f001 f82d 	bl	8008f60 <UTIL_SEQ_SetEvt>

  return;
 8007f06:	bf00      	nop
}
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007f16:	2001      	movs	r0, #1
 8007f18:	f001 f842 	bl	8008fa0 <UTIL_SEQ_WaitEvt>

  return;
 8007f1c:	bf00      	nop
}
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	3308      	adds	r3, #8
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fdd8 	bl	8006aec <SVCCTL_UserEvtRx>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007f4c:	e003      	b.n	8007f56 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
  return;
 8007f54:	bf00      	nop
}
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <BLE_StatusNot+0x16>
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d006      	beq.n	8007f7e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007f70:	e00b      	b.n	8007f8a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007f72:	2303      	movs	r3, #3
 8007f74:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 ffb2 	bl	8008ee0 <UTIL_SEQ_PauseTask>
      break;
 8007f7c:	e005      	b.n	8007f8a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 ffcc 	bl	8008f20 <UTIL_SEQ_ResumeTask>
      break;
 8007f88:	bf00      	nop
  }

  return;
 8007f8a:	bf00      	nop
}
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <Custom_STM_App_Notification>:
static void Sensor_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d81f      	bhi.n	8007fe4 <Custom_STM_App_Notification+0x50>
 8007fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <Custom_STM_App_Notification+0x18>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fe5 	.word	0x08007fe5
 8007fb0:	08007fbd 	.word	0x08007fbd
 8007fb4:	08007fd3 	.word	0x08007fd3
 8007fb8:	08007fe5 	.word	0x08007fe5
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_READ_EVT */
      break;

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 1;
 8007fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff0 <Custom_STM_App_Notification+0x5c>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]
		HW_TS_Start(TemperatureTimerId,
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <Custom_STM_App_Notification+0x60>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f242 6166 	movw	r1, #9830	@ 0x2666
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7f9 f950 	bl	8001270 <HW_TS_Start>
				MS_TO_RTC_TICKS(SENSOR_UPDATE_PERIOD_MS));
		APP_DBG_MSG("## Combined Notifications ENABLED\n");
      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT */
      break;
 8007fd0:	e009      	b.n	8007fe6 <Custom_STM_App_Notification+0x52>

    case CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 8007fd2:	4b07      	ldr	r3, [pc, #28]	@ (8007ff0 <Custom_STM_App_Notification+0x5c>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
		HW_TS_Stop(TemperatureTimerId);
 8007fd8:	4b06      	ldr	r3, [pc, #24]	@ (8007ff4 <Custom_STM_App_Notification+0x60>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7f9 f8c3 	bl	8001168 <HW_TS_Stop>
		APP_DBG_MSG("## Combined Notifications DISABLED\n");

      /* USER CODE END CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT */
      break;
 8007fe2:	e000      	b.n	8007fe6 <Custom_STM_App_Notification+0x52>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007fe4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007fe6:	bf00      	nop
}
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	2000035c 	.word	0x2000035c
 8007ff4:	20000360 	.word	0x20000360

08007ff8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <Custom_APP_Notification+0x16>
 8008008:	2b01      	cmp	r3, #1
 800800a:	d005      	beq.n	8008018 <Custom_APP_Notification+0x20>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800800c:	e011      	b.n	8008032 <Custom_APP_Notification+0x3a>
		Custom_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	885a      	ldrh	r2, [r3, #2]
 8008012:	4b0a      	ldr	r3, [pc, #40]	@ (800803c <Custom_APP_Notification+0x44>)
 8008014:	805a      	strh	r2, [r3, #2]
      break;
 8008016:	e00c      	b.n	8008032 <Custom_APP_Notification+0x3a>
		if (Custom_App_Context.Temperature_pressure_Notification_Status == 1) {
 8008018:	4b08      	ldr	r3, [pc, #32]	@ (800803c <Custom_APP_Notification+0x44>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d104      	bne.n	800802a <Custom_APP_Notification+0x32>
			HW_TS_Stop(TemperatureTimerId);
 8008020:	4b07      	ldr	r3, [pc, #28]	@ (8008040 <Custom_APP_Notification+0x48>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f7f9 f89f 	bl	8001168 <HW_TS_Stop>
		Custom_App_Context.Temperature_pressure_Notification_Status = 0;
 800802a:	4b04      	ldr	r3, [pc, #16]	@ (800803c <Custom_APP_Notification+0x44>)
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
      break;
 8008030:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008032:	bf00      	nop
}
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2000035c 	.word	0x2000035c
 8008040:	20000360 	.word	0x20000360

08008044 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//Sensor_ReadCoefficients();
	HW_TS_Create(0, &TemperatureTimerId, hw_ts_Repeated, Sensor_Timer_Callback);
 8008048:	4b03      	ldr	r3, [pc, #12]	@ (8008058 <Custom_APP_Init+0x14>)
 800804a:	2201      	movs	r2, #1
 800804c:	4903      	ldr	r1, [pc, #12]	@ (800805c <Custom_APP_Init+0x18>)
 800804e:	2000      	movs	r0, #0
 8008050:	f7f9 f810 	bl	8001074 <HW_TS_Create>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008054:	bf00      	nop
}
 8008056:	bd80      	pop	{r7, pc}
 8008058:	08008255 	.word	0x08008255
 800805c:	20000360 	.word	0x20000360

08008060 <Sensor_ReadTempPressure>:

  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Sensor_ReadTempPressure(void) {
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
	/* 1) Send START CONVERSION (temp+pressure) */
	TX_BUFFER[0] = start_conversion_cmd;
 8008064:	224c      	movs	r2, #76	@ 0x4c
 8008066:	4b66      	ldr	r3, [pc, #408]	@ (8008200 <Sensor_ReadTempPressure+0x1a0>)
 8008068:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800806a:	2200      	movs	r2, #0
 800806c:	2110      	movs	r1, #16
 800806e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008072:	f7fa fd31 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 8008076:	f04f 33ff 	mov.w	r3, #4294967295
 800807a:	2201      	movs	r2, #1
 800807c:	4960      	ldr	r1, [pc, #384]	@ (8008200 <Sensor_ReadTempPressure+0x1a0>)
 800807e:	4861      	ldr	r0, [pc, #388]	@ (8008204 <Sensor_ReadTempPressure+0x1a4>)
 8008080:	f7fc fbd8 	bl	8004834 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008084:	2201      	movs	r2, #1
 8008086:	2110      	movs	r1, #16
 8008088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800808c:	f7fa fd24 	bl	8002ad8 <HAL_GPIO_WritePin>

	/* 2) Wait ~300 ms for conversion to complete */

	/* 3) Send READ ADC command, read 6 bytes total */
	TX_BUFFER[0] = read_adc_cmd;
 8008090:	225c      	movs	r2, #92	@ 0x5c
 8008092:	4b5b      	ldr	r3, [pc, #364]	@ (8008200 <Sensor_ReadTempPressure+0x1a0>)
 8008094:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8008096:	2200      	movs	r2, #0
 8008098:	2110      	movs	r1, #16
 800809a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800809e:	f7fa fd1b 	bl	8002ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TX_BUFFER, 1, HAL_MAX_DELAY);
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	2201      	movs	r2, #1
 80080a8:	4955      	ldr	r1, [pc, #340]	@ (8008200 <Sensor_ReadTempPressure+0x1a0>)
 80080aa:	4856      	ldr	r0, [pc, #344]	@ (8008204 <Sensor_ReadTempPressure+0x1a4>)
 80080ac:	f7fc fbc2 	bl	8004834 <HAL_SPI_Transmit>
	// We expect: RX_BUFFER[0..2] = raw_temp (MSB, mid, LSB)
	//            RX_BUFFER[3..5] = raw_pressure
	HAL_SPI_Receive(&hspi1, RX_BUFFER, 6, HAL_MAX_DELAY);
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	2206      	movs	r2, #6
 80080b6:	4954      	ldr	r1, [pc, #336]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080b8:	4852      	ldr	r0, [pc, #328]	@ (8008204 <Sensor_ReadTempPressure+0x1a4>)
 80080ba:	f7fc fd31 	bl	8004b20 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80080be:	2201      	movs	r2, #1
 80080c0:	2110      	movs	r1, #16
 80080c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80080c6:	f7fa fd07 	bl	8002ad8 <HAL_GPIO_WritePin>

	/* 4) Merge bytes: raw_temp = 24‐bit, raw_pressure = 24‐bit */
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 80080ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	041a      	lsls	r2, r3, #16
 80080d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	4313      	orrs	r3, r2
			| (uint32_t) RX_BUFFER[2];
 80080d8:	4a4b      	ldr	r2, [pc, #300]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080da:	7892      	ldrb	r2, [r2, #2]
 80080dc:	4313      	orrs	r3, r2
	raw_temp = ((uint32_t) RX_BUFFER[0] << 16) | ((uint32_t) RX_BUFFER[1] << 8)
 80080de:	4a4b      	ldr	r2, [pc, #300]	@ (800820c <Sensor_ReadTempPressure+0x1ac>)
 80080e0:	6013      	str	r3, [r2, #0]
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 80080e2:	4b49      	ldr	r3, [pc, #292]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080e4:	78db      	ldrb	r3, [r3, #3]
 80080e6:	041a      	lsls	r2, r3, #16
			| ((uint32_t) RX_BUFFER[4] << 8) | (uint32_t) RX_BUFFER[5];
 80080e8:	4b47      	ldr	r3, [pc, #284]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	4313      	orrs	r3, r2
 80080f0:	4a45      	ldr	r2, [pc, #276]	@ (8008208 <Sensor_ReadTempPressure+0x1a8>)
 80080f2:	7952      	ldrb	r2, [r2, #5]
 80080f4:	4313      	orrs	r3, r2
	raw_pressure = ((uint32_t) RX_BUFFER[3] << 16)
 80080f6:	4a46      	ldr	r2, [pc, #280]	@ (8008210 <Sensor_ReadTempPressure+0x1b0>)
 80080f8:	6013      	str	r3, [r2, #0]

	/* 5) Compute “temperature” per your formula (as float) */
	// temperature = C1 * raw_temp / 2^29 – C3 * raw_pressure / 2^35 – C2/64
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 80080fa:	4b46      	ldr	r3, [pc, #280]	@ (8008214 <Sensor_ReadTempPressure+0x1b4>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008106:	4b41      	ldr	r3, [pc, #260]	@ (800820c <Sensor_ReadTempPressure+0x1ac>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008116:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8008218 <Sensor_ReadTempPressure+0x1b8>
 800811a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) C3 * (float) raw_pressure / 34359738368.0f)
 800811e:	4b3f      	ldr	r3, [pc, #252]	@ (800821c <Sensor_ReadTempPressure+0x1bc>)
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	4b39      	ldr	r3, [pc, #228]	@ (8008210 <Sensor_ReadTempPressure+0x1b0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008136:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800813a:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8008220 <Sensor_ReadTempPressure+0x1c0>
 800813e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008142:	ee37 7a67 	vsub.f32	s14, s14, s15
			- ((float) C2 / 64.0f);
 8008146:	4b37      	ldr	r3, [pc, #220]	@ (8008224 <Sensor_ReadTempPressure+0x1c4>)
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008152:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8008228 <Sensor_ReadTempPressure+0x1c8>
 8008156:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800815a:	ee77 7a67 	vsub.f32	s15, s14, s15
	temperature = ((float) C1 * (float) raw_temp / 536870912.0f)
 800815e:	4b33      	ldr	r3, [pc, #204]	@ (800822c <Sensor_ReadTempPressure+0x1cc>)
 8008160:	edc3 7a00 	vstr	s15, [r3]

	/* 6) Compute offset & sensitivity */
	offset = (float) C6 + ((float) C7 * temperature / 512.0f);
 8008164:	4b32      	ldr	r3, [pc, #200]	@ (8008230 <Sensor_ReadTempPressure+0x1d0>)
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	ee07 3a90 	vmov	s15, r3
 800816c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008170:	4b30      	ldr	r3, [pc, #192]	@ (8008234 <Sensor_ReadTempPressure+0x1d4>)
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	ee07 3a90 	vmov	s15, r3
 8008178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817c:	4b2b      	ldr	r3, [pc, #172]	@ (800822c <Sensor_ReadTempPressure+0x1cc>)
 800817e:	edd3 7a00 	vldr	s15, [r3]
 8008182:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008186:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8008238 <Sensor_ReadTempPressure+0x1d8>
 800818a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800818e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008192:	4b2a      	ldr	r3, [pc, #168]	@ (800823c <Sensor_ReadTempPressure+0x1dc>)
 8008194:	edc3 7a00 	vstr	s15, [r3]
	sensitivity = (float) C8 + ((float) C9 * temperature / 512.0f);
 8008198:	4b29      	ldr	r3, [pc, #164]	@ (8008240 <Sensor_ReadTempPressure+0x1e0>)
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081a4:	4b27      	ldr	r3, [pc, #156]	@ (8008244 <Sensor_ReadTempPressure+0x1e4>)
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b0:	4b1e      	ldr	r3, [pc, #120]	@ (800822c <Sensor_ReadTempPressure+0x1cc>)
 80081b2:	edd3 7a00 	vldr	s15, [r3]
 80081b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80081ba:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8008238 <Sensor_ReadTempPressure+0x1d8>
 80081be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80081c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081c6:	4b20      	ldr	r3, [pc, #128]	@ (8008248 <Sensor_ReadTempPressure+0x1e8>)
 80081c8:	edc3 7a00 	vstr	s15, [r3]

	/* 7) Finally, compute pressure: */
	// pressure = raw_pressure * sensitivity / 2^22 – offset
	pressure = ((float) raw_pressure * sensitivity / 4194304.0f) - offset;
 80081cc:	4b10      	ldr	r3, [pc, #64]	@ (8008210 <Sensor_ReadTempPressure+0x1b0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008248 <Sensor_ReadTempPressure+0x1e8>)
 80081da:	edd3 7a00 	vldr	s15, [r3]
 80081de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800824c <Sensor_ReadTempPressure+0x1ec>
 80081e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80081ea:	4b14      	ldr	r3, [pc, #80]	@ (800823c <Sensor_ReadTempPressure+0x1dc>)
 80081ec:	edd3 7a00 	vldr	s15, [r3]
 80081f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081f4:	4b16      	ldr	r3, [pc, #88]	@ (8008250 <Sensor_ReadTempPressure+0x1f0>)
 80081f6:	edc3 7a00 	vstr	s15, [r3]
}
 80081fa:	bf00      	nop
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000248 	.word	0x20000248
 8008204:	200001b8 	.word	0x200001b8
 8008208:	2000024c 	.word	0x2000024c
 800820c:	20000234 	.word	0x20000234
 8008210:	20000230 	.word	0x20000230
 8008214:	2000021c 	.word	0x2000021c
 8008218:	4e000000 	.word	0x4e000000
 800821c:	20000220 	.word	0x20000220
 8008220:	51000000 	.word	0x51000000
 8008224:	2000021e 	.word	0x2000021e
 8008228:	42800000 	.word	0x42800000
 800822c:	20000238 	.word	0x20000238
 8008230:	20000226 	.word	0x20000226
 8008234:	20000228 	.word	0x20000228
 8008238:	44000000 	.word	0x44000000
 800823c:	2000023c 	.word	0x2000023c
 8008240:	2000022a 	.word	0x2000022a
 8008244:	2000022c 	.word	0x2000022c
 8008248:	20000240 	.word	0x20000240
 800824c:	4a800000 	.word	0x4a800000
 8008250:	20000244 	.word	0x20000244

08008254 <Sensor_Timer_Callback>:

static void Sensor_Timer_Callback(void) {
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
	// Only do something if a client is subscribed for notifications
	if (Custom_App_Context.Temperature_pressure_Notification_Status) {
 800825a:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <Sensor_Timer_Callback+0x44>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d016      	beq.n	8008290 <Sensor_Timer_Callback+0x3c>
		uint8_t sensor_payload[8];

		// 1. Read the sensor to get the latest temperature and pressure
		Sensor_ReadTempPressure();
 8008262:	f7ff fefd 	bl	8008060 <Sensor_ReadTempPressure>

		// 2. Pack both float values into the 8-byte array
		memcpy(&sensor_payload[0], &temperature, sizeof(float)); // First 4 bytes
 8008266:	4b0d      	ldr	r3, [pc, #52]	@ (800829c <Sensor_Timer_Callback+0x48>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	603b      	str	r3, [r7, #0]
		memcpy(&sensor_payload[4], &pressure, sizeof(float));    // Next 4 bytes
 800826c:	4b0c      	ldr	r3, [pc, #48]	@ (80082a0 <Sensor_Timer_Callback+0x4c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	607b      	str	r3, [r7, #4]

		APP_DBG_MSG("Sending Combined Temp/Pres Notification...\n");

		// 3. Send the single 8-byte notification
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMPERATURE_PRESSURE,
 8008272:	463b      	mov	r3, r7
 8008274:	4619      	mov	r1, r3
 8008276:	2000      	movs	r0, #0
 8008278:	f000 f956 	bl	8008528 <Custom_STM_App_Update_Char>
				sensor_payload);

		// 1) Terminate the link (replace with your connection handle variable)
		aci_gap_terminate(Custom_App_Context.ConnectionHandle, 0x13); // User terminated
 800827c:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <Sensor_Timer_Callback+0x44>)
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	2113      	movs	r1, #19
 8008282:	4618      	mov	r0, r3
 8008284:	f7fd fd40 	bl	8005d08 <aci_gap_terminate>

		// 2) Make sure we’re not advertising while we sleep
		aci_gap_set_non_discoverable();
 8008288:	f7fd f95e 	bl	8005548 <aci_gap_set_non_discoverable>

		// 3) Arm the RTC wake and fall back to sequencer idle
		Sleep_ArmWakeupAndIdle();
 800828c:	f7f9 fcde 	bl	8001c4c <Sleep_ArmWakeupAndIdle>

	}
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	2000035c 	.word	0x2000035c
 800829c:	20000238 	.word	0x20000238
 80082a0:	20000244 	.word	0x20000244

080082a4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b092      	sub	sp, #72	@ 0x48
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3301      	adds	r3, #1
 80082b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch (event_pckt->evt)
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2bff      	cmp	r3, #255	@ 0xff
 80082be:	f040 80ad 	bne.w	800841c <Custom_STM_Event_Handler+0x178>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	3302      	adds	r3, #2
 80082c6:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (blecore_evt->ecode)
 80082c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80082d2:	2b1a      	cmp	r3, #26
 80082d4:	f200 809c 	bhi.w	8008410 <Custom_STM_Event_Handler+0x16c>
 80082d8:	a201      	add	r2, pc, #4	@ (adr r2, 80082e0 <Custom_STM_Event_Handler+0x3c>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	0800834d 	.word	0x0800834d
 80082e4:	08008411 	.word	0x08008411
 80082e8:	08008411 	.word	0x08008411
 80082ec:	08008411 	.word	0x08008411
 80082f0:	08008411 	.word	0x08008411
 80082f4:	08008411 	.word	0x08008411
 80082f8:	08008411 	.word	0x08008411
 80082fc:	08008411 	.word	0x08008411
 8008300:	08008411 	.word	0x08008411
 8008304:	08008411 	.word	0x08008411
 8008308:	08008411 	.word	0x08008411
 800830c:	08008411 	.word	0x08008411
 8008310:	08008411 	.word	0x08008411
 8008314:	08008411 	.word	0x08008411
 8008318:	08008411 	.word	0x08008411
 800831c:	08008411 	.word	0x08008411
 8008320:	08008411 	.word	0x08008411
 8008324:	08008411 	.word	0x08008411
 8008328:	08008411 	.word	0x08008411
 800832c:	0800839b 	.word	0x0800839b
 8008330:	08008411 	.word	0x08008411
 8008334:	08008411 	.word	0x08008411
 8008338:	08008411 	.word	0x08008411
 800833c:	08008411 	.word	0x08008411
 8008340:	08008411 	.word	0x08008411
 8008344:	08008411 	.word	0x08008411
 8008348:	080083f3 	.word	0x080083f3
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800834c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834e:	3302      	adds	r3, #2
 8008350:	62bb      	str	r3, [r7, #40]	@ 0x28
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	b29b      	uxth	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	4b34      	ldr	r3, [pc, #208]	@ (800842c <Custom_STM_Event_Handler+0x188>)
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	3302      	adds	r3, #2
 8008360:	429a      	cmp	r2, r3
 8008362:	d157      	bne.n	8008414 <Custom_STM_Event_Handler+0x170>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	7a1b      	ldrb	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <Custom_STM_Event_Handler+0xd4>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d008      	beq.n	8008388 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8008376:	e00f      	b.n	8008398 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_DISABLED_EVT;
 8008378:	2302      	movs	r3, #2
 800837a:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fe07 	bl	8007f94 <Custom_STM_App_Notification>
                break;
 8008386:	e007      	b.n	8008398 <Custom_STM_Event_Handler+0xf4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPERATURE_PRESSURE_NOTIFY_ENABLED_EVT;
 8008388:	2301      	movs	r3, #1
 800838a:	753b      	strb	r3, [r7, #20]
                Custom_STM_App_Notification(&Notification);
 800838c:	f107 0314 	add.w	r3, r7, #20
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff fdff 	bl	8007f94 <Custom_STM_App_Notification>
                break;
 8008396:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8008398:	e03c      	b.n	8008414 <Custom_STM_Event_Handler+0x170>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800839a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839c:	3302      	adds	r3, #2
 800839e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80083a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	4b20      	ldr	r3, [pc, #128]	@ (800842c <Custom_STM_Event_Handler+0x188>)
 80083aa:	885b      	ldrh	r3, [r3, #2]
 80083ac:	3301      	adds	r3, #1
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d132      	bne.n	8008418 <Custom_STM_Event_Handler+0x174>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
				uint8_t sensor_payload[8];
				Sensor_ReadTempPressure();
 80083b8:	f7ff fe52 	bl	8008060 <Sensor_ReadTempPressure>
				memcpy(&sensor_payload[0], &temperature, sizeof(float));
 80083bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008430 <Custom_STM_Event_Handler+0x18c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
				memcpy(&sensor_payload[4], &pressure, sizeof(float));
 80083c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008434 <Custom_STM_Event_Handler+0x190>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	613b      	str	r3, [r7, #16]

				aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 80083c8:	4b18      	ldr	r3, [pc, #96]	@ (800842c <Custom_STM_Event_Handler+0x188>)
 80083ca:	8818      	ldrh	r0, [r3, #0]
 80083cc:	4b17      	ldr	r3, [pc, #92]	@ (800842c <Custom_STM_Event_Handler+0x188>)
 80083ce:	8859      	ldrh	r1, [r3, #2]
 80083d0:	4b19      	ldr	r3, [pc, #100]	@ (8008438 <Custom_STM_Event_Handler+0x194>)
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	f107 030c 	add.w	r3, r7, #12
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	4613      	mov	r3, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	f7fd ff66 	bl	80062b0 <aci_gatt_update_char_value>
						CustomContext.CustomTemperature_PressureHdle, 0,
						SizeTemperature_Pressure, // Use the 8-byte size
						sensor_payload);
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80083e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe f85e 	bl	80064ac <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomTemperature_PressureHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 80083f0:	e012      	b.n	8008418 <Custom_STM_Event_Handler+0x174>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80083f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f4:	3302      	adds	r3, #2
 80083f6:	633b      	str	r3, [r7, #48]	@ 0x30
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	753b      	strb	r3, [r7, #20]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	84bb      	strh	r3, [r7, #36]	@ 0x24
          Custom_STM_App_Notification(&Notification);
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff fdc3 	bl	8007f94 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800840e:	e004      	b.n	800841a <Custom_STM_Event_Handler+0x176>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008410:	bf00      	nop
 8008412:	e004      	b.n	800841e <Custom_STM_Event_Handler+0x17a>
          break;
 8008414:	bf00      	nop
 8008416:	e002      	b.n	800841e <Custom_STM_Event_Handler+0x17a>
          break;
 8008418:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800841a:	e000      	b.n	800841e <Custom_STM_Event_Handler+0x17a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800841c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800841e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}/* end Custom_STM_Event_Handler */
 8008422:	4618      	mov	r0, r3
 8008424:	3740      	adds	r7, #64	@ 0x40
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000364 	.word	0x20000364
 8008430:	20000238 	.word	0x20000238
 8008434:	20000244 	.word	0x20000244
 8008438:	20000046 	.word	0x20000046

0800843c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	@ 0x30
 8008440:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008442:	2392      	movs	r3, #146	@ 0x92
 8008444:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008446:	4834      	ldr	r0, [pc, #208]	@ (8008518 <SVCCTL_InitCustomSvc+0xdc>)
 8008448:	f7fe fb36 	bl	8006ab8 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800844c:	2304      	movs	r3, #4
 800844e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
	/* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_SENSOR_UUID(uuid.Char_UUID_128);
 8008450:	238f      	movs	r3, #143	@ 0x8f
 8008452:	713b      	strb	r3, [r7, #4]
 8008454:	23e5      	movs	r3, #229	@ 0xe5
 8008456:	717b      	strb	r3, [r7, #5]
 8008458:	23b3      	movs	r3, #179	@ 0xb3
 800845a:	71bb      	strb	r3, [r7, #6]
 800845c:	23d5      	movs	r3, #213	@ 0xd5
 800845e:	71fb      	strb	r3, [r7, #7]
 8008460:	232e      	movs	r3, #46	@ 0x2e
 8008462:	723b      	strb	r3, [r7, #8]
 8008464:	237f      	movs	r3, #127	@ 0x7f
 8008466:	727b      	strb	r3, [r7, #9]
 8008468:	234a      	movs	r3, #74	@ 0x4a
 800846a:	72bb      	strb	r3, [r7, #10]
 800846c:	2398      	movs	r3, #152	@ 0x98
 800846e:	72fb      	strb	r3, [r7, #11]
 8008470:	232a      	movs	r3, #42	@ 0x2a
 8008472:	733b      	strb	r3, [r7, #12]
 8008474:	2348      	movs	r3, #72	@ 0x48
 8008476:	737b      	strb	r3, [r7, #13]
 8008478:	237a      	movs	r3, #122	@ 0x7a
 800847a:	73bb      	strb	r3, [r7, #14]
 800847c:	23cc      	movs	r3, #204	@ 0xcc
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	2323      	movs	r3, #35	@ 0x23
 8008482:	743b      	strb	r3, [r7, #16]
 8008484:	2323      	movs	r3, #35	@ 0x23
 8008486:	747b      	strb	r3, [r7, #17]
 8008488:	2300      	movs	r3, #0
 800848a:	74bb      	strb	r3, [r7, #18]
 800848c:	2300      	movs	r3, #0
 800848e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008490:	7dbb      	ldrb	r3, [r7, #22]
 8008492:	1d39      	adds	r1, r7, #4
 8008494:	4a21      	ldr	r2, [pc, #132]	@ (800851c <SVCCTL_InitCustomSvc+0xe0>)
 8008496:	9200      	str	r2, [sp, #0]
 8008498:	2201      	movs	r2, #1
 800849a:	2002      	movs	r0, #2
 800849c:	f7fd fd2a 	bl	8005ef4 <aci_gatt_add_service>
 80084a0:	4603      	mov	r3, r0
 80084a2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Temperature_Pressure
   */
  COPY_TEMPERATURE_PRESSURE_UUID(uuid.Char_UUID_128);
 80084a4:	2319      	movs	r3, #25
 80084a6:	713b      	strb	r3, [r7, #4]
 80084a8:	23ed      	movs	r3, #237	@ 0xed
 80084aa:	717b      	strb	r3, [r7, #5]
 80084ac:	2382      	movs	r3, #130	@ 0x82
 80084ae:	71bb      	strb	r3, [r7, #6]
 80084b0:	23ae      	movs	r3, #174	@ 0xae
 80084b2:	71fb      	strb	r3, [r7, #7]
 80084b4:	23ed      	movs	r3, #237	@ 0xed
 80084b6:	723b      	strb	r3, [r7, #8]
 80084b8:	2321      	movs	r3, #33	@ 0x21
 80084ba:	727b      	strb	r3, [r7, #9]
 80084bc:	234c      	movs	r3, #76	@ 0x4c
 80084be:	72bb      	strb	r3, [r7, #10]
 80084c0:	239d      	movs	r3, #157	@ 0x9d
 80084c2:	72fb      	strb	r3, [r7, #11]
 80084c4:	2341      	movs	r3, #65	@ 0x41
 80084c6:	733b      	strb	r3, [r7, #12]
 80084c8:	2345      	movs	r3, #69	@ 0x45
 80084ca:	737b      	strb	r3, [r7, #13]
 80084cc:	2322      	movs	r3, #34	@ 0x22
 80084ce:	73bb      	strb	r3, [r7, #14]
 80084d0:	238e      	movs	r3, #142	@ 0x8e
 80084d2:	73fb      	strb	r3, [r7, #15]
 80084d4:	2324      	movs	r3, #36	@ 0x24
 80084d6:	743b      	strb	r3, [r7, #16]
 80084d8:	2323      	movs	r3, #35	@ 0x23
 80084da:	747b      	strb	r3, [r7, #17]
 80084dc:	2300      	movs	r3, #0
 80084de:	74bb      	strb	r3, [r7, #18]
 80084e0:	2300      	movs	r3, #0
 80084e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSensorHdle,
 80084e4:	4b0d      	ldr	r3, [pc, #52]	@ (800851c <SVCCTL_InitCustomSvc+0xe0>)
 80084e6:	8818      	ldrh	r0, [r3, #0]
 80084e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <SVCCTL_InitCustomSvc+0xe4>)
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	1d3a      	adds	r2, r7, #4
 80084ee:	490d      	ldr	r1, [pc, #52]	@ (8008524 <SVCCTL_InitCustomSvc+0xe8>)
 80084f0:	9105      	str	r1, [sp, #20]
 80084f2:	2101      	movs	r1, #1
 80084f4:	9104      	str	r1, [sp, #16]
 80084f6:	2110      	movs	r1, #16
 80084f8:	9103      	str	r1, [sp, #12]
 80084fa:	2104      	movs	r1, #4
 80084fc:	9102      	str	r1, [sp, #8]
 80084fe:	2100      	movs	r1, #0
 8008500:	9101      	str	r1, [sp, #4]
 8008502:	2112      	movs	r1, #18
 8008504:	9100      	str	r1, [sp, #0]
 8008506:	2102      	movs	r1, #2
 8008508:	f7fd fdca 	bl	80060a0 <aci_gatt_add_char>
 800850c:	4603      	mov	r3, r0
 800850e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008510:	bf00      	nop
}
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	080082a5 	.word	0x080082a5
 800851c:	20000364 	.word	0x20000364
 8008520:	20000046 	.word	0x20000046
 8008524:	20000366 	.word	0x20000366

08008528 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af02      	add	r7, sp, #8
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008534:	2392      	movs	r3, #146	@ 0x92
 8008536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10f      	bne.n	800855e <Custom_STM_App_Update_Char+0x36>
  {

    case CUSTOM_STM_TEMPERATURE_PRESSURE:
      ret = aci_gatt_update_char_value(CustomContext.CustomSensorHdle,
 800853e:	4b0b      	ldr	r3, [pc, #44]	@ (800856c <Custom_STM_App_Update_Char+0x44>)
 8008540:	8818      	ldrh	r0, [r3, #0]
 8008542:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <Custom_STM_App_Update_Char+0x44>)
 8008544:	8859      	ldrh	r1, [r3, #2]
 8008546:	4b0a      	ldr	r3, [pc, #40]	@ (8008570 <Custom_STM_App_Update_Char+0x48>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b2da      	uxtb	r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	2200      	movs	r2, #0
 8008554:	f7fd feac 	bl	80062b0 <aci_gatt_update_char_value>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMPERATURE_PRESSURE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800855c:	e000      	b.n	8008560 <Custom_STM_App_Update_Char+0x38>

    default:
      break;
 800855e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000364 	.word	0x20000364
 8008570:	20000046 	.word	0x20000046

08008574 <LL_PWR_EnableBootC2>:
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008578:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <LL_PWR_EnableBootC2+0x1c>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	4a04      	ldr	r2, [pc, #16]	@ (8008590 <LL_PWR_EnableBootC2+0x1c>)
 800857e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008582:	60d3      	str	r3, [r2, #12]
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	58000400 	.word	0x58000400

08008594 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800859c:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800859e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80085a2:	4905      	ldr	r1, [pc, #20]	@ (80085b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	58000800 	.word	0x58000800

080085bc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80085c4:	4b05      	ldr	r3, [pc, #20]	@ (80085dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80085c6:	6a1a      	ldr	r2, [r3, #32]
 80085c8:	4904      	ldr	r1, [pc, #16]	@ (80085dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	620b      	str	r3, [r1, #32]
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	58000800 	.word	0x58000800

080085e0 <LL_AHB3_GRP1_EnableClock>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80085e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80085f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4013      	ands	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008604:	68fb      	ldr	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800861a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800861e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800862e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008632:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4013      	ands	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800863c:	68fb      	ldr	r3, [r7, #12]
}
 800863e:	bf00      	nop
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f043 0201 	orr.w	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	43db      	mvns	r3, r3
 800869e:	401a      	ands	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	605a      	str	r2, [r3, #4]
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	605a      	str	r2, [r3, #4]
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	609a      	str	r2, [r3, #8]
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	041a      	lsls	r2, r3, #16
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	609a      	str	r2, [r3, #8]
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	4013      	ands	r3, r2
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d101      	bne.n	800874e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69da      	ldr	r2, [r3, #28]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	4013      	ands	r3, r2
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d101      	bne.n	8008778 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
	...

08008788 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800878c:	2102      	movs	r1, #2
 800878e:	4818      	ldr	r0, [pc, #96]	@ (80087f0 <HW_IPCC_Rx_Handler+0x68>)
 8008790:	f7ff ffe4 	bl	800875c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <HW_IPCC_Rx_Handler+0x24>
 800879a:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <HW_IPCC_Rx_Handler+0x68>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80087a6:	f000 f925 	bl	80089f4 <HW_IPCC_SYS_EvtHandler>
 80087aa:	e01e      	b.n	80087ea <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80087ac:	2101      	movs	r1, #1
 80087ae:	4810      	ldr	r0, [pc, #64]	@ (80087f0 <HW_IPCC_Rx_Handler+0x68>)
 80087b0:	f7ff ffd4 	bl	800875c <LL_C2_IPCC_IsActiveFlag_CHx>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d008      	beq.n	80087cc <HW_IPCC_Rx_Handler+0x44>
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <HW_IPCC_Rx_Handler+0x68>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80087c6:	f000 f899 	bl	80088fc <HW_IPCC_BLE_EvtHandler>
 80087ca:	e00e      	b.n	80087ea <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80087cc:	2108      	movs	r1, #8
 80087ce:	4808      	ldr	r0, [pc, #32]	@ (80087f0 <HW_IPCC_Rx_Handler+0x68>)
 80087d0:	f7ff ffc4 	bl	800875c <LL_C2_IPCC_IsActiveFlag_CHx>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d008      	beq.n	80087ec <HW_IPCC_Rx_Handler+0x64>
 80087da:	4b05      	ldr	r3, [pc, #20]	@ (80087f0 <HW_IPCC_Rx_Handler+0x68>)
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d102      	bne.n	80087ec <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80087e6:	f000 f97d 	bl	8008ae4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
}
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	58000c00 	.word	0x58000c00

080087f4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80087f8:	2102      	movs	r1, #2
 80087fa:	4818      	ldr	r0, [pc, #96]	@ (800885c <HW_IPCC_Tx_Handler+0x68>)
 80087fc:	f7ff ff99 	bl	8008732 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d108      	bne.n	8008818 <HW_IPCC_Tx_Handler+0x24>
 8008806:	4b15      	ldr	r3, [pc, #84]	@ (800885c <HW_IPCC_Tx_Handler+0x68>)
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008812:	f000 f8d3 	bl	80089bc <HW_IPCC_SYS_CmdEvtHandler>
 8008816:	e01e      	b.n	8008856 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008818:	2108      	movs	r1, #8
 800881a:	4810      	ldr	r0, [pc, #64]	@ (800885c <HW_IPCC_Tx_Handler+0x68>)
 800881c:	f7ff ff89 	bl	8008732 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d108      	bne.n	8008838 <HW_IPCC_Tx_Handler+0x44>
 8008826:	4b0d      	ldr	r3, [pc, #52]	@ (800885c <HW_IPCC_Tx_Handler+0x68>)
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008832:	f000 f919 	bl	8008a68 <HW_IPCC_MM_FreeBufHandler>
 8008836:	e00e      	b.n	8008856 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008838:	2120      	movs	r1, #32
 800883a:	4808      	ldr	r0, [pc, #32]	@ (800885c <HW_IPCC_Tx_Handler+0x68>)
 800883c:	f7ff ff79 	bl	8008732 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d108      	bne.n	8008858 <HW_IPCC_Tx_Handler+0x64>
 8008846:	4b05      	ldr	r3, [pc, #20]	@ (800885c <HW_IPCC_Tx_Handler+0x68>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008852:	f000 f85f 	bl	8008914 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008856:	bf00      	nop
 8008858:	bf00      	nop
}
 800885a:	bd80      	pop	{r7, pc}
 800885c:	58000c00 	.word	0x58000c00

08008860 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008864:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008868:	f7ff fed3 	bl	8008612 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800886c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008870:	f7ff fea4 	bl	80085bc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008874:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008878:	f7ff fe8c 	bl	8008594 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800887c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800887e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008880:	f7ff fe78 	bl	8008574 <LL_PWR_EnableBootC2>

  return;
 8008884:	bf00      	nop
}
 8008886:	bd80      	pop	{r7, pc}

08008888 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800888c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008890:	f7ff fea6 	bl	80085e0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008894:	4806      	ldr	r0, [pc, #24]	@ (80088b0 <HW_IPCC_Init+0x28>)
 8008896:	f7ff fee8 	bl	800866a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800889a:	4805      	ldr	r0, [pc, #20]	@ (80088b0 <HW_IPCC_Init+0x28>)
 800889c:	f7ff fed5 	bl	800864a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80088a0:	202c      	movs	r0, #44	@ 0x2c
 80088a2:	f7f9 ff6c 	bl	800277e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80088a6:	202d      	movs	r0, #45	@ 0x2d
 80088a8:	f7f9 ff69 	bl	800277e <HAL_NVIC_EnableIRQ>

  return;
 80088ac:	bf00      	nop
}
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	58000c00 	.word	0x58000c00

080088b4 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ba:	f3ef 8310 	mrs	r3, PRIMASK
 80088be:	607b      	str	r3, [r7, #4]
  return(result);
 80088c0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80088c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80088c4:	b672      	cpsid	i
}
 80088c6:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80088c8:	2101      	movs	r1, #1
 80088ca:	4806      	ldr	r0, [pc, #24]	@ (80088e4 <HW_IPCC_BLE_Init+0x30>)
 80088cc:	f7ff ff02 	bl	80086d4 <LL_C1_IPCC_EnableReceiveChannel>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f383 8810 	msr	PRIMASK, r3
}
 80088da:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80088dc:	bf00      	nop
}
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	58000c00 	.word	0x58000c00

080088e8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80088ec:	2101      	movs	r1, #1
 80088ee:	4802      	ldr	r0, [pc, #8]	@ (80088f8 <HW_IPCC_BLE_SendCmd+0x10>)
 80088f0:	f7ff ff10 	bl	8008714 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80088f4:	bf00      	nop
}
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	58000c00 	.word	0x58000c00

080088fc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008900:	f7fe fd9e 	bl	8007440 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008904:	2101      	movs	r1, #1
 8008906:	4802      	ldr	r0, [pc, #8]	@ (8008910 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008908:	f7ff fef6 	bl	80086f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800890c:	bf00      	nop
}
 800890e:	bd80      	pop	{r7, pc}
 8008910:	58000c00 	.word	0x58000c00

08008914 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800891a:	f3ef 8310 	mrs	r3, PRIMASK
 800891e:	607b      	str	r3, [r7, #4]
  return(result);
 8008920:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008924:	b672      	cpsid	i
}
 8008926:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008928:	2120      	movs	r1, #32
 800892a:	4807      	ldr	r0, [pc, #28]	@ (8008948 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800892c:	f7ff fec0 	bl	80086b0 <LL_C1_IPCC_DisableTransmitChannel>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f383 8810 	msr	PRIMASK, r3
}
 800893a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800893c:	f7fe fdb0 	bl	80074a0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008940:	bf00      	nop
}
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	58000c00 	.word	0x58000c00

0800894c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008952:	f3ef 8310 	mrs	r3, PRIMASK
 8008956:	607b      	str	r3, [r7, #4]
  return(result);
 8008958:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800895a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800895c:	b672      	cpsid	i
}
 800895e:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008960:	2102      	movs	r1, #2
 8008962:	4806      	ldr	r0, [pc, #24]	@ (800897c <HW_IPCC_SYS_Init+0x30>)
 8008964:	f7ff feb6 	bl	80086d4 <LL_C1_IPCC_EnableReceiveChannel>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f383 8810 	msr	PRIMASK, r3
}
 8008972:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8008974:	bf00      	nop
}
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	58000c00 	.word	0x58000c00

08008980 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008986:	2102      	movs	r1, #2
 8008988:	480b      	ldr	r0, [pc, #44]	@ (80089b8 <HW_IPCC_SYS_SendCmd+0x38>)
 800898a:	f7ff fec3 	bl	8008714 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800898e:	f3ef 8310 	mrs	r3, PRIMASK
 8008992:	607b      	str	r3, [r7, #4]
  return(result);
 8008994:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008996:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008998:	b672      	cpsid	i
}
 800899a:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800899c:	2102      	movs	r1, #2
 800899e:	4806      	ldr	r0, [pc, #24]	@ (80089b8 <HW_IPCC_SYS_SendCmd+0x38>)
 80089a0:	f7ff fe73 	bl	800868a <LL_C1_IPCC_EnableTransmitChannel>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f383 8810 	msr	PRIMASK, r3
}
 80089ae:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80089b0:	bf00      	nop
}
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	58000c00 	.word	0x58000c00

080089bc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c2:	f3ef 8310 	mrs	r3, PRIMASK
 80089c6:	607b      	str	r3, [r7, #4]
  return(result);
 80089c8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80089ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80089cc:	b672      	cpsid	i
}
 80089ce:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80089d0:	2102      	movs	r1, #2
 80089d2:	4807      	ldr	r0, [pc, #28]	@ (80089f0 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 80089d4:	f7ff fe6c 	bl	80086b0 <LL_C1_IPCC_DisableTransmitChannel>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f383 8810 	msr	PRIMASK, r3
}
 80089e2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 80089e4:	f7fe fdac 	bl	8007540 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80089e8:	bf00      	nop
}
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	58000c00 	.word	0x58000c00

080089f4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80089f8:	f7fe fdb8 	bl	800756c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80089fc:	2102      	movs	r1, #2
 80089fe:	4802      	ldr	r0, [pc, #8]	@ (8008a08 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008a00:	f7ff fe7a 	bl	80086f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008a04:	bf00      	nop
}
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	58000c00 	.word	0x58000c00

08008a0c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008a14:	2108      	movs	r1, #8
 8008a16:	4812      	ldr	r0, [pc, #72]	@ (8008a60 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8008a18:	f7ff fe8b 	bl	8008732 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d013      	beq.n	8008a4a <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 8008a22:	4a10      	ldr	r2, [pc, #64]	@ (8008a64 <HW_IPCC_MM_SendFreeBuf+0x58>)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a28:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8008a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a32:	b672      	cpsid	i
}
 8008a34:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a36:	2108      	movs	r1, #8
 8008a38:	4809      	ldr	r0, [pc, #36]	@ (8008a60 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8008a3a:	f7ff fe26 	bl	800868a <LL_C1_IPCC_EnableTransmitChannel>
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f383 8810 	msr	PRIMASK, r3
}
 8008a48:	e005      	b.n	8008a56 <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4798      	blx	r3

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a4e:	2108      	movs	r1, #8
 8008a50:	4803      	ldr	r0, [pc, #12]	@ (8008a60 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8008a52:	f7ff fe5f 	bl	8008714 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 8008a56:	bf00      	nop
}
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	58000c00 	.word	0x58000c00
 8008a64:	20000368 	.word	0x20000368

08008a68 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a72:	607b      	str	r3, [r7, #4]
  return(result);
 8008a74:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008a76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a78:	b672      	cpsid	i
}
 8008a7a:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a7c:	2108      	movs	r1, #8
 8008a7e:	480a      	ldr	r0, [pc, #40]	@ (8008aa8 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8008a80:	f7ff fe16 	bl	80086b0 <LL_C1_IPCC_DisableTransmitChannel>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f383 8810 	msr	PRIMASK, r3
}
 8008a8e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8008a90:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <HW_IPCC_MM_FreeBufHandler+0x44>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a96:	2108      	movs	r1, #8
 8008a98:	4803      	ldr	r0, [pc, #12]	@ (8008aa8 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8008a9a:	f7ff fe3b 	bl	8008714 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008a9e:	bf00      	nop
}
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	58000c00 	.word	0x58000c00
 8008aac:	20000368 	.word	0x20000368

08008ab0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aba:	607b      	str	r3, [r7, #4]
  return(result);
 8008abc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8008abe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ac0:	b672      	cpsid	i
}
 8008ac2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008ac4:	2108      	movs	r1, #8
 8008ac6:	4806      	ldr	r0, [pc, #24]	@ (8008ae0 <HW_IPCC_TRACES_Init+0x30>)
 8008ac8:	f7ff fe04 	bl	80086d4 <LL_C1_IPCC_EnableReceiveChannel>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f383 8810 	msr	PRIMASK, r3
}
 8008ad6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8008ad8:	bf00      	nop
}
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	58000c00 	.word	0x58000c00

08008ae4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008ae8:	f7fe fde8 	bl	80076bc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008aec:	2108      	movs	r1, #8
 8008aee:	4802      	ldr	r0, [pc, #8]	@ (8008af8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008af0:	f7ff fe02 	bl	80086f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008af4:	bf00      	nop
}
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	58000c00 	.word	0x58000c00

08008afc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008b00:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <UTIL_LPM_Init+0x1c>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <UTIL_LPM_Init+0x20>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008b0c:	bf00      	nop
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	2000036c 	.word	0x2000036c
 8008b1c:	20000370 	.word	0x20000370

08008b20 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b30:	613b      	str	r3, [r7, #16]
  return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b36:	b672      	cpsid	i
}
 8008b38:	bf00      	nop
  
  switch( state )
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <UTIL_LPM_SetStopMode+0x32>
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d10e      	bne.n	8008b62 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8008b44:	4b0d      	ldr	r3, [pc, #52]	@ (8008b7c <UTIL_LPM_SetStopMode+0x5c>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8008b7c <UTIL_LPM_SetStopMode+0x5c>)
 8008b4e:	6013      	str	r3, [r2, #0]
      break;
 8008b50:	e008      	b.n	8008b64 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	43da      	mvns	r2, r3
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <UTIL_LPM_SetStopMode+0x5c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	4a07      	ldr	r2, [pc, #28]	@ (8008b7c <UTIL_LPM_SetStopMode+0x5c>)
 8008b5e:	6013      	str	r3, [r2, #0]
      break;
 8008b60:	e000      	b.n	8008b64 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8008b62:	bf00      	nop
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f383 8810 	msr	PRIMASK, r3
}
 8008b6e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	2000036c 	.word	0x2000036c

08008b80 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b90:	613b      	str	r3, [r7, #16]
  return(result);
 8008b92:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008b94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b96:	b672      	cpsid	i
}
 8008b98:	bf00      	nop
  
  switch(state)
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d008      	beq.n	8008bb2 <UTIL_LPM_SetOffMode+0x32>
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10e      	bne.n	8008bc2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <UTIL_LPM_SetOffMode+0x5c>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	4a0b      	ldr	r2, [pc, #44]	@ (8008bdc <UTIL_LPM_SetOffMode+0x5c>)
 8008bae:	6013      	str	r3, [r2, #0]
      break;
 8008bb0:	e008      	b.n	8008bc4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	43da      	mvns	r2, r3
 8008bb6:	4b09      	ldr	r3, [pc, #36]	@ (8008bdc <UTIL_LPM_SetOffMode+0x5c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	4a07      	ldr	r2, [pc, #28]	@ (8008bdc <UTIL_LPM_SetOffMode+0x5c>)
 8008bbe:	6013      	str	r3, [r2, #0]
      break;
 8008bc0:	e000      	b.n	8008bc4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008bc2:	bf00      	nop
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f383 8810 	msr	PRIMASK, r3
}
 8008bce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008bd0:	bf00      	nop
 8008bd2:	371c      	adds	r7, #28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	20000370 	.word	0x20000370

08008be0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bec:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8008bee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bf0:	b672      	cpsid	i
}
 8008bf2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8008bf4:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <UTIL_LPM_EnterLowPower+0x60>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008bfc:	4b11      	ldr	r3, [pc, #68]	@ (8008c44 <UTIL_LPM_EnterLowPower+0x64>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008c02:	4b10      	ldr	r3, [pc, #64]	@ (8008c44 <UTIL_LPM_EnterLowPower+0x64>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	4798      	blx	r3
 8008c08:	e010      	b.n	8008c2c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c48 <UTIL_LPM_EnterLowPower+0x68>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d006      	beq.n	8008c20 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <UTIL_LPM_EnterLowPower+0x64>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8008c18:	4b0a      	ldr	r3, [pc, #40]	@ (8008c44 <UTIL_LPM_EnterLowPower+0x64>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	4798      	blx	r3
 8008c1e:	e005      	b.n	8008c2c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8008c20:	4b08      	ldr	r3, [pc, #32]	@ (8008c44 <UTIL_LPM_EnterLowPower+0x64>)
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8008c26:	4b07      	ldr	r3, [pc, #28]	@ (8008c44 <UTIL_LPM_EnterLowPower+0x64>)
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	4798      	blx	r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f383 8810 	msr	PRIMASK, r3
}
 8008c36:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	2000036c 	.word	0x2000036c
 8008c44:	080092dc 	.word	0x080092dc
 8008c48:	20000370 	.word	0x20000370

08008c4c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b090      	sub	sp, #64	@ 0x40
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008c54:	4b73      	ldr	r3, [pc, #460]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008c5a:	4b72      	ldr	r3, [pc, #456]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4013      	ands	r3, r2
 8008c62:	4a70      	ldr	r2, [pc, #448]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008c64:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008c66:	4b70      	ldr	r3, [pc, #448]	@ (8008e28 <UTIL_SEQ_Run+0x1dc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8008e2c <UTIL_SEQ_Run+0x1e0>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008c72:	4b6f      	ldr	r3, [pc, #444]	@ (8008e30 <UTIL_SEQ_Run+0x1e4>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008c78:	4b6e      	ldr	r3, [pc, #440]	@ (8008e34 <UTIL_SEQ_Run+0x1e8>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008c7e:	e08d      	b.n	8008d9c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008c84:	e002      	b.n	8008c8c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c88:	3301      	adds	r3, #1
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	401a      	ands	r2, r3
 8008c98:	4b62      	ldr	r3, [pc, #392]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f1      	beq.n	8008c86 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008ca2:	4a65      	ldr	r2, [pc, #404]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	401a      	ands	r2, r3
 8008cae:	4b5d      	ldr	r3, [pc, #372]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008cb6:	4a60      	ldr	r2, [pc, #384]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008cc8:	4a5b      	ldr	r2, [pc, #364]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008cd6:	4a58      	ldr	r2, [pc, #352]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f9c1 	bl	800906c <SEQ_BitPosition>
 8008cea:	4603      	mov	r3, r0
 8008cec:	461a      	mov	r2, r3
 8008cee:	4b53      	ldr	r3, [pc, #332]	@ (8008e3c <UTIL_SEQ_Run+0x1f0>)
 8008cf0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008cf2:	4a51      	ldr	r2, [pc, #324]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8008e3c <UTIL_SEQ_Run+0x1f0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2101      	movs	r1, #1
 8008d02:	fa01 f303 	lsl.w	r3, r1, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	401a      	ands	r2, r3
 8008d0a:	494b      	ldr	r1, [pc, #300]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	440b      	add	r3, r1
 8008d12:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d14:	f3ef 8310 	mrs	r3, PRIMASK
 8008d18:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d1a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d1e:	b672      	cpsid	i
}
 8008d20:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008d22:	4b46      	ldr	r3, [pc, #280]	@ (8008e3c <UTIL_SEQ_Run+0x1f0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2201      	movs	r2, #1
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	43da      	mvns	r2, r3
 8008d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e28 <UTIL_SEQ_Run+0x1dc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4013      	ands	r3, r2
 8008d34:	4a3c      	ldr	r2, [pc, #240]	@ (8008e28 <UTIL_SEQ_Run+0x1dc>)
 8008d36:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008d38:	2301      	movs	r3, #1
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d3c:	e013      	b.n	8008d66 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d40:	3b01      	subs	r3, #1
 8008d42:	4a3d      	ldr	r2, [pc, #244]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008d44:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008d48:	4b3c      	ldr	r3, [pc, #240]	@ (8008e3c <UTIL_SEQ_Run+0x1f0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43da      	mvns	r2, r3
 8008d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d56:	3b01      	subs	r3, #1
 8008d58:	400a      	ands	r2, r1
 8008d5a:	4937      	ldr	r1, [pc, #220]	@ (8008e38 <UTIL_SEQ_Run+0x1ec>)
 8008d5c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d62:	3b01      	subs	r3, #1
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e8      	bne.n	8008d3e <UTIL_SEQ_Run+0xf2>
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f383 8810 	msr	PRIMASK, r3
}
 8008d76:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008d78:	4b30      	ldr	r3, [pc, #192]	@ (8008e3c <UTIL_SEQ_Run+0x1f0>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a30      	ldr	r2, [pc, #192]	@ (8008e40 <UTIL_SEQ_Run+0x1f4>)
 8008d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d82:	4798      	blx	r3

    local_taskset = TaskSet;
 8008d84:	4b28      	ldr	r3, [pc, #160]	@ (8008e28 <UTIL_SEQ_Run+0x1dc>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8008d8a:	4b28      	ldr	r3, [pc, #160]	@ (8008e2c <UTIL_SEQ_Run+0x1e0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008d90:	4b27      	ldr	r3, [pc, #156]	@ (8008e30 <UTIL_SEQ_Run+0x1e4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008d96:	4b27      	ldr	r3, [pc, #156]	@ (8008e34 <UTIL_SEQ_Run+0x1e8>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008d9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	401a      	ands	r2, r3
 8008da2:	4b20      	ldr	r3, [pc, #128]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <UTIL_SEQ_Run+0x16c>
 8008dac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	4013      	ands	r3, r2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f43f af64 	beq.w	8008c80 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008db8:	4b20      	ldr	r3, [pc, #128]	@ (8008e3c <UTIL_SEQ_Run+0x1f0>)
 8008dba:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008dc0:	f000 f946 	bl	8009050 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008dca:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dce:	b672      	cpsid	i
}
 8008dd0:	bf00      	nop
  local_taskset = TaskSet;
 8008dd2:	4b15      	ldr	r3, [pc, #84]	@ (8008e28 <UTIL_SEQ_Run+0x1dc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008dd8:	4b14      	ldr	r3, [pc, #80]	@ (8008e2c <UTIL_SEQ_Run+0x1e0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008dde:	4b14      	ldr	r3, [pc, #80]	@ (8008e30 <UTIL_SEQ_Run+0x1e4>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008de4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	401a      	ands	r2, r3
 8008dea:	4b0e      	ldr	r3, [pc, #56]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d107      	bne.n	8008e04 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008df4:	4b0f      	ldr	r3, [pc, #60]	@ (8008e34 <UTIL_SEQ_Run+0x1e8>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008e00:	f7f7 fc22 	bl	8000648 <UTIL_SEQ_Idle>
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f383 8810 	msr	PRIMASK, r3
}
 8008e0e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008e10:	f000 f925 	bl	800905e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008e14:	4a03      	ldr	r2, [pc, #12]	@ (8008e24 <UTIL_SEQ_Run+0x1d8>)
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	6013      	str	r3, [r2, #0]

  return;
 8008e1a:	bf00      	nop
}
 8008e1c:	3740      	adds	r7, #64	@ 0x40
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	2000004c 	.word	0x2000004c
 8008e28:	20000374 	.word	0x20000374
 8008e2c:	20000378 	.word	0x20000378
 8008e30:	20000048 	.word	0x20000048
 8008e34:	2000037c 	.word	0x2000037c
 8008e38:	20000404 	.word	0x20000404
 8008e3c:	20000380 	.word	0x20000380
 8008e40:	20000384 	.word	0x20000384

08008e44 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e50:	f3ef 8310 	mrs	r3, PRIMASK
 8008e54:	617b      	str	r3, [r7, #20]
  return(result);
 8008e56:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e5a:	b672      	cpsid	i
}
 8008e5c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f904 	bl	800906c <SEQ_BitPosition>
 8008e64:	4603      	mov	r3, r0
 8008e66:	4619      	mov	r1, r3
 8008e68:	4a06      	ldr	r2, [pc, #24]	@ (8008e84 <UTIL_SEQ_RegTask+0x40>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f383 8810 	msr	PRIMASK, r3
}
 8008e7a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008e7c:	bf00      	nop
}
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	20000384 	.word	0x20000384

08008e88 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e92:	f3ef 8310 	mrs	r3, PRIMASK
 8008e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e98:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e9c:	b672      	cpsid	i
}
 8008e9e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed8 <UTIL_SEQ_SetTask+0x50>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8008ed8 <UTIL_SEQ_SetTask+0x50>)
 8008eaa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008eac:	4a0b      	ldr	r2, [pc, #44]	@ (8008edc <UTIL_SEQ_SetTask+0x54>)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	4908      	ldr	r1, [pc, #32]	@ (8008edc <UTIL_SEQ_SetTask+0x54>)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f383 8810 	msr	PRIMASK, r3
}
 8008eca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008ecc:	bf00      	nop
}
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	20000374 	.word	0x20000374
 8008edc:	20000404 	.word	0x20000404

08008ee0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8008eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ef2:	b672      	cpsid	i
}
 8008ef4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	43da      	mvns	r2, r3
 8008efa:	4b08      	ldr	r3, [pc, #32]	@ (8008f1c <UTIL_SEQ_PauseTask+0x3c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4013      	ands	r3, r2
 8008f00:	4a06      	ldr	r2, [pc, #24]	@ (8008f1c <UTIL_SEQ_PauseTask+0x3c>)
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f383 8810 	msr	PRIMASK, r3
}
 8008f0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008f10:	bf00      	nop
}
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20000048 	.word	0x20000048

08008f20 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f28:	f3ef 8310 	mrs	r3, PRIMASK
 8008f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f32:	b672      	cpsid	i
}
 8008f34:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008f36:	4b09      	ldr	r3, [pc, #36]	@ (8008f5c <UTIL_SEQ_ResumeTask+0x3c>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	4a07      	ldr	r2, [pc, #28]	@ (8008f5c <UTIL_SEQ_ResumeTask+0x3c>)
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f383 8810 	msr	PRIMASK, r3
}
 8008f4c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008f4e:	bf00      	nop
}
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000048 	.word	0x20000048

08008f60 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f68:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f72:	b672      	cpsid	i
}
 8008f74:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008f76:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <UTIL_SEQ_SetEvt+0x3c>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	4a07      	ldr	r2, [pc, #28]	@ (8008f9c <UTIL_SEQ_SetEvt+0x3c>)
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f383 8810 	msr	PRIMASK, r3
}
 8008f8c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008f8e:	bf00      	nop
}
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	20000378 	.word	0x20000378

08008fa0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8009028 <UTIL_SEQ_WaitEvt+0x88>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008fae:	4b1e      	ldr	r3, [pc, #120]	@ (8009028 <UTIL_SEQ_WaitEvt+0x88>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d102      	bne.n	8008fbe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e005      	b.n	8008fca <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009028 <UTIL_SEQ_WaitEvt+0x88>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008fca:	4b18      	ldr	r3, [pc, #96]	@ (800902c <UTIL_SEQ_WaitEvt+0x8c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008fd0:	4a16      	ldr	r2, [pc, #88]	@ (800902c <UTIL_SEQ_WaitEvt+0x8c>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008fd6:	e003      	b.n	8008fe0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	69f8      	ldr	r0, [r7, #28]
 8008fdc:	f000 f82a 	bl	8009034 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008fe0:	4b13      	ldr	r3, [pc, #76]	@ (8009030 <UTIL_SEQ_WaitEvt+0x90>)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0f5      	beq.n	8008fd8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008fec:	4a0e      	ldr	r2, [pc, #56]	@ (8009028 <UTIL_SEQ_WaitEvt+0x88>)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ff8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ffc:	b672      	cpsid	i
}
 8008ffe:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	43da      	mvns	r2, r3
 8009004:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <UTIL_SEQ_WaitEvt+0x90>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4013      	ands	r3, r2
 800900a:	4a09      	ldr	r2, [pc, #36]	@ (8009030 <UTIL_SEQ_WaitEvt+0x90>)
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f383 8810 	msr	PRIMASK, r3
}
 8009018:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800901a:	4a04      	ldr	r2, [pc, #16]	@ (800902c <UTIL_SEQ_WaitEvt+0x8c>)
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	6013      	str	r3, [r2, #0]
  return;
 8009020:	bf00      	nop
}
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20000380 	.word	0x20000380
 800902c:	2000037c 	.word	0x2000037c
 8009030:	20000378 	.word	0x20000378

08009034 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	43db      	mvns	r3, r3
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff fe02 	bl	8008c4c <UTIL_SEQ_Run>
  return;
 8009048:	bf00      	nop
}
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009054:	bf00      	nop
}
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800905e:	b480      	push	{r7}
 8009060:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009062:	bf00      	nop
}
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <SEQ_BitPosition+0x16>
    return 32U;
 800907e:	2320      	movs	r3, #32
 8009080:	e003      	b.n	800908a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	fab3 f383 	clz	r3, r3
 8009088:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800908a:	f1c3 031f 	rsb	r3, r3, #31
 800908e:	b2db      	uxtb	r3, r3
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <memset>:
 800909c:	4402      	add	r2, r0
 800909e:	4603      	mov	r3, r0
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d100      	bne.n	80090a6 <memset+0xa>
 80090a4:	4770      	bx	lr
 80090a6:	f803 1b01 	strb.w	r1, [r3], #1
 80090aa:	e7f9      	b.n	80090a0 <memset+0x4>

080090ac <__libc_init_array>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	4d0d      	ldr	r5, [pc, #52]	@ (80090e4 <__libc_init_array+0x38>)
 80090b0:	4c0d      	ldr	r4, [pc, #52]	@ (80090e8 <__libc_init_array+0x3c>)
 80090b2:	1b64      	subs	r4, r4, r5
 80090b4:	10a4      	asrs	r4, r4, #2
 80090b6:	2600      	movs	r6, #0
 80090b8:	42a6      	cmp	r6, r4
 80090ba:	d109      	bne.n	80090d0 <__libc_init_array+0x24>
 80090bc:	4d0b      	ldr	r5, [pc, #44]	@ (80090ec <__libc_init_array+0x40>)
 80090be:	4c0c      	ldr	r4, [pc, #48]	@ (80090f0 <__libc_init_array+0x44>)
 80090c0:	f000 f826 	bl	8009110 <_init>
 80090c4:	1b64      	subs	r4, r4, r5
 80090c6:	10a4      	asrs	r4, r4, #2
 80090c8:	2600      	movs	r6, #0
 80090ca:	42a6      	cmp	r6, r4
 80090cc:	d105      	bne.n	80090da <__libc_init_array+0x2e>
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d4:	4798      	blx	r3
 80090d6:	3601      	adds	r6, #1
 80090d8:	e7ee      	b.n	80090b8 <__libc_init_array+0xc>
 80090da:	f855 3b04 	ldr.w	r3, [r5], #4
 80090de:	4798      	blx	r3
 80090e0:	3601      	adds	r6, #1
 80090e2:	e7f2      	b.n	80090ca <__libc_init_array+0x1e>
 80090e4:	080093a4 	.word	0x080093a4
 80090e8:	080093a4 	.word	0x080093a4
 80090ec:	080093a4 	.word	0x080093a4
 80090f0:	080093a8 	.word	0x080093a8

080090f4 <memcpy>:
 80090f4:	440a      	add	r2, r1
 80090f6:	4291      	cmp	r1, r2
 80090f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090fc:	d100      	bne.n	8009100 <memcpy+0xc>
 80090fe:	4770      	bx	lr
 8009100:	b510      	push	{r4, lr}
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800910a:	4291      	cmp	r1, r2
 800910c:	d1f9      	bne.n	8009102 <memcpy+0xe>
 800910e:	bd10      	pop	{r4, pc}

08009110 <_init>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr

0800911c <_fini>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr
